\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Oct 29 19:01:55 CET 2018
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=20000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "";

\proofObligation "#Proof Obligation Settings
#Mon Oct 29 19:01:55 CET 2018
name=NumericTextBox[NumericTextBox\\:\\:enterCharacter(int)].JML exceptional_behavior operation contract.1
contract=NumericTextBox[NumericTextBox\\:\\:enterCharacter(int)].JML exceptional_behavior operation contract.1
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "simonpersson" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "23350")

(branch "dummy ID"
(rule "instanceof_static_type" (formula "1") (term "0,0,0,1,0,0,1,1") (newnames "input,self,exc,heapAtPre,o,f"))
(rule "boolean_equal" (formula "1") (term "0,0,1,0,0,1,1"))
(rule "inInt" (formula "1") (term "1,0,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0,0"))
(rule "concrete_impl_1" (formula "1") (term "0,1,0,0,1,1"))
(rule "elementOfAllLocs" (formula "1") (term "0,0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,0,1,0,1,1"))
(rule "concrete_or_1" (formula "1") (term "0,0,1,0,1,1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "5"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "assignment" (formula "9") (term "1"))
(rule "sequentialToParallel2" (formula "9"))
(rule "simplifyUpdate3" (formula "9") (term "1,0"))
(rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "8") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_0") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "3"))
(rule "eqSymm" (formula "1") (term "0,1"))
(rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "9"))
(rule "false_to_not_true" (formula "1") (term "0,1"))
(rule "all_unused" (formula "10") (term "0,1,0,1"))
(rule "boxToDiamond" (formula "1") (term "1"))
(rule "double_not" (formula "1") (term "0,0,1"))
(rule "notLeft" (formula "1"))
(rule "all_unused" (formula "10") (term "1,0,1"))
(rule "concrete_and_3" (formula "10") (term "0,1"))
(rule "Class_invariant_axiom_for_NumericTextBox" (formula "6") (inst "x=x") (inst "x_0=x_0") (ifseqformula "3"))
(rule "inInt" (formula "6") (term "1,0,0,1"))
(rule "concrete_and_3" (formula "6") (term "0,0,1"))
(rule "inInt" (formula "6") (term "1,0,0,1,0"))
(rule "concrete_and_3" (formula "6") (term "0,0,1,0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "7"))
(rule "notLeft" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
(rule "times_zero_1" (formula "6") (term "0,0"))
(rule "add_zero_left" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "10") (term "0"))
(rule "nnf_imp2or" (formula "9") (term "0"))
(rule "nnf_notAnd" (formula "10") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
(rule "nnf_notAnd" (formula "9") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0"))
(rule "commute_or_2" (formula "9") (term "0"))
(rule "commute_or" (formula "10") (term "0,0"))
(rule "commute_or" (formula "9") (term "0,0"))
(rule "methodBodyExpand" (formula "12") (term "1") (newnames "heapBefore_isSingleDigit,savedHeapBefore_isSingleDigit"))
(rule "simplifyUpdate2" (formula "12") (term "1"))
(rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_enterCharacter,savedHeapBefore_enterCharacter"))
(rule "simplifyUpdate2" (formula "15") (term "1"))
(rule "returnUnfold" (formula "12") (term "1") (inst "#v0=x_2"))
(rule "variableDeclarationAssign" (formula "12") (term "1"))
(rule "variableDeclaration" (formula "12") (term "1") (newnames "x_2"))
(rule "compound_assignment_3_nonsimple" (formula "12") (term "1"))
(rule "ifUnfold" (formula "15") (term "1") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x"))
(rule "compound_assignment_2" (formula "15") (term "1") (inst "#v=x_1"))
(rule "variableDeclarationAssign" (formula "15") (term "1"))
(rule "variableDeclaration" (formula "15") (term "1") (newnames "x_1"))
(builtin "Use Operation Contract" (formula "15") (newnames "heapBefore_isSingleDigit_0,result,exc_0,heapAfter_isSingleDigit,anon_heap_isSingleDigit") (contract "NumericTextBox[NumericTextBox::isSingleDigit(int)].JML normal_behavior operation contract.0#NumericTextBox[NumericTextBox::isSingleDigit(int)].JML normal_behavior operation contract.1"))
(branch "Post (isSingleDigit)"
   (rule "ifthenelse_true" (formula "12") (term "1,0,0,1,0,1,1,1,1,1"))
   (rule "ifthenelse_false" (formula "12") (term "1,0,0,1,1,1,1,1,1,1"))
   (rule "false_to_not_true" (formula "12") (term "0,0,1,1,1,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "17"))
   (rule "simplifyUpdate3" (formula "17") (term "1,0"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "andLeft" (formula "12"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "andLeft" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "applyOnRigidFormula" (formula "14"))
   (rule "simplifyUpdate2" (formula "14") (term "0"))
   (rule "simplifyUpdate2" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0"))
   (rule "simplifyUpdate2" (formula "14") (term "1,0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1"))
   (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "13"))
   (rule "concrete_and_3" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "1,1"))
   (rule "replace_known_left" (formula "15") (term "1,1") (ifseqformula "13"))
   (rule "concrete_and_3" (formula "15") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0"))
   (rule "simplifyUpdate2" (formula "15") (term "0,0"))
   (rule "simplifyUpdate2" (formula "15") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1,0"))
   (rule "applyOnPV" (formula "15") (term "0,1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,1"))
   (rule "applyOnPV" (formula "14") (term "0,1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,1"))
   (rule "applyOnPV" (formula "15") (term "0,1,1"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,1,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1,0,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,0,0,0"))
   (rule "assignment" (formula "20") (term "1"))
   (rule "sequentialToParallel2" (formula "20"))
   (rule "simplifyUpdate3" (formula "20") (term "1,0"))
   (rule "Class_invariant_axiom_for_NumericTextBox" (formula "14") (term "1,0") (inst "x=x_72") (inst "x_0=x_0") (ifseqformula "3"))
   (rule "inInt" (formula "14") (term "1,0,0,1,1,0"))
   (rule "concrete_and_3" (formula "14") (term "0,0,1,1,0"))
   (rule "inInt" (formula "14") (term "1,0,0,1,0,1,0"))
   (rule "concrete_and_3" (formula "14") (term "0,0,1,0,1,0"))
   (rule "replace_known_right" (formula "14") (term "0,0,0,0,1,0") (ifseqformula "16"))
   (rule "concrete_not_2" (formula "14") (term "0,0,0,1,0"))
   (rule "concrete_and_1" (formula "14") (term "0,0,1,0"))
   (rule "replace_known_left" (formula "14") (term "1,0,0,1,0") (ifseqformula "8"))
   (rule "concrete_and_3" (formula "14") (term "0,0,1,0"))
   (rule "replace_known_left" (formula "14") (term "0,0,1,0") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "14") (term "0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,1,0"))
   (rule "nnf_imp2or" (formula "14") (term "0,1,1,0"))
   (rule "nnf_imp2or" (formula "14") (term "0,0,1,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,1,1,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,1,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,1,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,1,0"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,1,0"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,1,0"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,1,0"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,0"))
   (rule "Class_invariant_axiom_for_NumericTextBox" (formula "15") (term "1,0") (inst "x=x_72") (inst "x_0=x_0") (ifseqformula "3"))
   (rule "inInt" (formula "15") (term "1,0,0,1,1,0"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1,1,0"))
   (rule "inInt" (formula "15") (term "1,0,0,1,0,1,0"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1,0,1,0"))
   (rule "replace_known_right" (formula "15") (term "0,0,0,0,1,0") (ifseqformula "16"))
   (rule "concrete_not_2" (formula "15") (term "0,0,0,1,0"))
   (rule "concrete_and_1" (formula "15") (term "0,0,1,0"))
   (rule "replace_known_left" (formula "15") (term "1,0,0,1,0") (ifseqformula "8"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1,0"))
   (rule "replace_known_left" (formula "15") (term "0,0,1,0") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "15") (term "0,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,1,0"))
   (rule "nnf_imp2or" (formula "15") (term "0,1,1,0"))
   (rule "nnf_imp2or" (formula "15") (term "0,0,1,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,1,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,1,0"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,1,0"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,1,0"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,1,0"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,1,0"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1,0"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1,0"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,1,0"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,0"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,1,0"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,1,0"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,1,0"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,1,0"))
   (rule "Class_invariant_axiom_for_NumericTextBox" (formula "14") (term "1,1") (inst "x=x_72") (inst "x_0=x_0") (ifseqformula "3"))
   (rule "inInt" (formula "14") (term "1,0,0,1,1,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,1,1,1"))
   (rule "inInt" (formula "14") (term "1,0,0,1,0,1,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,1,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "1,1,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,1,1"))
   (rule "pullOutSelect" (formula "14") (term "1,0,1,0,1,1,1") (inst "selectSK=NumericTextBox_content_2"))
   (rule "applyEq" (formula "15") (term "0,0,1,1,0,0,1,1") (ifseqformula "14"))
   (rule "applyEq" (formula "15") (term "1,2,0,1,0,1,0,1,1") (ifseqformula "14"))
   (rule "applyEq" (formula "15") (term "0,0,0,0,0,1,1") (ifseqformula "14"))
   (rule "applyEq" (formula "15") (term "0,1,1,1,0,0,1,1,1") (ifseqformula "14"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "12"))
   (rule "elementOfFreshLocs" (formula "14") (term "1,0,0"))
   (rule "elementOfEmpty" (formula "14") (term "0,0,0,0"))
   (rule "concrete_and_2" (formula "14") (term "0,0,0"))
   (rule "concrete_or_2" (formula "14") (term "0,0"))
   (rule "replace_known_right" (formula "14") (term "0,0,0,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "14") (term "0,0,0"))
   (rule "concrete_and_1" (formula "14") (term "0,0"))
   (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "2"))
   (rule "concrete_not_1" (formula "14") (term "0,0"))
   (rule "ifthenelse_false" (formula "14") (term "0"))
   (rule "applyEqReverse" (formula "15") (term "0,0,1,1,0,0,1,1") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "15") (term "1,0,1,0,1,1,1") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "15") (term "0,1,1,1,0,0,1,1,1") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "15") (term "0,0,0,0,0,1,1") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "15") (term "1,2,0,1,0,1,0,1,1") (ifseqformula "14"))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "replace_known_right" (formula "14") (term "0,0,0,0,1,1") (ifseqformula "16"))
   (rule "concrete_not_2" (formula "14") (term "0,0,0,1,1"))
   (rule "concrete_and_1" (formula "14") (term "0,0,1,1"))
   (rule "inEqSimp_commuteGeq" (formula "14") (term "1,0,0,1,1"))
   (rule "pullOutSelect" (formula "14") (term "1,1,0,1,1,1") (inst "selectSK=NumericTextBox_EMPTY_2"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "12"))
   (rule "elementOfFreshLocs" (formula "14") (term "1,0,0"))
   (rule "elementOfEmpty" (formula "14") (term "0,0,0,0"))
   (rule "concrete_and_2" (formula "14") (term "0,0,0"))
   (rule "concrete_or_2" (formula "14") (term "0,0"))
   (rule "replace_known_right" (formula "14") (term "0,0,0,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "14") (term "0,0,0"))
   (rule "concrete_and_1" (formula "14") (term "0,0"))
   (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "2"))
   (rule "concrete_not_1" (formula "14") (term "0,0"))
   (rule "ifthenelse_false" (formula "14") (term "0"))
   (rule "applyEqReverse" (formula "15") (term "1,1,0,1,1,1") (ifseqformula "14"))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "pullOutSelect" (formula "14") (term "1,0,0,0,1,1,1") (inst "selectSK=NumericTextBox_cursorPosition_2"))
   (rule "applyEq" (formula "15") (term "0,0,0,0,1,1") (ifseqformula "14"))
   (rule "applyEq" (formula "15") (term "1,1,1,0,0,1,0,1,1") (ifseqformula "14"))
   (rule "applyEq" (formula "15") (term "0,1,0,0,1,1") (ifseqformula "14"))
   (rule "simplifySelectOfAnonEQ" (formula "14") (ifseqformula "12"))
   (rule "elementOfFreshLocs" (formula "14") (term "1,0,0"))
   (rule "elementOfEmpty" (formula "14") (term "0,0,0,0"))
   (rule "concrete_and_2" (formula "14") (term "0,0,0"))
   (rule "concrete_or_2" (formula "14") (term "0,0"))
   (rule "replace_known_right" (formula "14") (term "0,0,0,0") (ifseqformula "19"))
   (rule "concrete_not_2" (formula "14") (term "0,0,0"))
   (rule "concrete_and_1" (formula "14") (term "0,0"))
   (rule "replace_known_left" (formula "14") (term "0,0,0") (ifseqformula "2"))
   (rule "concrete_not_1" (formula "14") (term "0,0"))
   (rule "ifthenelse_false" (formula "14") (term "0"))
   (rule "applyEqReverse" (formula "15") (term "0,1,0,0,1,1") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "15") (term "1,0,0,0,1,1,1") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "15") (term "1,1,1,0,0,1,0,1,1") (ifseqformula "14"))
   (rule "applyEqReverse" (formula "15") (term "0,0,0,0,1,1") (ifseqformula "14"))
   (rule "hideAuxiliaryEq" (formula "14"))
   (rule "replace_known_left" (formula "14") (term "1,0,0,1,1") (ifseqformula "8"))
   (rule "concrete_and_3" (formula "14") (term "0,0,1,1"))
   (rule "replace_known_left" (formula "14") (term "0,0,1,1") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "14") (term "0,1,1"))
   (rule "nnf_imp2or" (formula "14") (term "0,1,1,1"))
   (rule "Class_invariant_axiom_for_NumericTextBox" (formula "15") (term "1,1") (inst "x=x_72") (inst "x_0=x_0") (ifseqformula "3"))
   (rule "inInt" (formula "15") (term "1,0,0,1,1,1"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1,1,1"))
   (rule "replaceKnownSelect_taclet0_2" (formula "15") (term "1,1,0,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "15") (term "1,1,0,1,1,1"))
   (rule "replaceKnownSelect_taclet0_4" (formula "15") (term "0,0,1,0,0,1,1"))
   (rule "inInt" (formula "15") (term "1,0,0,1,0,1,1"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "15") (term "0,0,0,0,0,1,1"))
   (rule "replaceKnownSelect_taclet0_4" (formula "15") (term "0,1,1,0,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "15") (term "1,0,1,0,1,1,1"))
   (rule "replaceKnownSelect_taclet0_4" (formula "15") (term "1,0,0,0,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "15") (term "0,0,1,0,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "15") (term "0,0,0,0,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "15") (term "0,1,1,0,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "15") (term "1,0,1,0,1,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "15") (term "0,1,1,1,0,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "15") (term "1,0,0,0,1,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "15") (term "0,1,1,0,0,1,1,1"))
   (rule "replaceKnownSelect_taclet0_4" (formula "15") (term "1,1,0,0,1,0,1,1"))
   (rule "replaceKnownSelect_taclet0_0" (formula "15") (term "1,2,0,1,0,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "15") (term "0,1,1,1,0,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "15") (term "0,1,1,0,0,1,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "15") (term "1,1,0,0,1,0,1,1"))
   (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "15") (term "1,2,0,1,0,1,0,1,1"))
   (rule "replace_known_left" (formula "15") (term "0,1,0,0,1,1") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "15") (term "1,0,0,1,1"))
   (rule "replace_known_right" (formula "15") (term "0,0,0,0,1,1") (ifseqformula "16"))
   (rule "concrete_not_2" (formula "15") (term "0,0,0,1,1"))
   (rule "concrete_and_1" (formula "15") (term "0,0,1,1"))
   (rule "replace_known_left" (formula "15") (term "0,0,1,1") (ifseqformula "8"))
   (rule "concrete_and_1" (formula "15") (term "0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,1,1"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,1,1"))
   (rule "nnf_imp2or" (formula "14") (term "0,0,1,1"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,1,1,1"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,1,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,1,1"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,1,1"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,1,1"))
   (rule "nnf_imp2or" (formula "15") (term "0,1,1,1"))
   (rule "nnf_imp2or" (formula "15") (term "0,0,1,1"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,1,1"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,1,1"))
   (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,1,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,1,1"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,1"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,1,1,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,1,1"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,1"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,1"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1,1"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,0,0,1,1"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,1,1"))
   (rule "commute_or_2" (formula "14") (term "0,0,1,0"))
   (rule "compound_assignment_1_new" (formula "20") (term "1"))
   (rule "sequentialToParallel2" (formula "20"))
   (rule "simplifyUpdate2" (formula "20"))
   (rule "simplifyUpdate3" (formula "20") (term "1,0"))
   (rule "applyOnElementary" (formula "20") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "20") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "20") (term "0,0,0,1,0"))
   (rule "commute_or" (formula "14") (term "0,0,1,1,0"))
   (rule "replace_known_left" (formula "14") (term "1,1,0") (ifseqformula "10"))
   (rule "concrete_and_3" (formula "14") (term "1,0"))
   (rule "ifElseUnfold" (formula "17") (term "1") (inst "#boolv=x_3"))
   (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_72"))
   (rule "commute_or_2" (formula "15") (term "0,0,1,0"))
   (rule "arrayLengthNotNegative" (formula "8") (term "1"))
   (rule "arrayLengthIsAShort" (formula "8") (term "1"))
   (rule "inShort" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "commute_or" (formula "15") (term "0,0,1,1,0"))
   (rule "replace_known_left" (formula "15") (term "1,1,0") (ifseqformula "10"))
   (rule "concrete_and_3" (formula "15") (term "1,0"))
   (rule "commute_or_2" (formula "14") (term "0,0,1,1"))
   (rule "commute_or" (formula "14") (term "0,0,1,1,1"))
   (rule "commute_or_2" (formula "15") (term "0,0,1,1"))
   (rule "commute_or" (formula "15") (term "0,0,1,1,1"))
   (rule "commute_or" (formula "14") (term "0,0,1,0"))
   (rule "replace_known_left" (formula "14") (term "1,0") (ifseqformula "9"))
   (rule "concrete_and_3" (formula "14") (term "0"))
   (rule "commute_or" (formula "15") (term "0,0,1,0"))
   (rule "replace_known_left" (formula "15") (term "1,0") (ifseqformula "9"))
   (rule "concrete_and_3" (formula "15") (term "0"))
   (rule "commute_or" (formula "14") (term "0,0,0,1,1"))
   (rule "commute_or" (formula "15") (term "0,0,0,1,1"))
   (rule "compound_assignment_2" (formula "17") (term "1") (inst "#v=x_73"))
   (rule "variableDeclarationAssign" (formula "17") (term "1"))
   (rule "variableDeclaration" (formula "17") (term "1") (newnames "x_73"))
   (rule "greater_equal_than_comparison_simple" (formula "17") (term "1"))
   (rule "sequentialToParallel2" (formula "17"))
   (rule "simplifyUpdate3" (formula "17") (term "1,0"))
   (rule "applyOnElementary" (formula "17") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
   (rule "compound_assignment_1_new" (formula "17") (term "1"))
   (rule "sequentialToParallel2" (formula "17"))
   (rule "simplifyUpdate2" (formula "17"))
   (rule "simplifyUpdate3" (formula "17") (term "1,0"))
   (rule "applyOnElementary" (formula "17") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
   (rule "ifthenelse_concrete3" (formula "17") (term "0,0,1,0"))
   (rule "boolean_not_equal_2" (formula "17") (term "1,0,0,1,0"))
   (rule "concrete_or_4" (formula "17") (term "0,0,1,0"))
   (rule "ifSplit" (formula "20"))
   (branch "if x true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "21"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "ifthenelse_concrete4" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "15") (term "0,0,1") (ifseqformula "16"))
      (rule "concrete_not_2" (formula "15") (term "0,1"))
      (rule "concrete_and_1" (formula "15") (term "1"))
      (rule "replace_known_right" (formula "14") (term "0,1") (ifseqformula "16"))
      (rule "concrete_and_2" (formula "14") (term "1"))
      (rule "concrete_impl_3" (formula "14"))
      (rule "notLeft" (formula "14"))
      (rule "replace_known_right" (formula "14") (term "0,0") (ifseqformula "15"))
      (rule "concrete_not_2" (formula "14") (term "0"))
      (rule "concrete_impl_1" (formula "14"))
      (rule "andLeft" (formula "14"))
      (rule "ifUnfold" (formula "22") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "x_77"))
      (rule "compound_inequality_comparison_1" (formula "22") (term "1") (inst "#v0=t"))
      (rule "variableDeclarationAssign" (formula "22") (term "1"))
      (rule "variableDeclaration" (formula "22") (term "1") (newnames "t"))
      (rule "assignment_read_attribute_this" (formula "22"))
      (rule "sequentialToParallel2" (formula "22"))
      (rule "simplifyUpdate3" (formula "22") (term "1,0"))
      (rule "applyOnElementary" (formula "22") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
      (rule "applyOnPV" (formula "22") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
      (rule "pullOutSelect" (formula "22") (term "0,1,0") (inst "selectSK=NumericTextBox_textBoxRenderer_0"))
      (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "13"))
      (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
      (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
      (rule "concrete_and_2" (formula "1") (term "0,0,0"))
      (rule "concrete_or_2" (formula "1") (term "0,0"))
      (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "3"))
      (rule "concrete_not_1" (formula "1") (term "1,0,0"))
      (rule "concrete_and_4" (formula "1") (term "0,0"))
      (rule "ifthenelse_false" (formula "1") (term "0"))
      (rule "applyEqReverse" (formula "23") (term "0,1,0") (ifseqformula "1"))
      (rule "hideAuxiliaryEq" (formula "1"))
      (rule "applyEq" (formula "22") (term "0,1,0") (ifseqformula "5"))
      (rule "inequality_comparison_simple" (formula "22") (term "1"))
      (rule "sequentialToParallel2" (formula "22"))
      (rule "simplifyUpdate2" (formula "22"))
      (rule "simplifyUpdate3" (formula "22") (term "1,0"))
      (rule "applyOnElementary" (formula "22") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "22") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "22") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "22") (term "2,0,1,0"))
      (rule "applyOnRigidFormula" (formula "22") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "22") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "22") (term "1,0,0,1,0"))
      (rule "eqClose" (formula "22") (term "0,0,1,0"))
      (rule "ifthenelse_true" (formula "22") (term "0,1,0"))
      (rule "ifElseSplit" (formula "19"))
      (branch "if x_72 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "ifthenelse_concrete4" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "16"))
         (rule "concrete_and_2" (formula "17"))
         (rule "false_right" (formula "17"))
         (rule "inEqSimp_geqRight" (formula "16"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "assignment" (formula "19") (term "1"))
         (rule "sequentialToParallel2" (formula "19"))
         (rule "simplifyUpdate3" (formula "19") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "methodCallReturn" (formula "19") (term "1"))
         (rule "assignment" (formula "19") (term "1"))
         (rule "sequentialToParallel2" (formula "19"))
         (rule "simplifyUpdate2" (formula "19"))
         (rule "simplifyUpdate3" (formula "19") (term "1,0"))
         (rule "applyOnElementary" (formula "19") (term "1,0"))
         (rule "applyOnPV" (formula "19") (term "0,1,0"))
         (rule "methodCallEmpty" (formula "19") (term "1"))
         (rule "simplifyUpdate2" (formula "19"))
         (rule "emptyModality" (formula "19") (term "1"))
         (rule "applyOnRigidFormula" (formula "19"))
         (rule "applyOnPV" (formula "19") (term "0"))
         (rule "simplifyUpdate1" (formula "19") (term "1"))
         (rule "boolean_not_equal_2" (formula "19"))
         (rule "false_right" (formula "19"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "19"))
         (rule "concrete_or_2" (formula "9"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "7"))
         (rule "concrete_or_1" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "ifSplit" (formula "22"))
         (branch "if x_77 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "23"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_77 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "23"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "18"))
            (rule "applyOnPV" (formula "18") (term "0"))
            (rule "simplifyUpdate1" (formula "18") (term "1"))
            (rule "boolean_not_equal_2" (formula "18"))
            (rule "false_right" (formula "18"))
            (rule "blockThrow" (formula "22") (term "1"))
            (rule "throwUnfold" (formula "22") (term "1") (inst "#v0=i"))
            (rule "variableDeclarationAssign" (formula "22") (term "1"))
            (rule "variableDeclaration" (formula "22") (term "1") (newnames "i_4"))
            (rule "instanceCreationAssignmentUnfoldArguments" (formula "22") (term "1"))
            (rule "variableDeclarationAssign" (formula "22") (term "1"))
            (rule "variableDeclaration" (formula "22") (term "1") (newnames "var_2"))
            (rule "stringAssignment" (formula "22") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "notLeft" (formula "1"))
            (rule "sequentialToParallel2" (formula "24"))
            (rule "simplifyUpdate3" (formula "24") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnRigidTerm" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "2,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0"))
            (rule "applyOnPV" (formula "1") (term "0,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (ifseqformula "15"))
            (rule "instanceCreationAssignment" (formula "24") (term "1") (inst "#v0=i_5"))
            (rule "variableDeclarationAssign" (formula "24") (term "1"))
            (rule "variableDeclaration" (formula "24") (term "1") (newnames "i_5"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "24") (term "1") (inst "#v0=i_6"))
            (rule "variableDeclaration" (formula "24") (term "1") (newnames "i_6"))
            (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_<createObject>_0,savedHeapBefore_<createObject>_0"))
            (rule "simplifyUpdate2" (formula "24") (term "1"))
            (rule "variableDeclaration" (formula "24") (term "1") (newnames "__NEW___1"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "24") (term "1") (inst "#v0=i_7"))
            (rule "variableDeclaration" (formula "24") (term "1") (newnames "i_7"))
            (rule "allocateInstance" (formula "24"))
            (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "sequentialToParallel2" (formula "27"))
            (rule "simplifyUpdate2" (formula "27"))
            (rule "simplifyUpdate3" (formula "27") (term "1,0"))
            (rule "applyOnElementary" (formula "27") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "27") (term "0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "1") (term "0"))
            (rule "applyOnPV" (formula "1") (term "0,0"))
            (rule "wellFormedAnonEQ" (formula "1") (term "0") (ifseqformula "17"))
            (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "16"))
            (rule "concrete_and_3" (formula "1") (term "0"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
            (rule "concrete_impl_1" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "20"))
            (rule "simplifyUpdate1" (formula "20") (term "1"))
            (rule "applyOnRigidTerm" (formula "20") (term "0"))
            (rule "simplifyUpdate1" (formula "20") (term "1,0"))
            (rule "applyOnPV" (formula "20") (term "0,0"))
            (rule "simplifyUpdate1" (formula "20") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (ifseqformula "16"))
            (rule "orRight" (formula "20"))
            (rule "blockEmpty" (formula "28") (term "1"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<create>_0,savedHeapBefore_<create>_0"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "assignment_write_attribute_this" (formula "28"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
            (rule "methodCallWithinClass" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepareEnter>_0,savedHeapBefore_<prepareEnter>_0"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepare>_3,savedHeapBefore_<prepare>_3"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepare>_4,savedHeapBefore_<prepare>_4"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepare>_5,savedHeapBefore_<prepare>_5"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepare>_6,savedHeapBefore_<prepare>_6"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "blockEmpty" (formula "28") (term "1"))
            (rule "assignment_write_attribute_this" (formula "28"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
            (rule "assignment_write_attribute_this" (formula "28"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "blockEmpty" (formula "28") (term "1"))
            (rule "methodCallReturnIgnoreResult" (formula "28") (term "1"))
            (rule "methodCallReturn" (formula "28") (term "1"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "blockEmpty" (formula "28") (term "1"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "28") (term "1"))
            (rule "variableDeclaration" (formula "28") (term "1") (newnames "var_3"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_5,savedHeapBefore_<init>_5"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "variableDeclarationAssign" (formula "28") (term "1"))
            (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg0_4"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_6,savedHeapBefore_<init>_6"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "variableDeclarationAssign" (formula "28") (term "1"))
            (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg0_5"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_7,savedHeapBefore_<init>_7"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "variableDeclarationAssign" (formula "28") (term "1"))
            (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg0_6"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_8,savedHeapBefore_<init>_8"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCall" (formula "28") (newnames "target_0"))
            (branch "Normal Execution (this != null )"
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg0_7"))
               (rule "assignment" (formula "28") (term "1"))
               (rule "sequentialToParallel2" (formula "28"))
               (rule "simplifyUpdate2" (formula "28"))
               (rule "simplifyUpdate3" (formula "28") (term "1,0"))
               (rule "applyOnElementary" (formula "28") (term "1,0"))
               (rule "applyOnPV" (formula "28") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg1_1"))
               (rule "assignment" (formula "28") (term "1"))
               (rule "sequentialToParallel2" (formula "28"))
               (rule "simplifyUpdate3" (formula "28") (term "1,0"))
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "target_0"))
               (rule "delete_unnecessary_cast" (formula "28") (term "1"))
               (branch "Normal Execution (i_5 instanceof java.lang.Throwable)"
                  (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                  (rule "boolean_equal" (formula "1") (term "1,1"))
                  (rule "concrete_or_3" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,1,0"))
                  (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_9,savedHeapBefore_<init>_9"))
                  (rule "simplifyUpdate2" (formula "28") (term "1"))
                  (rule "methodCallSuper" (formula "28") (term "1"))
                  (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_10,savedHeapBefore_<init>_10"))
                  (rule "simplifyUpdate2" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "blockEmpty" (formula "28") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "28"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                  (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                  (rule "assignment_write_attribute_this" (formula "28"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                  (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                  (rule "assignment_write_attribute_this" (formula "28"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                  (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "3,0,1,0"))
                  (rule "emptyStatement" (formula "28") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "28"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                  (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "3,0,1,0"))
                  (rule "emptyStatement" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "blockEmpty" (formula "28") (term "1"))
                  (rule "assignment_write_attribute" (formula "28"))
                  (branch "Normal Execution (i_5 != null)"
                     (rule "sequentialToParallel2" (formula "28"))
                     (rule "simplifyUpdate2" (formula "28"))
                     (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                     (rule "applyOnElementary" (formula "28") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                     (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                     (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                     (rule "assignment" (formula "28") (term "1"))
                     (rule "sequentialToParallel2" (formula "28"))
                     (rule "simplifyUpdate2" (formula "28"))
                     (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                     (rule "applyOnElementary" (formula "28") (term "1,0"))
                     (rule "applyOnPV" (formula "28") (term "0,1,0"))
                     (rule "blockEmpty" (formula "28") (term "1"))
                     (rule "methodCallThrow" (formula "28") (term "1"))
                     (rule "simplifyUpdate2" (formula "28"))
                     (rule "tryCatchThrow" (formula "28") (term "1"))
                     (rule "ifElseUnfold" (formula "28") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_94"))
                     (rule "equality_comparison_simple" (formula "28") (term "1"))
                     (rule "sequentialToParallel2" (formula "28"))
                     (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                     (rule "applyOnElementary" (formula "28") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "28") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "28") (term "0,0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "1,0,0,1,0"))
                     (rule "replace_known_right" (formula "28") (term "0,0,1,0") (ifseqformula "22"))
                     (rule "ifthenelse_false" (formula "28") (term "0,1,0"))
                     (rule "ifElseSplit" (formula "28"))
                     (branch "if x_94 true"
                        (rule "simplifyUpdate2" (formula "29"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_94 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "29"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "20"))
                        (rule "applyOnPV" (formula "20") (term "0"))
                        (rule "simplifyUpdate1" (formula "20") (term "1"))
                        (rule "boolean_not_equal_2" (formula "20"))
                        (rule "false_right" (formula "20"))
                        (rule "ifElseSplit" (formula "28"))
                        (branch "if i_4 instanceof java.lang.Throwable true"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                           (rule "concrete_or_4" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "20"))
                           (rule "applyOnPV" (formula "20") (term "0"))
                           (rule "simplifyUpdate1" (formula "20") (term "1"))
                           (rule "variableDeclaration" (formula "28") (term "1") (newnames "e_3"))
                           (rule "delete_unnecessary_cast" (formula "28") (term "1"))
                           (branch "Normal Execution (i_4 instanceof java.lang.Throwable)"
                              (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                              (rule "boolean_equal" (formula "1") (term "1,1"))
                              (rule "concrete_or_3" (formula "1") (term "1"))
                              (rule "true_left" (formula "1"))
                              (rule "sequentialToParallel2" (formula "28"))
                              (rule "simplifyUpdate2" (formula "28"))
                              (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                              (rule "applyOnElementary" (formula "28") (term "1,0"))
                              (rule "applyOnPV" (formula "28") (term "0,1,0"))
                              (rule "assignment" (formula "28") (term "1"))
                              (rule "sequentialToParallel2" (formula "28"))
                              (rule "simplifyUpdate2" (formula "28"))
                              (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                              (rule "applyOnElementary" (formula "28") (term "1,0"))
                              (rule "applyOnPV" (formula "28") (term "0,1,0"))
                              (rule "emptyModality" (formula "28") (term "1"))
                              (rule "applyOnRigidFormula" (formula "28"))
                              (rule "simplifyUpdate2" (formula "28") (term "0"))
                              (rule "applyOnRigidFormula" (formula "28") (term "1"))
                              (rule "simplifyUpdate2" (formula "28") (term "0,1"))
                              (rule "simplifyUpdate2" (formula "28") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "28") (term "0"))
                              (rule "applyOnRigidFormula" (formula "28") (term "0,1"))
                              (rule "applyOnPV" (formula "28") (term "0,0,1"))
                              (rule "simplifyUpdate1" (formula "28") (term "1,0,1"))
                              (rule "applyOnRigidFormula" (formula "28") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "28") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "28") (term "1,0,0"))
                              (rule "applyOnPV" (formula "28") (term "0,0,0"))
                              (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "22"))
                              (rule "concrete_not_2" (formula "28") (term "0"))
                              (rule "concrete_and_1" (formula "28"))
                              (rule "applyOnRigidFormula" (formula "28") (term "1,1"))
                              (rule "simplifyUpdate1" (formula "28") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "28") (term "0,1"))
                              (rule "simplifyUpdate1" (formula "28") (term "1,0,1"))
                              (rule "applyOnRigidTerm" (formula "28") (term "0,1,1"))
                              (rule "applyOnPV" (formula "28") (term "0,0,1,1"))
                              (rule "instanceof_static_type" (formula "28") (term "0,1,1"))
                              (rule "boolean_equal" (formula "28") (term "1,1"))
                              (rule "concrete_or_3" (formula "28") (term "1"))
                              (rule "concrete_and_3" (formula "28"))
                              (rule "Class_invariant_axiom_for_NumericTextBox" (formula "28") (inst "x=x_95") (inst "x_0=x_0") (ifseqformula "6"))
                              (rule "inInt" (formula "28") (term "1,0,0,1"))
                              (rule "concrete_and_3" (formula "28") (term "0,0,1"))
                              (rule "inInt" (formula "28") (term "1,0,0,1,0"))
                              (rule "concrete_and_3" (formula "28") (term "0,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,2,0,1,0,1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
                              (rule "pullOutSelect" (formula "28") (term "0,0,1,0,0") (inst "selectSK=NumericTextBox_cursorPosition_5"))
                              (rule "applyEq" (formula "29") (term "1,0,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "replaceKnownSelect_taclet0_4" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "1") (term "2,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,0,0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,1,1,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_left" (formula "28") (term "0,1,0,0") (ifseqformula "10"))
                              (rule "concrete_and_1" (formula "28") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "28") (term "1,1,0,1") (inst "selectSK=NumericTextBox_EMPTY_5"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "2,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "29") (term "1,1,0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "28") (term "0,0,0,0,0") (inst "selectSK=NumericTextBox_content_5"))
                              (rule "applyEq" (formula "29") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "1,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "1,2,0,1,0,1,0") (ifseqformula "1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,2,0,1,0,1,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "28") (term "0,0,0,0") (ifseqformula "25"))
                              (rule "concrete_not_2" (formula "28") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "28") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "28") (term "0,0"))
                              (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "12"))
                              (rule "concrete_and_1" (formula "28") (term "0"))
                              (rule "nnf_imp2or" (formula "28") (term "0,1"))
                              (rule "nnf_imp2or" (formula "28") (term "0,0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,1"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,1"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0"))
                              (rule "times_zero_1" (formula "28") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0,0"))
                              (rule "andRight" (formula "28"))
                              (branch
                                 (rule "allRight" (formula "28") (inst "sk=x_0_9"))
                                 (rule "orRight" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "inEqSimp_leqRight" (formula "28"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "30") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_30") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
                                 (rule "eqSymm" (formula "1") (term "0,1"))
                                 (rule "pullOutSelect" (formula "1") (term "0,1,0") (inst "selectSK=arr_11"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                                 (rule "concrete_or_2" (formula "1") (term "0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "29"))
                                 (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "15"))
                                 (rule "concrete_not_1" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "2") (term "0,1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "31"))
                                 (rule "false_to_not_true" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
                                 (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "boxToDiamond" (formula "1") (term "1"))
                                 (rule "double_not" (formula "1") (term "0,0,1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_isSingleDigit_31,savedHeapBefore_isSingleDigit_29"))
                                 (rule "simplifyUpdate2" (formula "23") (term "1"))
                                 (rule "returnUnfold" (formula "23") (term "1") (inst "#v0=x_2"))
                                 (rule "variableDeclarationAssign" (formula "23") (term "1"))
                                 (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_95"))
                                 (rule "compound_assignment_3_nonsimple" (formula "23") (term "1"))
                                 (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_96"))
                                 (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_96"))
                                 (rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_97"))
                                 (rule "variableDeclarationAssign" (formula "23") (term "1"))
                                 (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_97"))
                                 (rule "greater_equal_than_comparison_simple" (formula "23") (term "1"))
                                 (rule "sequentialToParallel2" (formula "23"))
                                 (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                 (rule "applyOnElementary" (formula "23") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                                 (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                                 (rule "compound_assignment_1_new" (formula "23") (term "1"))
                                 (rule "sequentialToParallel2" (formula "23"))
                                 (rule "simplifyUpdate2" (formula "23"))
                                 (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                 (rule "applyOnElementary" (formula "23") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                                 (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                                 (rule "ifthenelse_concrete3" (formula "23") (term "0,0,1,0"))
                                 (rule "boolean_not_equal_2" (formula "23") (term "1,0,0,1,0"))
                                 (rule "concrete_or_4" (formula "23") (term "0,0,1,0"))
                                 (rule "ifElseSplit" (formula "23"))
                                 (branch "if x_96 true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "ifthenelse_concrete4" (formula "1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_geqRight" (formula "23"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "assignment" (formula "24") (term "1"))
                                    (rule "sequentialToParallel2" (formula "24"))
                                    (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "methodCallReturn" (formula "24") (term "1"))
                                    (rule "assignment" (formula "24") (term "1"))
                                    (rule "sequentialToParallel2" (formula "24"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                    (rule "applyOnElementary" (formula "24") (term "1,0"))
                                    (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                    (rule "methodCallEmpty" (formula "24") (term "1"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "emptyModality" (formula "24") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "24"))
                                    (rule "simplifyUpdate1" (formula "24") (term "1"))
                                    (rule "applyOnPV" (formula "24") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "24"))
                                    (rule "false_right" (formula "24"))
                                    (rule "allLeft" (formula "22") (inst "t=x_0_9"))
                                    (rule "replaceKnownSelect_taclet00010001000_15" (formula "22") (term "2,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet00010001000_16" (formula "22") (term "2,0,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                    (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "22") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_33") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "22") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "23") (term "0,1,0"))
                                    (rule "concrete_and_2" (formula "23") (term "1,0"))
                                    (rule "concrete_or_4" (formula "23") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                    (rule "leq_literals" (formula "23") (term "0,1"))
                                    (rule "concrete_and_2" (formula "23") (term "1"))
                                    (rule "concrete_or_4" (formula "23"))
                                    (rule "applyEqRigid" (formula "22") (term "1,0,1") (ifseqformula "23"))
                                    (rule "boxToDiamond" (formula "22") (term "1"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_isSingleDigit_34,savedHeapBefore_isSingleDigit_32"))
                                    (rule "simplifyUpdate2" (formula "25") (term "1"))
                                    (rule "returnUnfold" (formula "25") (term "1") (inst "#v0=x_2"))
                                    (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_104"))
                                    (rule "compound_assignment_3_nonsimple" (formula "25") (term "1"))
                                    (rule "ifElseUnfold" (formula "25") (term "1") (inst "#boolv=x_105"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_105"))
                                    (rule "compound_assignment_2" (formula "25") (term "1") (inst "#v=x_106"))
                                    (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_106"))
                                    (rule "greater_equal_than_comparison_simple" (formula "25") (term "1"))
                                    (rule "sequentialToParallel2" (formula "25"))
                                    (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                    (rule "applyOnElementary" (formula "25") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "25") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0"))
                                    (rule "applyOnPV" (formula "25") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_contradInEq0" (formula "25") (term "0,0,1,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "25") (term "0,0,0,1,0"))
                                    (rule "concrete_and_2" (formula "25") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "25") (term "0,1,0"))
                                    (rule "compound_assignment_1_new" (formula "25") (term "1"))
                                    (rule "sequentialToParallel2" (formula "25"))
                                    (rule "simplifyUpdate2" (formula "25"))
                                    (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                    (rule "applyOnElementary" (formula "25") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "25") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "25") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0"))
                                    (rule "boolean_not_equal_2" (formula "25") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "25") (term "0,1,0"))
                                    (rule "allLeft" (formula "17") (inst "t=x_0_9"))
                                    (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                    (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "17") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_34") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "17") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "18") (term "0,1,0"))
                                    (rule "concrete_and_2" (formula "18") (term "1,0"))
                                    (rule "concrete_or_4" (formula "18") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "18") (term "0,0,1"))
                                    (rule "leq_literals" (formula "18") (term "0,1"))
                                    (rule "concrete_and_2" (formula "18") (term "1"))
                                    (rule "concrete_or_4" (formula "18"))
                                    (rule "applyEqRigid" (formula "17") (term "1,0,1") (ifseqformula "18"))
                                    (rule "boxToDiamond" (formula "17") (term "1"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_isSingleDigit_35,savedHeapBefore_isSingleDigit_33"))
                                    (rule "simplifyUpdate2" (formula "26") (term "1"))
                                    (rule "returnUnfold" (formula "26") (term "1") (inst "#v0=x_2"))
                                    (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_107"))
                                    (rule "compound_assignment_3_nonsimple" (formula "26") (term "1"))
                                    (rule "ifElseUnfold" (formula "26") (term "1") (inst "#boolv=x_108"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_108"))
                                    (rule "compound_assignment_2" (formula "26") (term "1") (inst "#v=x_109"))
                                    (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_109"))
                                    (rule "greater_equal_than_comparison_simple" (formula "26") (term "1"))
                                    (rule "sequentialToParallel2" (formula "26"))
                                    (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                    (rule "applyOnElementary" (formula "26") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_contradInEq0" (formula "26") (term "0,0,1,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "26") (term "0,0,0,1,0"))
                                    (rule "concrete_and_2" (formula "26") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "26") (term "0,1,0"))
                                    (rule "compound_assignment_1_new" (formula "26") (term "1"))
                                    (rule "sequentialToParallel2" (formula "26"))
                                    (rule "simplifyUpdate2" (formula "26"))
                                    (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                    (rule "applyOnElementary" (formula "26") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                                    (rule "boolean_not_equal_2" (formula "26") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "26") (term "0,1,0"))
                                    (rule "ifElseSplit" (formula "27"))
                                    (branch "if x_105 true"
                                       (rule "simplifyUpdate2" (formula "28"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignment" (formula "27") (term "1"))
                                       (rule "sequentialToParallel2" (formula "27"))
                                       (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                       (rule "methodCallReturn" (formula "27") (term "1"))
                                       (rule "assignment" (formula "27") (term "1"))
                                       (rule "sequentialToParallel2" (formula "27"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                       (rule "applyOnElementary" (formula "27") (term "1,0"))
                                       (rule "applyOnPV" (formula "27") (term "0,1,0"))
                                       (rule "methodCallEmpty" (formula "27") (term "1"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "emptyModality" (formula "27") (term "1"))
                                       (rule "notRight" (formula "27"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_105 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "28"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "26"))
                                       (rule "applyOnPV" (formula "26") (term "0"))
                                       (rule "simplifyUpdate1" (formula "26") (term "1"))
                                       (rule "boolean_equal" (formula "26"))
                                       (rule "closeTrue" (formula "26"))
                                    )
                                 )
                                 (branch "if x_96 false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "23"))
                                    (rule "simplifyUpdate1" (formula "23") (term "1"))
                                    (rule "applyOnPV" (formula "23") (term "0"))
                                    (rule "ifthenelse_concrete4" (formula "23"))
                                    (rule "boolean_not_equal_2" (formula "23") (term "1"))
                                    (rule "concrete_or_4" (formula "23"))
                                    (rule "notRight" (formula "23"))
                                    (rule "less_equal_than_comparison_simple" (formula "24") (term "1"))
                                    (rule "sequentialToParallel2" (formula "24"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                    (rule "applyOnElementary" (formula "24") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                                    (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                                    (rule "blockEmpty" (formula "24") (term "1"))
                                    (rule "methodCallReturn" (formula "24") (term "1"))
                                    (rule "assignment" (formula "24") (term "1"))
                                    (rule "sequentialToParallel2" (formula "24"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                    (rule "applyOnElementary" (formula "24") (term "1,0"))
                                    (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                    (rule "methodCallEmpty" (formula "24") (term "1"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "emptyModality" (formula "24") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "24"))
                                    (rule "applyOnPV" (formula "24") (term "0"))
                                    (rule "simplifyUpdate1" (formula "24") (term "1"))
                                    (rule "ifthenelse_concrete3" (formula "24"))
                                    (rule "boolean_not_equal_2" (formula "24") (term "1"))
                                    (rule "concrete_or_4" (formula "24"))
                                    (rule "inEqSimp_leqRight" (formula "24"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "allLeft" (formula "17") (inst "t=x_0_9"))
                                    (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                    (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "17") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_31") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "17") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "1,0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "18") (term "0,1,0"))
                                    (rule "concrete_and_2" (formula "18") (term "1,0"))
                                    (rule "concrete_or_4" (formula "18") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                    (rule "leq_literals" (formula "18") (term "0,1"))
                                    (rule "concrete_and_2" (formula "18") (term "1"))
                                    (rule "concrete_or_4" (formula "18"))
                                    (rule "applyEqRigid" (formula "17") (term "1,0,1") (ifseqformula "18"))
                                    (rule "boxToDiamond" (formula "17") (term "1"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_isSingleDigit_32,savedHeapBefore_isSingleDigit_30"))
                                    (rule "simplifyUpdate2" (formula "25") (term "1"))
                                    (rule "returnUnfold" (formula "25") (term "1") (inst "#v0=x_2"))
                                    (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_98"))
                                    (rule "compound_assignment_3_nonsimple" (formula "25") (term "1"))
                                    (rule "allLeft" (formula "23") (inst "t=x_0_9"))
                                    (rule "replaceKnownSelect_taclet00010001000_15" (formula "23") (term "2,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet00010001000_16" (formula "23") (term "2,0,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "23") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_32") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "23") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                    (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "24") (term "0,0,1"))
                                    (rule "leq_literals" (formula "24") (term "0,1"))
                                    (rule "concrete_and_2" (formula "24") (term "1"))
                                    (rule "concrete_or_4" (formula "24"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "24") (term "0,1"))
                                    (rule "concrete_and_2" (formula "24") (term "1"))
                                    (rule "concrete_or_4" (formula "24"))
                                    (rule "applyEqRigid" (formula "23") (term "1,0,1") (ifseqformula "24"))
                                    (rule "boxToDiamond" (formula "23") (term "1"))
                                    (rule "notLeft" (formula "23"))
                                    (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_isSingleDigit_33,savedHeapBefore_isSingleDigit_31"))
                                    (rule "simplifyUpdate2" (formula "26") (term "1"))
                                    (rule "returnUnfold" (formula "26") (term "1") (inst "#v0=x_2"))
                                    (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_99"))
                                    (rule "compound_assignment_3_nonsimple" (formula "26") (term "1"))
                                    (rule "ifElseUnfold" (formula "27") (term "1") (inst "#boolv=x_99"))
                                    (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_100"))
                                    (rule "compound_assignment_2" (formula "27") (term "1") (inst "#v=x_101"))
                                    (rule "variableDeclarationAssign" (formula "27") (term "1"))
                                    (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_101"))
                                    (rule "greater_equal_than_comparison_simple" (formula "27") (term "1"))
                                    (rule "sequentialToParallel2" (formula "27"))
                                    (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                    (rule "applyOnElementary" (formula "27") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption1" (formula "27") (term "0,0,1,0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "27") (term "0,0,0,1,0"))
                                    (rule "concrete_or_1" (formula "27") (term "0,0,1,0"))
                                    (rule "ifthenelse_true" (formula "27") (term "0,1,0"))
                                    (rule "compound_assignment_1_new" (formula "27") (term "1"))
                                    (rule "sequentialToParallel2" (formula "27"))
                                    (rule "simplifyUpdate2" (formula "27"))
                                    (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                    (rule "applyOnElementary" (formula "27") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
                                    (rule "boolean_equal" (formula "27") (term "0,0,1,0"))
                                    (rule "ifthenelse_true" (formula "27") (term "0,1,0"))
                                    (rule "ifElseUnfold" (formula "26") (term "1") (inst "#boolv=x_100"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_102"))
                                    (rule "compound_assignment_2" (formula "26") (term "1") (inst "#v=x_103"))
                                    (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_103"))
                                    (rule "greater_equal_than_comparison_simple" (formula "26") (term "1"))
                                    (rule "sequentialToParallel2" (formula "26"))
                                    (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                    (rule "applyOnElementary" (formula "26") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption1" (formula "26") (term "0,0,1,0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "26") (term "0,0,0,1,0"))
                                    (rule "concrete_or_1" (formula "26") (term "0,0,1,0"))
                                    (rule "ifthenelse_true" (formula "26") (term "0,1,0"))
                                    (rule "compound_assignment_1_new" (formula "26") (term "1"))
                                    (rule "sequentialToParallel2" (formula "26"))
                                    (rule "simplifyUpdate2" (formula "26"))
                                    (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                    (rule "applyOnElementary" (formula "26") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                                    (rule "boolean_equal" (formula "26") (term "0,0,1,0"))
                                    (rule "ifthenelse_true" (formula "26") (term "0,1,0"))
                                    (rule "ifElseSplit" (formula "27"))
                                    (branch "if x_100 true"
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "simplifyUpdate2" (formula "28"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_100 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "28"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "26"))
                                       (rule "applyOnPV" (formula "26") (term "0"))
                                       (rule "simplifyUpdate1" (formula "26") (term "1"))
                                       (rule "boolean_not_equal_2" (formula "26"))
                                       (rule "false_right" (formula "26"))
                                       (rule "less_equal_than_comparison_simple" (formula "27") (term "1"))
                                       (rule "sequentialToParallel2" (formula "27"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                       (rule "applyOnElementary" (formula "27") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
                                       (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
                                       (rule "blockEmpty" (formula "27") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0,1,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "27") (term "0,0,0,1,0"))
                                       (rule "concrete_and_2" (formula "27") (term "0,0,1,0"))
                                       (rule "ifthenelse_false" (formula "27") (term "0,1,0"))
                                       (rule "methodCallReturn" (formula "27") (term "1"))
                                       (rule "assignment" (formula "27") (term "1"))
                                       (rule "sequentialToParallel2" (formula "27"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                       (rule "applyOnElementary" (formula "27") (term "1,0"))
                                       (rule "applyOnPV" (formula "27") (term "0,1,0"))
                                       (rule "methodCallEmpty" (formula "27") (term "1"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "emptyModality" (formula "27") (term "1"))
                                       (rule "notRight" (formula "27"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch
                                 (rule "allRight" (formula "28") (inst "sk=x_95_0"))
                                 (rule "orRight" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "inEqSimp_leqRight" (formula "28"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_10"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                                 (rule "concrete_or_2" (formula "1") (term "0,0"))
                                 (rule "eqSymm" (formula "31"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                 (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "14"))
                                 (rule "concrete_not_1" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "2"))
                                 (rule "mul_literals" (formula "12") (term "0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0"))
                                 (rule "allLeft" (formula "17") (inst "t=x_95_0"))
                                 (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "32"))
                                 (rule "concrete_or_4" (formula "17"))
                                 (rule "inEqSimp_commuteGeq" (formula "17") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "17") (term "1"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (term "0") (ifseqformula "1"))
                                 (rule "inEqSimp_homoInEq1" (formula "17") (term "0,0"))
                                 (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,0"))
                                 (rule "add_literals" (formula "17") (term "1,1,0,0,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,0,0"))
                                 (rule "add_zero_right" (formula "17") (term "0,0,0"))
                                 (rule "leq_literals" (formula "17") (term "0,0"))
                                 (rule "concrete_and_2" (formula "17") (term "0"))
                                 (rule "concrete_or_2" (formula "17"))
                                 (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "2"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "inEqSimp_homoInEq1" (formula "17"))
                                 (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                 (rule "add_literals" (formula "17") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0"))
                                 (rule "add_zero_right" (formula "17") (term "0"))
                                 (rule "leq_literals" (formula "17"))
                                 (rule "closeFalse" (formula "17"))
                              )
                           )
                           (branch "ClassCastException (!(i_4 instanceof java.lang.Throwable))"
                              (rule "instanceof_static_type" (formula "28") (term "0,1,1"))
                              (rule "boolean_equal" (formula "28") (term "1,1"))
                              (rule "concrete_or_3" (formula "28") (term "1"))
                              (rule "closeTrue" (formula "28"))
                           )
                        )
                        (branch "if i_4 instanceof java.lang.Throwable false"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                           (rule "concrete_or_4" (formula "1") (term "0,1"))
                           (rule "double_not" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "close" (formula "23") (ifseqformula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (i_5 = null)"
                     (rule "false_right" (formula "29"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "close" (formula "23") (ifseqformula "1"))
                  )
               )
               (branch "ClassCastException (!(i_5 instanceof java.lang.Throwable))"
                  (rule "instanceof_static_type" (formula "28") (term "0,1,1"))
                  (rule "boolean_equal" (formula "28") (term "1,1"))
                  (rule "concrete_or_3" (formula "28") (term "1"))
                  (rule "closeTrue" (formula "28"))
               )
            )
            (branch "Null Reference (this = null)"
               (rule "false_right" (formula "29"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "close" (formula "23") (ifseqformula "1"))
            )
         )
      )
      (branch "if x_72 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "16"))
         (rule "applyOnPV" (formula "16") (term "0"))
         (rule "simplifyUpdate1" (formula "16") (term "1"))
         (rule "ifthenelse_concrete4" (formula "16"))
         (rule "boolean_not_equal_2" (formula "16") (term "1"))
         (rule "concrete_or_4" (formula "16"))
         (rule "notRight" (formula "16"))
         (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
         (rule "concrete_and_1" (formula "17"))
         (rule "inEqSimp_leqRight" (formula "17"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
         (rule "leq_literals" (formula "2") (term "0"))
         (rule "concrete_or_1" (formula "2"))
         (rule "true_left" (formula "2"))
         (rule "less_equal_than_comparison_simple" (formula "19") (term "1"))
         (rule "sequentialToParallel2" (formula "19"))
         (rule "simplifyUpdate2" (formula "19"))
         (rule "simplifyUpdate3" (formula "19") (term "1,0"))
         (rule "applyOnElementary" (formula "19") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
         (rule "blockEmpty" (formula "19") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "19") (term "0,0,1,0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "19") (term "0,0,0,1,0"))
         (rule "concrete_and_2" (formula "19") (term "0,0,1,0"))
         (rule "ifthenelse_false" (formula "19") (term "0,1,0"))
         (rule "methodCallReturn" (formula "19") (term "1"))
         (rule "assignment" (formula "19") (term "1"))
         (rule "sequentialToParallel2" (formula "19"))
         (rule "simplifyUpdate2" (formula "19"))
         (rule "simplifyUpdate3" (formula "19") (term "1,0"))
         (rule "applyOnElementary" (formula "19") (term "1,0"))
         (rule "applyOnPV" (formula "19") (term "0,1,0"))
         (rule "methodCallEmpty" (formula "19") (term "1"))
         (rule "simplifyUpdate2" (formula "19"))
         (rule "emptyModality" (formula "19") (term "1"))
         (rule "applyOnRigidFormula" (formula "19"))
         (rule "applyOnPV" (formula "19") (term "0"))
         (rule "simplifyUpdate1" (formula "19") (term "1"))
         (rule "boolean_not_equal_2" (formula "19"))
         (rule "false_right" (formula "19"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "19"))
         (rule "concrete_or_2" (formula "9"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "7"))
         (rule "concrete_or_1" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "ifSplit" (formula "22"))
         (branch "if x_77 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "23"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_77 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "23"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "18"))
            (rule "applyOnPV" (formula "18") (term "0"))
            (rule "simplifyUpdate1" (formula "18") (term "1"))
            (rule "boolean_not_equal_2" (formula "18"))
            (rule "false_right" (formula "18"))
            (rule "blockThrow" (formula "22") (term "1"))
            (rule "throwUnfold" (formula "22") (term "1") (inst "#v0=i"))
            (rule "variableDeclarationAssign" (formula "22") (term "1"))
            (rule "variableDeclaration" (formula "22") (term "1") (newnames "i"))
            (rule "instanceCreationAssignmentUnfoldArguments" (formula "22") (term "1"))
            (rule "variableDeclarationAssign" (formula "22") (term "1"))
            (rule "variableDeclaration" (formula "22") (term "1") (newnames "var"))
            (rule "stringAssignment" (formula "22") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "notLeft" (formula "1"))
            (rule "sequentialToParallel2" (formula "24"))
            (rule "simplifyUpdate3" (formula "24") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnRigidTerm" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "2,0"))
            (rule "simplifyUpdate1" (formula "1") (term "1,0"))
            (rule "applyOnPV" (formula "1") (term "0,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (ifseqformula "15"))
            (rule "instanceCreationAssignment" (formula "24") (term "1") (inst "#v0=i_1"))
            (rule "variableDeclarationAssign" (formula "24") (term "1"))
            (rule "variableDeclaration" (formula "24") (term "1") (newnames "i_1"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "24") (term "1") (inst "#v0=i_2"))
            (rule "variableDeclaration" (formula "24") (term "1") (newnames "i_2"))
            (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_<createObject>,savedHeapBefore_<createObject>"))
            (rule "simplifyUpdate2" (formula "24") (term "1"))
            (rule "variableDeclaration" (formula "24") (term "1") (newnames "__NEW__"))
            (rule "staticMethodCallStaticWithAssignmentViaTypereference" (formula "24") (term "1") (inst "#v0=i_3"))
            (rule "variableDeclaration" (formula "24") (term "1") (newnames "i_3"))
            (rule "allocateInstance" (formula "24"))
            (rule "false_to_not_true" (formula "1") (term "1,1,0,1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "2"))
            (rule "andLeft" (formula "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "sequentialToParallel2" (formula "27"))
            (rule "simplifyUpdate2" (formula "27"))
            (rule "simplifyUpdate3" (formula "27") (term "1,0"))
            (rule "applyOnElementary" (formula "27") (term "1,0"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "27") (term "0,0,1,0"))
            (rule "applyOnRigidFormula" (formula "1") (term "0"))
            (rule "applyOnPV" (formula "1") (term "0,0"))
            (rule "wellFormedAnonEQ" (formula "1") (term "0") (ifseqformula "17"))
            (rule "replace_known_left" (formula "1") (term "1,0") (ifseqformula "16"))
            (rule "concrete_and_3" (formula "1") (term "0"))
            (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
            (rule "concrete_impl_1" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "20"))
            (rule "simplifyUpdate1" (formula "20") (term "1"))
            (rule "applyOnRigidTerm" (formula "20") (term "0"))
            (rule "simplifyUpdate1" (formula "20") (term "1,0"))
            (rule "applyOnPV" (formula "20") (term "0,0"))
            (rule "simplifyUpdate1" (formula "20") (term "2,0"))
            (rule "selectCreatedOfAnonAsFormulaEQ" (formula "20") (ifseqformula "16"))
            (rule "orRight" (formula "20"))
            (rule "blockEmpty" (formula "28") (term "1"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<create>,savedHeapBefore_<create>"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "assignment_write_attribute_this" (formula "28"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
            (rule "methodCallWithinClass" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepareEnter>,savedHeapBefore_<prepareEnter>"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepare>,savedHeapBefore_<prepare>"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepare>_0,savedHeapBefore_<prepare>_0"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepare>_1,savedHeapBefore_<prepare>_1"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<prepare>_2,savedHeapBefore_<prepare>_2"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "blockEmpty" (formula "28") (term "1"))
            (rule "assignment_write_attribute_this" (formula "28"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
            (rule "assignment_write_attribute_this" (formula "28"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
            (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "blockEmpty" (formula "28") (term "1"))
            (rule "methodCallReturnIgnoreResult" (formula "28") (term "1"))
            (rule "methodCallReturn" (formula "28") (term "1"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "28") (term "1"))
            (rule "blockEmpty" (formula "28") (term "1"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "variableDeclarationAssign" (formula "28") (term "1"))
            (rule "variableDeclaration" (formula "28") (term "1") (newnames "var_1"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>,savedHeapBefore_<init>"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "variableDeclarationAssign" (formula "28") (term "1"))
            (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg0"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_0,savedHeapBefore_<init>_0"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "variableDeclarationAssign" (formula "28") (term "1"))
            (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg0_1"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_1,savedHeapBefore_<init>_1"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCallSuper" (formula "28") (term "1"))
            (rule "variableDeclarationAssign" (formula "28") (term "1"))
            (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg0_2"))
            (rule "assignment" (formula "28") (term "1"))
            (rule "sequentialToParallel2" (formula "28"))
            (rule "simplifyUpdate2" (formula "28"))
            (rule "simplifyUpdate3" (formula "28") (term "1,0"))
            (rule "applyOnElementary" (formula "28") (term "1,0"))
            (rule "applyOnPV" (formula "28") (term "0,1,0"))
            (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_2,savedHeapBefore_<init>_2"))
            (rule "simplifyUpdate2" (formula "28") (term "1"))
            (rule "methodCall" (formula "28") (newnames "target"))
            (branch "Normal Execution (this != null )"
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg0_3"))
               (rule "assignment" (formula "28") (term "1"))
               (rule "sequentialToParallel2" (formula "28"))
               (rule "simplifyUpdate2" (formula "28"))
               (rule "simplifyUpdate3" (formula "28") (term "1,0"))
               (rule "applyOnElementary" (formula "28") (term "1,0"))
               (rule "applyOnPV" (formula "28") (term "0,1,0"))
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "arg1"))
               (rule "assignment" (formula "28") (term "1"))
               (rule "sequentialToParallel2" (formula "28"))
               (rule "simplifyUpdate3" (formula "28") (term "1,0"))
               (rule "variableDeclarationAssign" (formula "28") (term "1"))
               (rule "variableDeclaration" (formula "28") (term "1") (newnames "target"))
               (rule "delete_unnecessary_cast" (formula "28") (term "1"))
               (branch "Normal Execution (i_1 instanceof java.lang.Throwable)"
                  (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                  (rule "boolean_equal" (formula "1") (term "1,1"))
                  (rule "concrete_or_3" (formula "1") (term "1"))
                  (rule "true_left" (formula "1"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,1,0"))
                  (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_3,savedHeapBefore_<init>_3"))
                  (rule "simplifyUpdate2" (formula "28") (term "1"))
                  (rule "methodCallSuper" (formula "28") (term "1"))
                  (rule "methodBodyExpand" (formula "28") (term "1") (newnames "heapBefore_<init>_4,savedHeapBefore_<init>_4"))
                  (rule "simplifyUpdate2" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "blockEmpty" (formula "28") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "28"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                  (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                  (rule "assignment_write_attribute_this" (formula "28"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                  (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                  (rule "assignment_write_attribute_this" (formula "28"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                  (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "3,0,1,0"))
                  (rule "emptyStatement" (formula "28") (term "1"))
                  (rule "assignment_write_attribute_this" (formula "28"))
                  (rule "sequentialToParallel2" (formula "28"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                  (rule "applyOnElementary" (formula "28") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                  (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                  (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                  (rule "applyOnPV" (formula "28") (term "3,0,1,0"))
                  (rule "emptyStatement" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "simplifyUpdate2" (formula "28"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "methodCallEmpty" (formula "28") (term "1"))
                  (rule "blockEmpty" (formula "28") (term "1"))
                  (rule "assignment_write_attribute" (formula "28"))
                  (branch "Normal Execution (i_1 != null)"
                     (rule "sequentialToParallel2" (formula "28"))
                     (rule "simplifyUpdate2" (formula "28"))
                     (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                     (rule "applyOnElementary" (formula "28") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "3,0,1,0"))
                     (rule "applyOnPV" (formula "28") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "28") (term "1,0,1,0"))
                     (rule "dropEffectlessStores" (formula "28") (term "0,1,0"))
                     (rule "assignment" (formula "28") (term "1"))
                     (rule "sequentialToParallel2" (formula "28"))
                     (rule "simplifyUpdate2" (formula "28"))
                     (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                     (rule "applyOnElementary" (formula "28") (term "1,0"))
                     (rule "applyOnPV" (formula "28") (term "0,1,0"))
                     (rule "blockEmpty" (formula "28") (term "1"))
                     (rule "methodCallThrow" (formula "28") (term "1"))
                     (rule "simplifyUpdate2" (formula "28"))
                     (rule "tryCatchThrow" (formula "28") (term "1"))
                     (rule "ifElseUnfold" (formula "28") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "28") (term "1") (newnames "x_78"))
                     (rule "equality_comparison_simple" (formula "28") (term "1"))
                     (rule "sequentialToParallel2" (formula "28"))
                     (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                     (rule "applyOnElementary" (formula "28") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "28") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "1,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "2,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "28") (term "0,0,1,0"))
                     (rule "applyOnPV" (formula "28") (term "0,0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "28") (term "1,0,0,1,0"))
                     (rule "replace_known_right" (formula "28") (term "0,0,1,0") (ifseqformula "22"))
                     (rule "ifthenelse_false" (formula "28") (term "0,1,0"))
                     (rule "ifElseSplit" (formula "28"))
                     (branch "if x_78 true"
                        (rule "simplifyUpdate2" (formula "29"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "1"))
                        (rule "applyOnPV" (formula "1") (term "0"))
                        (rule "simplifyUpdate1" (formula "1") (term "1"))
                        (rule "boolean_not_equal_2" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x_78 false"
                        (rule "false_to_not_true" (formula "1") (term "1"))
                        (rule "simplifyUpdate2" (formula "29"))
                        (rule "simplifyUpdate2" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "applyOnRigidFormula" (formula "20"))
                        (rule "applyOnPV" (formula "20") (term "0"))
                        (rule "simplifyUpdate1" (formula "20") (term "1"))
                        (rule "boolean_not_equal_2" (formula "20"))
                        (rule "false_right" (formula "20"))
                        (rule "ifElseSplit" (formula "28"))
                        (branch "if i instanceof java.lang.Throwable true"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
                           (rule "concrete_or_4" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "20"))
                           (rule "applyOnPV" (formula "20") (term "0"))
                           (rule "simplifyUpdate1" (formula "20") (term "1"))
                           (rule "variableDeclaration" (formula "28") (term "1") (newnames "e_2"))
                           (rule "delete_unnecessary_cast" (formula "28") (term "1"))
                           (branch "Normal Execution (i instanceof java.lang.Throwable)"
                              (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
                              (rule "boolean_equal" (formula "1") (term "1,1"))
                              (rule "concrete_or_3" (formula "1") (term "1"))
                              (rule "true_left" (formula "1"))
                              (rule "sequentialToParallel2" (formula "28"))
                              (rule "simplifyUpdate2" (formula "28"))
                              (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                              (rule "applyOnElementary" (formula "28") (term "1,0"))
                              (rule "applyOnPV" (formula "28") (term "0,1,0"))
                              (rule "assignment" (formula "28") (term "1"))
                              (rule "sequentialToParallel2" (formula "28"))
                              (rule "simplifyUpdate2" (formula "28"))
                              (rule "simplifyUpdate3" (formula "28") (term "1,0"))
                              (rule "applyOnElementary" (formula "28") (term "1,0"))
                              (rule "applyOnPV" (formula "28") (term "0,1,0"))
                              (rule "emptyModality" (formula "28") (term "1"))
                              (rule "applyOnRigidFormula" (formula "28"))
                              (rule "simplifyUpdate2" (formula "28") (term "0"))
                              (rule "applyOnRigidFormula" (formula "28") (term "1"))
                              (rule "simplifyUpdate2" (formula "28") (term "0,1"))
                              (rule "simplifyUpdate2" (formula "28") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "28") (term "0"))
                              (rule "applyOnRigidFormula" (formula "28") (term "0,1"))
                              (rule "applyOnPV" (formula "28") (term "0,0,1"))
                              (rule "simplifyUpdate1" (formula "28") (term "1,0,1"))
                              (rule "applyOnRigidFormula" (formula "28") (term "1,1"))
                              (rule "applyOnRigidFormula" (formula "28") (term "0,0"))
                              (rule "simplifyUpdate1" (formula "28") (term "1,0,0"))
                              (rule "applyOnPV" (formula "28") (term "0,0,0"))
                              (rule "replace_known_right" (formula "28") (term "0,0") (ifseqformula "22"))
                              (rule "concrete_not_2" (formula "28") (term "0"))
                              (rule "concrete_and_1" (formula "28"))
                              (rule "applyOnRigidFormula" (formula "28") (term "1,1"))
                              (rule "simplifyUpdate1" (formula "28") (term "1,1,1"))
                              (rule "applyOnRigidFormula" (formula "28") (term "0,1"))
                              (rule "simplifyUpdate1" (formula "28") (term "1,0,1"))
                              (rule "applyOnRigidTerm" (formula "28") (term "0,1,1"))
                              (rule "applyOnPV" (formula "28") (term "0,0,1,1"))
                              (rule "instanceof_static_type" (formula "28") (term "0,1,1"))
                              (rule "boolean_equal" (formula "28") (term "1,1"))
                              (rule "concrete_or_3" (formula "28") (term "1"))
                              (rule "concrete_and_3" (formula "28"))
                              (rule "Class_invariant_axiom_for_NumericTextBox" (formula "28") (inst "x=x_79") (inst "x_0=x_0") (ifseqformula "6"))
                              (rule "inInt" (formula "28") (term "1,0,0,1"))
                              (rule "concrete_and_3" (formula "28") (term "0,0,1"))
                              (rule "inInt" (formula "28") (term "1,0,0,1,0"))
                              (rule "concrete_and_3" (formula "28") (term "0,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,0,0,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,1,0,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "0,1,0,1"))
                              (rule "dismissNonSelectedField" (formula "28") (term "2,0,1,0,1,0"))
                              (rule "dismissNonSelectedField" (formula "28") (term "1,0,1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "28") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,1,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "0,0,0,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "28") (term "1,1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "1,0,0,1,0"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,1,0,0,1,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,1,0,0,1,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,1,0,0,1,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,1,0,0,1,0"))
                              (rule "pullOutSelect" (formula "28") (term "1,1,0,1") (inst "selectSK=NumericTextBox_EMPTY_4"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "replaceKnownSelect_taclet0_2" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "1") (term "2,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "29") (term "1,1,0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "pullOutSelect" (formula "28") (term "0,0,1,0,0") (inst "selectSK=NumericTextBox_cursorPosition_4"))
                              (rule "applyEq" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "1,0,0,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "1,1,1,0,0") (ifseqformula "1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "replaceKnownSelect_taclet0_4" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "1") (term "2,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,1,1,0,0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,0,0,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,1,1,0,0") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_left" (formula "28") (term "0,1,0,0") (ifseqformula "10"))
                              (rule "concrete_and_1" (formula "28") (term "1,0,0"))
                              (rule "pullOutSelect" (formula "28") (term "0,0,0,0,0") (inst "selectSK=NumericTextBox_content_4"))
                              (rule "applyEq" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "1,2,0,1,0,1,0") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "1,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEq" (formula "29") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "simplifySelectOfCreate" (formula "1"))
                              (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
                              (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
                              (rule "equalUnique" (formula "1") (term "1,0,0"))
                              (rule "concrete_and_4" (formula "1") (term "0,0"))
                              (rule "ifthenelse_false" (formula "1") (term "0"))
                              (rule "applyEqReverse" (formula "29") (term "0,0,0,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "0,0,1,0,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,2,0,1,0,1,0") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "1,0,1,0,1") (ifseqformula "1"))
                              (rule "applyEqReverse" (formula "29") (term "0,1,1,1,0,0,1") (ifseqformula "1"))
                              (rule "hideAuxiliaryEq" (formula "1"))
                              (rule "replace_known_right" (formula "28") (term "0,0,0,0") (ifseqformula "25"))
                              (rule "concrete_not_2" (formula "28") (term "0,0,0"))
                              (rule "concrete_and_1" (formula "28") (term "0,0"))
                              (rule "inEqSimp_commuteGeq" (formula "28") (term "0,0"))
                              (rule "replace_known_left" (formula "28") (term "0,0") (ifseqformula "12"))
                              (rule "concrete_and_1" (formula "28") (term "0"))
                              (rule "nnf_imp2or" (formula "28") (term "0,1"))
                              (rule "nnf_imp2or" (formula "28") (term "0,0"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0,1"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,1"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,1"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,1"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,1"))
                              (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,1"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,1"))
                              (rule "polySimp_mulComm0" (formula "28") (term "1,0,0,0,1"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0,1"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,0,1"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0,1"))
                              (rule "nnf_notAnd" (formula "28") (term "0,0,0"))
                              (rule "inEqSimp_notLeq" (formula "28") (term "1,0,0,0"))
                              (rule "polySimp_rightDist" (formula "28") (term "1,0,0,1,0,0,0"))
                              (rule "mul_literals" (formula "28") (term "0,1,0,0,1,0,0,0"))
                              (rule "polySimp_addAssoc" (formula "28") (term "0,0,1,0,0,0"))
                              (rule "add_literals" (formula "28") (term "0,0,0,1,0,0,0"))
                              (rule "add_zero_left" (formula "28") (term "0,0,1,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "28") (term "1,0,0,0"))
                              (rule "polySimp_mulLiterals" (formula "28") (term "1,1,0,0,0"))
                              (rule "polySimp_elimOne" (formula "28") (term "1,1,0,0,0"))
                              (rule "inEqSimp_notGeq" (formula "28") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0,0,0,0"))
                              (rule "add_zero_right" (formula "28") (term "0,0,0,0,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "28") (term "0,0,0,0"))
                              (rule "mul_literals" (formula "28") (term "1,0,0,0,0"))
                              (rule "andRight" (formula "28"))
                              (branch
                                 (rule "allRight" (formula "28") (inst "sk=x_0_8"))
                                 (rule "orRight" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "inEqSimp_leqRight" (formula "28"))
                                 (rule "mul_literals" (formula "1") (term "1,0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "30") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_25") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
                                 (rule "eqSymm" (formula "1") (term "0,1"))
                                 (rule "pullOutSelect" (formula "1") (term "0,1,0") (inst "selectSK=arr_9"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "20"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                                 (rule "concrete_or_2" (formula "1") (term "0,0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "29"))
                                 (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "15"))
                                 (rule "concrete_not_1" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "2") (term "0,1,0") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "31"))
                                 (rule "false_to_not_true" (formula "1") (term "0,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "15"))
                                 (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                                 (rule "mul_literals" (formula "2") (term "0,0,0"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                                 (rule "polySimp_mulComm0" (formula "2") (term "1"))
                                 (rule "polySimp_rightDist" (formula "2") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                                 (rule "mul_literals" (formula "2") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                                 (rule "boxToDiamond" (formula "1") (term "1"))
                                 (rule "double_not" (formula "1") (term "0,0,1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_isSingleDigit_26,savedHeapBefore_isSingleDigit_24"))
                                 (rule "simplifyUpdate2" (formula "23") (term "1"))
                                 (rule "returnUnfold" (formula "23") (term "1") (inst "#v0=x_2"))
                                 (rule "variableDeclarationAssign" (formula "23") (term "1"))
                                 (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_79"))
                                 (rule "compound_assignment_3_nonsimple" (formula "23") (term "1"))
                                 (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_80"))
                                 (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_80"))
                                 (rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_81"))
                                 (rule "variableDeclarationAssign" (formula "23") (term "1"))
                                 (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_81"))
                                 (rule "greater_equal_than_comparison_simple" (formula "23") (term "1"))
                                 (rule "sequentialToParallel2" (formula "23"))
                                 (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                 (rule "applyOnElementary" (formula "23") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                                 (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                                 (rule "compound_assignment_1_new" (formula "23") (term "1"))
                                 (rule "sequentialToParallel2" (formula "23"))
                                 (rule "simplifyUpdate2" (formula "23"))
                                 (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                                 (rule "applyOnElementary" (formula "23") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                                 (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                                 (rule "ifthenelse_concrete3" (formula "23") (term "0,0,1,0"))
                                 (rule "boolean_not_equal_2" (formula "23") (term "1,0,0,1,0"))
                                 (rule "concrete_or_4" (formula "23") (term "0,0,1,0"))
                                 (rule "ifElseSplit" (formula "23"))
                                 (branch "if x_80 true"
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "applyOnRigidFormula" (formula "1"))
                                    (rule "applyOnPV" (formula "1") (term "0"))
                                    (rule "simplifyUpdate1" (formula "1") (term "1"))
                                    (rule "ifthenelse_concrete4" (formula "1"))
                                    (rule "boolean_not_equal_2" (formula "1") (term "1"))
                                    (rule "concrete_or_4" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "inEqSimp_geqRight" (formula "23"))
                                    (rule "times_zero_1" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "assignment" (formula "24") (term "1"))
                                    (rule "sequentialToParallel2" (formula "24"))
                                    (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "methodCallReturn" (formula "24") (term "1"))
                                    (rule "assignment" (formula "24") (term "1"))
                                    (rule "sequentialToParallel2" (formula "24"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                    (rule "applyOnElementary" (formula "24") (term "1,0"))
                                    (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                    (rule "methodCallEmpty" (formula "24") (term "1"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "emptyModality" (formula "24") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "24"))
                                    (rule "simplifyUpdate1" (formula "24") (term "1"))
                                    (rule "applyOnPV" (formula "24") (term "0"))
                                    (rule "boolean_not_equal_2" (formula "24"))
                                    (rule "false_right" (formula "24"))
                                    (rule "allLeft" (formula "22") (inst "t=x_0_8"))
                                    (rule "replaceKnownSelect_taclet00010001100_15" (formula "22") (term "2,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet00010001100_16" (formula "22") (term "2,0,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "22") (term "1"))
                                    (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "22") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_28") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "22") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1,0") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "23") (term "0,1,0"))
                                    (rule "concrete_and_2" (formula "23") (term "1,0"))
                                    (rule "concrete_or_4" (formula "23") (term "0"))
                                    (rule "inEqSimp_contradInEq1" (formula "23") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "23") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "23") (term "0,0,1"))
                                    (rule "add_literals" (formula "23") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "23") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "23") (term "0,0,1"))
                                    (rule "leq_literals" (formula "23") (term "0,1"))
                                    (rule "concrete_and_2" (formula "23") (term "1"))
                                    (rule "concrete_or_4" (formula "23"))
                                    (rule "applyEqRigid" (formula "22") (term "1,0,1") (ifseqformula "23"))
                                    (rule "boxToDiamond" (formula "22") (term "1"))
                                    (rule "notLeft" (formula "22"))
                                    (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_isSingleDigit_29,savedHeapBefore_isSingleDigit_27"))
                                    (rule "simplifyUpdate2" (formula "25") (term "1"))
                                    (rule "returnUnfold" (formula "25") (term "1") (inst "#v0=x_2"))
                                    (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_88"))
                                    (rule "compound_assignment_3_nonsimple" (formula "25") (term "1"))
                                    (rule "ifElseUnfold" (formula "25") (term "1") (inst "#boolv=x_89"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_89"))
                                    (rule "compound_assignment_2" (formula "25") (term "1") (inst "#v=x_90"))
                                    (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_90"))
                                    (rule "greater_equal_than_comparison_simple" (formula "25") (term "1"))
                                    (rule "sequentialToParallel2" (formula "25"))
                                    (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                    (rule "applyOnElementary" (formula "25") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "25") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0"))
                                    (rule "applyOnPV" (formula "25") (term "0,0,0,1,0"))
                                    (rule "inEqSimp_contradInEq0" (formula "25") (term "0,0,1,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "25") (term "0,0,0,1,0"))
                                    (rule "concrete_and_2" (formula "25") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "25") (term "0,1,0"))
                                    (rule "compound_assignment_1_new" (formula "25") (term "1"))
                                    (rule "sequentialToParallel2" (formula "25"))
                                    (rule "simplifyUpdate2" (formula "25"))
                                    (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                    (rule "applyOnElementary" (formula "25") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "25") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "25") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0"))
                                    (rule "boolean_not_equal_2" (formula "25") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "25") (term "0,1,0"))
                                    (rule "allLeft" (formula "17") (inst "t=x_0_8"))
                                    (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                    (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "17") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_29") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "17") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "18") (term "0,0,1"))
                                    (rule "leq_literals" (formula "18") (term "0,1"))
                                    (rule "concrete_and_2" (formula "18") (term "1"))
                                    (rule "concrete_or_4" (formula "18"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "18") (term "0,1"))
                                    (rule "concrete_and_2" (formula "18") (term "1"))
                                    (rule "concrete_or_4" (formula "18"))
                                    (rule "applyEqRigid" (formula "17") (term "1,0,1") (ifseqformula "18"))
                                    (rule "boxToDiamond" (formula "17") (term "1"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_isSingleDigit_30,savedHeapBefore_isSingleDigit_28"))
                                    (rule "simplifyUpdate2" (formula "26") (term "1"))
                                    (rule "returnUnfold" (formula "26") (term "1") (inst "#v0=x_2"))
                                    (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_91"))
                                    (rule "compound_assignment_3_nonsimple" (formula "26") (term "1"))
                                    (rule "ifElseUnfold" (formula "26") (term "1") (inst "#boolv=x_92"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_92"))
                                    (rule "compound_assignment_2" (formula "26") (term "1") (inst "#v=x_93"))
                                    (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_93"))
                                    (rule "greater_equal_than_comparison_simple" (formula "26") (term "1"))
                                    (rule "sequentialToParallel2" (formula "26"))
                                    (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                    (rule "applyOnElementary" (formula "26") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_contradInEq0" (formula "26") (term "0,0,1,0") (ifseqformula "1"))
                                    (rule "qeq_literals" (formula "26") (term "0,0,0,1,0"))
                                    (rule "concrete_and_2" (formula "26") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "26") (term "0,1,0"))
                                    (rule "compound_assignment_1_new" (formula "26") (term "1"))
                                    (rule "sequentialToParallel2" (formula "26"))
                                    (rule "simplifyUpdate2" (formula "26"))
                                    (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                    (rule "applyOnElementary" (formula "26") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                                    (rule "boolean_not_equal_2" (formula "26") (term "0,0,1,0"))
                                    (rule "ifthenelse_false" (formula "26") (term "0,1,0"))
                                    (rule "ifElseSplit" (formula "27"))
                                    (branch "if x_89 true"
                                       (rule "simplifyUpdate2" (formula "28"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_equal" (formula "1"))
                                       (rule "true_left" (formula "1"))
                                       (rule "assignment" (formula "27") (term "1"))
                                       (rule "sequentialToParallel2" (formula "27"))
                                       (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                       (rule "methodCallReturn" (formula "27") (term "1"))
                                       (rule "assignment" (formula "27") (term "1"))
                                       (rule "sequentialToParallel2" (formula "27"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                       (rule "applyOnElementary" (formula "27") (term "1,0"))
                                       (rule "applyOnPV" (formula "27") (term "0,1,0"))
                                       (rule "methodCallEmpty" (formula "27") (term "1"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "emptyModality" (formula "27") (term "1"))
                                       (rule "notRight" (formula "27"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_89 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "28"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "26"))
                                       (rule "applyOnPV" (formula "26") (term "0"))
                                       (rule "simplifyUpdate1" (formula "26") (term "1"))
                                       (rule "boolean_equal" (formula "26"))
                                       (rule "closeTrue" (formula "26"))
                                    )
                                 )
                                 (branch "if x_80 false"
                                    (rule "false_to_not_true" (formula "1") (term "1"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "simplifyUpdate2" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "applyOnRigidFormula" (formula "23"))
                                    (rule "simplifyUpdate1" (formula "23") (term "1"))
                                    (rule "applyOnPV" (formula "23") (term "0"))
                                    (rule "ifthenelse_concrete4" (formula "23"))
                                    (rule "boolean_not_equal_2" (formula "23") (term "1"))
                                    (rule "concrete_or_4" (formula "23"))
                                    (rule "notRight" (formula "23"))
                                    (rule "less_equal_than_comparison_simple" (formula "24") (term "1"))
                                    (rule "sequentialToParallel2" (formula "24"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                    (rule "applyOnElementary" (formula "24") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                                    (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                                    (rule "blockEmpty" (formula "24") (term "1"))
                                    (rule "methodCallReturn" (formula "24") (term "1"))
                                    (rule "assignment" (formula "24") (term "1"))
                                    (rule "sequentialToParallel2" (formula "24"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                                    (rule "applyOnElementary" (formula "24") (term "1,0"))
                                    (rule "applyOnPV" (formula "24") (term "0,1,0"))
                                    (rule "methodCallEmpty" (formula "24") (term "1"))
                                    (rule "simplifyUpdate2" (formula "24"))
                                    (rule "emptyModality" (formula "24") (term "1"))
                                    (rule "applyOnRigidFormula" (formula "24"))
                                    (rule "applyOnPV" (formula "24") (term "0"))
                                    (rule "simplifyUpdate1" (formula "24") (term "1"))
                                    (rule "ifthenelse_concrete3" (formula "24"))
                                    (rule "boolean_not_equal_2" (formula "24") (term "1"))
                                    (rule "concrete_or_4" (formula "24"))
                                    (rule "inEqSimp_leqRight" (formula "24"))
                                    (rule "mul_literals" (formula "1") (term "1,0,0"))
                                    (rule "add_literals" (formula "1") (term "0,0"))
                                    (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                    (rule "mul_literals" (formula "1") (term "1"))
                                    (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "2") (term "0"))
                                    (rule "concrete_or_1" (formula "2"))
                                    (rule "true_left" (formula "2"))
                                    (rule "allLeft" (formula "17") (inst "t=x_0_8"))
                                    (rule "inEqSimp_commuteGeq" (formula "17") (term "1"))
                                    (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "17") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_26") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "17") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "18") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "18") (term "0,0,1"))
                                    (rule "add_literals" (formula "18") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "18") (term "1,0,0,1"))
                                    (rule "add_zero_right" (formula "18") (term "0,0,1"))
                                    (rule "leq_literals" (formula "18") (term "0,1"))
                                    (rule "concrete_and_2" (formula "18") (term "1"))
                                    (rule "concrete_or_4" (formula "18"))
                                    (rule "inEqSimp_contradInEq1" (formula "18") (term "1") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "18") (term "0,1"))
                                    (rule "concrete_and_2" (formula "18") (term "1"))
                                    (rule "concrete_or_4" (formula "18"))
                                    (rule "applyEqRigid" (formula "17") (term "1,0,1") (ifseqformula "18"))
                                    (rule "boxToDiamond" (formula "17") (term "1"))
                                    (rule "notLeft" (formula "17"))
                                    (rule "methodBodyExpand" (formula "25") (term "1") (newnames "heapBefore_isSingleDigit_27,savedHeapBefore_isSingleDigit_25"))
                                    (rule "simplifyUpdate2" (formula "25") (term "1"))
                                    (rule "returnUnfold" (formula "25") (term "1") (inst "#v0=x_2"))
                                    (rule "variableDeclarationAssign" (formula "25") (term "1"))
                                    (rule "variableDeclaration" (formula "25") (term "1") (newnames "x_82"))
                                    (rule "compound_assignment_3_nonsimple" (formula "25") (term "1"))
                                    (rule "allLeft" (formula "23") (inst "t=x_0_8"))
                                    (rule "replaceKnownSelect_taclet00010001100_15" (formula "23") (term "2,0,0,0"))
                                    (rule "replaceKnownAuxiliaryConstant_taclet00010001100_16" (formula "23") (term "2,0,0,0"))
                                    (rule "inEqSimp_commuteGeq" (formula "23") (term "1"))
                                    (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "23") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_27") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                                    (rule "eqSymm" (formula "23") (term "0,1"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "3"))
                                    (rule "inEqSimp_homoInEq1" (formula "24") (term "0,1"))
                                    (rule "polySimp_pullOutFactor1b" (formula "24") (term "0,0,1"))
                                    (rule "add_literals" (formula "24") (term "1,1,0,0,1"))
                                    (rule "times_zero_1" (formula "24") (term "1,0,0,1"))
                                    (rule "add_literals" (formula "24") (term "0,0,1"))
                                    (rule "leq_literals" (formula "24") (term "0,1"))
                                    (rule "concrete_and_2" (formula "24") (term "1"))
                                    (rule "concrete_or_4" (formula "24"))
                                    (rule "inEqSimp_contradInEq1" (formula "24") (term "1") (ifseqformula "4"))
                                    (rule "qeq_literals" (formula "24") (term "0,1"))
                                    (rule "concrete_and_2" (formula "24") (term "1"))
                                    (rule "concrete_or_4" (formula "24"))
                                    (rule "applyEqRigid" (formula "23") (term "1,0,1") (ifseqformula "24"))
                                    (rule "boxToDiamond" (formula "23") (term "1"))
                                    (rule "notLeft" (formula "23"))
                                    (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_isSingleDigit_28,savedHeapBefore_isSingleDigit_26"))
                                    (rule "simplifyUpdate2" (formula "26") (term "1"))
                                    (rule "returnUnfold" (formula "26") (term "1") (inst "#v0=x_2"))
                                    (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_83"))
                                    (rule "compound_assignment_3_nonsimple" (formula "26") (term "1"))
                                    (rule "ifElseUnfold" (formula "27") (term "1") (inst "#boolv=x_83"))
                                    (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_84"))
                                    (rule "compound_assignment_2" (formula "27") (term "1") (inst "#v=x_85"))
                                    (rule "variableDeclarationAssign" (formula "27") (term "1"))
                                    (rule "variableDeclaration" (formula "27") (term "1") (newnames "x_85"))
                                    (rule "greater_equal_than_comparison_simple" (formula "27") (term "1"))
                                    (rule "sequentialToParallel2" (formula "27"))
                                    (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                    (rule "applyOnElementary" (formula "27") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption1" (formula "27") (term "0,0,1,0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "27") (term "0,0,0,1,0"))
                                    (rule "concrete_or_1" (formula "27") (term "0,0,1,0"))
                                    (rule "ifthenelse_true" (formula "27") (term "0,1,0"))
                                    (rule "compound_assignment_1_new" (formula "27") (term "1"))
                                    (rule "sequentialToParallel2" (formula "27"))
                                    (rule "simplifyUpdate2" (formula "27"))
                                    (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                    (rule "applyOnElementary" (formula "27") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
                                    (rule "boolean_equal" (formula "27") (term "0,0,1,0"))
                                    (rule "ifthenelse_true" (formula "27") (term "0,1,0"))
                                    (rule "ifElseUnfold" (formula "26") (term "1") (inst "#boolv=x_84"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_86"))
                                    (rule "compound_assignment_2" (formula "26") (term "1") (inst "#v=x_87"))
                                    (rule "variableDeclarationAssign" (formula "26") (term "1"))
                                    (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_87"))
                                    (rule "greater_equal_than_comparison_simple" (formula "26") (term "1"))
                                    (rule "sequentialToParallel2" (formula "26"))
                                    (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                    (rule "applyOnElementary" (formula "26") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                                    (rule "inEqSimp_subsumption1" (formula "26") (term "0,0,1,0") (ifseqformula "1"))
                                    (rule "leq_literals" (formula "26") (term "0,0,0,1,0"))
                                    (rule "concrete_or_1" (formula "26") (term "0,0,1,0"))
                                    (rule "ifthenelse_true" (formula "26") (term "0,1,0"))
                                    (rule "compound_assignment_1_new" (formula "26") (term "1"))
                                    (rule "sequentialToParallel2" (formula "26"))
                                    (rule "simplifyUpdate2" (formula "26"))
                                    (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                                    (rule "applyOnElementary" (formula "26") (term "1,0"))
                                    (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                                    (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                                    (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                                    (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                                    (rule "boolean_equal" (formula "26") (term "0,0,1,0"))
                                    (rule "ifthenelse_true" (formula "26") (term "0,1,0"))
                                    (rule "ifElseSplit" (formula "27"))
                                    (branch "if x_84 true"
                                       (rule "simplifyUpdate2" (formula "28"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                    (branch "if x_84 false"
                                       (rule "false_to_not_true" (formula "1") (term "1"))
                                       (rule "simplifyUpdate2" (formula "28"))
                                       (rule "simplifyUpdate2" (formula "1"))
                                       (rule "notLeft" (formula "1"))
                                       (rule "applyOnRigidFormula" (formula "26"))
                                       (rule "applyOnPV" (formula "26") (term "0"))
                                       (rule "simplifyUpdate1" (formula "26") (term "1"))
                                       (rule "boolean_not_equal_2" (formula "26"))
                                       (rule "false_right" (formula "26"))
                                       (rule "less_equal_than_comparison_simple" (formula "27") (term "1"))
                                       (rule "sequentialToParallel2" (formula "27"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                       (rule "applyOnElementary" (formula "27") (term "1,0"))
                                       (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
                                       (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
                                       (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
                                       (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
                                       (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
                                       (rule "blockEmpty" (formula "27") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0,1,0") (ifseqformula "1"))
                                       (rule "qeq_literals" (formula "27") (term "0,0,0,1,0"))
                                       (rule "concrete_and_2" (formula "27") (term "0,0,1,0"))
                                       (rule "ifthenelse_false" (formula "27") (term "0,1,0"))
                                       (rule "methodCallReturn" (formula "27") (term "1"))
                                       (rule "assignment" (formula "27") (term "1"))
                                       (rule "sequentialToParallel2" (formula "27"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                       (rule "applyOnElementary" (formula "27") (term "1,0"))
                                       (rule "applyOnPV" (formula "27") (term "0,1,0"))
                                       (rule "methodCallEmpty" (formula "27") (term "1"))
                                       (rule "simplifyUpdate2" (formula "27"))
                                       (rule "emptyModality" (formula "27") (term "1"))
                                       (rule "notRight" (formula "27"))
                                       (rule "applyOnRigidFormula" (formula "1"))
                                       (rule "simplifyUpdate1" (formula "1") (term "1"))
                                       (rule "applyOnPV" (formula "1") (term "0"))
                                       (rule "boolean_not_equal_2" (formula "1"))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                              (branch
                                 (rule "allRight" (formula "28") (inst "sk=x_79_0"))
                                 (rule "orRight" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "inEqSimp_leqRight" (formula "28"))
                                 (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                                 (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                                 (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                                 (rule "add_literals" (formula "1") (term "0,0,0"))
                                 (rule "add_zero_left" (formula "1") (term "0,0"))
                                 (rule "polySimp_addComm0" (formula "1") (term "0"))
                                 (rule "inEqSimp_geqRight" (formula "29"))
                                 (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                 (rule "polySimp_addComm1" (formula "1") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                                 (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                                 (rule "polySimp_elimOne" (formula "2") (term "0"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                 (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                 (rule "polySimp_elimOne" (formula "1") (term "0"))
                                 (rule "pullOutSelect" (formula "30") (term "0") (inst "selectSK=arr_8"))
                                 (rule "simplifySelectOfCreate" (formula "1"))
                                 (rule "equalUnique" (formula "1") (term "1,0,0"))
                                 (rule "concrete_and_4" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "19"))
                                 (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                                 (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                                 (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                                 (rule "concrete_or_2" (formula "1") (term "0,0"))
                                 (rule "eqSymm" (formula "31"))
                                 (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "28"))
                                 (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                                 (rule "concrete_and_1" (formula "1") (term "0,0"))
                                 (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "14"))
                                 (rule "concrete_not_1" (formula "1") (term "0,0"))
                                 (rule "ifthenelse_false" (formula "1") (term "0"))
                                 (rule "applyEqReverse" (formula "31") (term "1") (ifseqformula "1"))
                                 (rule "hideAuxiliaryEq" (formula "1"))
                                 (rule "eqSymm" (formula "30"))
                                 (rule "inEqSimp_exactShadow3" (formula "12") (ifseqformula "2"))
                                 (rule "times_zero_1" (formula "12") (term "0,0"))
                                 (rule "add_zero_left" (formula "12") (term "0"))
                                 (rule "allLeft" (formula "17") (inst "t=x_79_0"))
                                 (rule "replace_known_right" (formula "17") (term "1") (ifseqformula "32"))
                                 (rule "concrete_or_4" (formula "17"))
                                 (rule "inEqSimp_commuteGeq" (formula "17") (term "0"))
                                 (rule "inEqSimp_homoInEq0" (formula "17") (term "1"))
                                 (rule "polySimp_addComm1" (formula "17") (term "0,1"))
                                 (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "1"))
                                 (rule "polySimp_mulComm0" (formula "17") (term "1,1"))
                                 (rule "polySimp_rightDist" (formula "17") (term "1,1"))
                                 (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1"))
                                 (rule "mul_literals" (formula "17") (term "0,1,1"))
                                 (rule "polySimp_elimOne" (formula "17") (term "1,1,1"))
                                 (rule "inEqSimp_contradInEq0" (formula "17") (term "1") (ifseqformula "2"))
                                 (rule "inEqSimp_homoInEq1" (formula "17") (term "0,1"))
                                 (rule "polySimp_pullOutFactor1b" (formula "17") (term "0,0,1"))
                                 (rule "add_literals" (formula "17") (term "1,1,0,0,1"))
                                 (rule "times_zero_1" (formula "17") (term "1,0,0,1"))
                                 (rule "add_zero_right" (formula "17") (term "0,0,1"))
                                 (rule "leq_literals" (formula "17") (term "0,1"))
                                 (rule "concrete_and_2" (formula "17") (term "1"))
                                 (rule "concrete_or_4" (formula "17"))
                                 (rule "inEqSimp_contradInEq1" (formula "17") (ifseqformula "1"))
                                 (rule "andLeft" (formula "17"))
                                 (rule "inEqSimp_homoInEq1" (formula "17"))
                                 (rule "polySimp_pullOutFactor1b" (formula "17") (term "0"))
                                 (rule "add_literals" (formula "17") (term "1,1,0"))
                                 (rule "times_zero_1" (formula "17") (term "1,0"))
                                 (rule "add_zero_right" (formula "17") (term "0"))
                                 (rule "leq_literals" (formula "17"))
                                 (rule "closeFalse" (formula "17"))
                              )
                           )
                           (branch "ClassCastException (!(i instanceof java.lang.Throwable))"
                              (rule "instanceof_static_type" (formula "28") (term "0,1,1"))
                              (rule "boolean_equal" (formula "28") (term "1,1"))
                              (rule "concrete_or_3" (formula "28") (term "1"))
                              (rule "closeTrue" (formula "28"))
                           )
                        )
                        (branch "if i instanceof java.lang.Throwable false"
                           (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
                           (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
                           (rule "concrete_or_4" (formula "1") (term "0,1"))
                           (rule "double_not" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "close" (formula "23") (ifseqformula "1"))
                        )
                     )
                  )
                  (branch "Null Reference (i_1 = null)"
                     (rule "false_right" (formula "29"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "close" (formula "23") (ifseqformula "1"))
                  )
               )
               (branch "ClassCastException (!(i_1 instanceof java.lang.Throwable))"
                  (rule "instanceof_static_type" (formula "28") (term "0,1,1"))
                  (rule "boolean_equal" (formula "28") (term "1,1"))
                  (rule "concrete_or_3" (formula "28") (term "1"))
                  (rule "closeTrue" (formula "28"))
               )
            )
            (branch "Null Reference (this = null)"
               (rule "false_right" (formula "29"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "close" (formula "23") (ifseqformula "1"))
            )
         )
      )
   )
   (branch "if x false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "21"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "16"))
      (rule "simplifyUpdate1" (formula "16") (term "1"))
      (rule "applyOnPV" (formula "16") (term "0"))
      (rule "ifthenelse_concrete4" (formula "16"))
      (rule "boolean_not_equal_2" (formula "16") (term "1"))
      (rule "concrete_or_4" (formula "16"))
      (rule "notRight" (formula "16"))
      (rule "replace_known_left" (formula "16") (term "0,0,1") (ifseqformula "1"))
      (rule "concrete_not_1" (formula "16") (term "0,1"))
      (rule "concrete_and_2" (formula "16") (term "1"))
      (rule "concrete_impl_3" (formula "16"))
      (rule "double_not" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "replace_known_left" (formula "19") (term "0,0,1,0") (ifseqformula "16"))
      (rule "ifthenelse_true" (formula "19") (term "0,1,0"))
      (rule "replace_known_left" (formula "15") (term "0,1") (ifseqformula "1"))
      (rule "concrete_and_1" (formula "15") (term "1"))
      (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "16"))
      (rule "concrete_and_1" (formula "15") (term "0"))
      (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "17"))
      (rule "concrete_impl_1" (formula "15"))
      (rule "andLeft" (formula "15"))
      (rule "ifUnfold" (formula "23") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_74"))
      (rule "compound_assignment_3_nonsimple" (formula "23") (term "1"))
      (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_75"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_75"))
      (rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_76"))
      (rule "variableDeclarationAssign" (formula "23") (term "1"))
      (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_76"))
      (builtin "Use Operation Contract" (formula "23") (newnames "heapBefore_isSingleDigit_25,result_0,exc_1,heapAfter_isSingleDigit_0,anon_heap_isSingleDigit_0") (contract "NumericTextBox[NumericTextBox::isSingleDigit(int)].JML normal_behavior operation contract.0#NumericTextBox[NumericTextBox::isSingleDigit(int)].JML normal_behavior operation contract.1"))
      (branch "Post (isSingleDigit)"
         (rule "ifthenelse_true" (formula "20") (term "1,0,0,1,0,1,1,1,1,1"))
         (rule "ifthenelse_false" (formula "20") (term "1,0,0,1,1,1,1,1,1,1"))
         (rule "false_to_not_true" (formula "20") (term "0,0,1,1,1,1,1,1,1"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "sequentialToParallel2" (formula "25"))
         (rule "simplifyUpdate2" (formula "25"))
         (rule "simplifyUpdate3" (formula "25") (term "1,0"))
         (rule "sequentialToParallel2" (formula "20"))
         (rule "simplifyUpdate3" (formula "20") (term "1,0"))
         (rule "andLeft" (formula "20"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "simplifyUpdate3" (formula "20") (term "1,0"))
         (rule "parallelWithSkip2" (formula "20") (term "0"))
         (rule "applyOnElementary" (formula "21") (term "1,0"))
         (rule "applyOnPV" (formula "21") (term "0,1,0"))
         (rule "sequentialToParallel2" (formula "21"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "simplifyUpdate3" (formula "21") (term "1,0"))
         (rule "andLeft" (formula "21"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "applyOnRigidFormula" (formula "20"))
         (rule "simplifyUpdate1" (formula "20") (term "1"))
         (rule "applyOnRigidFormula" (formula "23"))
         (rule "simplifyUpdate2" (formula "23") (term "1"))
         (rule "simplifyUpdate2" (formula "23") (term "0"))
         (rule "applyOnRigidFormula" (formula "22"))
         (rule "simplifyUpdate2" (formula "22") (term "0"))
         (rule "simplifyUpdate2" (formula "22") (term "1"))
         (rule "applyOnRigidTerm" (formula "20") (term "0"))
         (rule "applyOnPV" (formula "20") (term "0,0"))
         (rule "simplifyUpdate1" (formula "20") (term "2,0"))
         (rule "simplifyUpdate1" (formula "20") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1"))
         (rule "simplifyUpdate2" (formula "23") (term "1,1"))
         (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "21"))
         (rule "concrete_and_3" (formula "23") (term "1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0"))
         (rule "simplifyUpdate2" (formula "23") (term "0,0"))
         (rule "simplifyUpdate2" (formula "23") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0"))
         (rule "simplifyUpdate2" (formula "22") (term "1,0"))
         (rule "simplifyUpdate2" (formula "22") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "simplifyUpdate2" (formula "22") (term "1,1"))
         (rule "replace_known_left" (formula "22") (term "1,1") (ifseqformula "21"))
         (rule "concrete_and_3" (formula "22") (term "1"))
         (rule "applyOnRigidFormula" (formula "23") (term "1"))
         (rule "simplifyUpdate2" (formula "23") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "simplifyUpdate2" (formula "22") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,1"))
         (rule "applyOnPV" (formula "23") (term "0,1,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,0,0"))
         (rule "applyOnPV" (formula "22") (term "0,1,0,0"))
         (rule "replace_known_left" (formula "22") (term "1,0,0") (ifseqformula "18"))
         (rule "concrete_and_3" (formula "22") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1,1"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1,1"))
         (rule "applyOnPV" (formula "22") (term "0,1,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0,0,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,0,0,0"))
         (rule "replace_known_left" (formula "23") (term "1,0,0,0") (ifseqformula "18"))
         (rule "concrete_and_3" (formula "23") (term "0,0,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0"))
         (rule "applyOnPV" (formula "22") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "22") (term "1,0,0"))
         (rule "replace_known_left" (formula "22") (term "0,0") (ifseqformula "17"))
         (rule "concrete_and_1" (formula "22") (term "0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,0,0,0"))
         (rule "applyOnPV" (formula "23") (term "0,0,0,0"))
         (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "17"))
         (rule "concrete_not_1" (formula "23") (term "0,0"))
         (rule "concrete_and_2" (formula "23") (term "0"))
         (rule "concrete_impl_2" (formula "23"))
         (rule "true_left" (formula "23"))
         (rule "assignment" (formula "27") (term "1"))
         (rule "sequentialToParallel2" (formula "27"))
         (rule "simplifyUpdate3" (formula "27") (term "1,0"))
         (rule "Class_invariant_axiom_for_NumericTextBox" (formula "22") (term "0") (inst "x=x_77") (inst "x_0=x_0") (ifseqformula "4"))
         (rule "inInt" (formula "22") (term "1,0,0,1,0"))
         (rule "concrete_and_3" (formula "22") (term "0,0,1,0"))
         (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "1,1,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "22") (term "1,1,0,1,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "0,0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "0,0,1,0,0,0"))
         (rule "inInt" (formula "22") (term "1,0,0,1,0,0"))
         (rule "concrete_and_3" (formula "22") (term "0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "0,1,1,0,0,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "1,0,1,0,1,0"))
         (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "1,0,0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "0,0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "0,0,1,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "0,1,1,0,0,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "0,1,1,1,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "1,0,1,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "1,0,0,0,1,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "0,1,1,0,0,1,0"))
         (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "1,1,0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "1,2,0,1,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "0,1,1,1,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "0,1,1,0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "1,1,0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "1,2,0,1,0,1,0,0"))
         (rule "replace_known_left" (formula "22") (term "0,1,0,0,0") (ifseqformula "8"))
         (rule "concrete_and_1" (formula "22") (term "1,0,0,0"))
         (rule "replace_known_left" (formula "22") (term "1,0,0,0") (ifseqformula "9"))
         (rule "concrete_and_3" (formula "22") (term "0,0,0"))
         (rule "replace_known_right" (formula "22") (term "0,0,0,0") (ifseqformula "23"))
         (rule "concrete_not_2" (formula "22") (term "0,0,0"))
         (rule "concrete_and_1" (formula "22") (term "0,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0,0"))
         (rule "nnf_imp2or" (formula "22") (term "0,1,0"))
         (rule "nnf_imp2or" (formula "22") (term "0,0,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,0"))
         (rule "Class_invariant_axiom_for_NumericTextBox" (formula "22") (term "1,1") (inst "x=x_77") (inst "x_0=x_0") (ifseqformula "4"))
         (rule "inInt" (formula "22") (term "1,0,0,1,1,1"))
         (rule "concrete_and_3" (formula "22") (term "0,0,1,1,1"))
         (rule "inInt" (formula "22") (term "1,0,0,1,0,1,1"))
         (rule "concrete_and_3" (formula "22") (term "0,0,1,0,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,1,1"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1,0,1,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "1,1,0,0,1,1"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,1,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,1,1"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1,0,1,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1,0,1,1"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1,0,1,1"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1,0,1,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1,0,1,1"))
         (rule "pullOutSelect" (formula "22") (term "1,2,0,1,0,1,0,1,1") (inst "selectSK=NumericTextBox_content_3"))
         (rule "applyEq" (formula "23") (term "0,1,1,1,0,0,1,1,1") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "0,0,0,0,0,1,1") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "1,0,1,0,1,1,1") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "0,0,1,1,0,0,1,1") (ifseqformula "22"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "20"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "2,0"))
         (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
         (rule "elementOfEmpty" (formula "22") (term "0,0,0,0"))
         (rule "concrete_and_2" (formula "22") (term "0,0,0"))
         (rule "concrete_or_2" (formula "22") (term "0,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1,0,0") (ifseqformula "13"))
         (rule "replace_known_right" (formula "22") (term "0,0,0,0") (ifseqformula "26"))
         (rule "concrete_not_2" (formula "22") (term "0,0,0"))
         (rule "concrete_and_1" (formula "22") (term "0,0"))
         (rule "replace_known_left" (formula "22") (term "0,0,0,0") (ifseqformula "3"))
         (rule "concrete_or_1" (formula "22") (term "0,0,0"))
         (rule "concrete_not_1" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "1,2,0,1,0,1,0,1,1") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "1,0,1,0,1,1,1") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "0,0,1,1,0,0,1,1") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "0,1,1,1,0,0,1,1,1") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "0,0,0,0,0,1,1") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "replace_known_right" (formula "22") (term "0,0,0,0,1,1") (ifseqformula "23"))
         (rule "concrete_not_2" (formula "22") (term "0,0,0,1,1"))
         (rule "concrete_and_1" (formula "22") (term "0,0,1,1"))
         (rule "inEqSimp_commuteGeq" (formula "22") (term "1,0,0,1,1"))
         (rule "pullOutSelect" (formula "22") (term "1,1,0,1,1,1") (inst "selectSK=NumericTextBox_EMPTY_3"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "20"))
         (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "22") (term "2,0"))
         (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
         (rule "elementOfEmpty" (formula "22") (term "0,0,0,0"))
         (rule "concrete_and_2" (formula "22") (term "0,0,0"))
         (rule "concrete_or_2" (formula "22") (term "0,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1,0,0") (ifseqformula "13"))
         (rule "replace_known_left" (formula "22") (term "0,0,1,0,0") (ifseqformula "3"))
         (rule "concrete_or_1" (formula "22") (term "0,1,0,0"))
         (rule "concrete_not_1" (formula "22") (term "1,0,0"))
         (rule "concrete_and_4" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "1,1,0,1,1,1") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "pullOutSelect" (formula "22") (term "1,0,0,0,1,1,1") (inst "selectSK=NumericTextBox_cursorPosition_3"))
         (rule "applyEq" (formula "23") (term "0,1,0,0,1,1") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "1,1,1,0,0,1,0,1,1") (ifseqformula "22"))
         (rule "applyEq" (formula "23") (term "0,0,0,0,1,1") (ifseqformula "22"))
         (rule "simplifySelectOfAnonEQ" (formula "22") (ifseqformula "20"))
         (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "2,0"))
         (rule "elementOfFreshLocs" (formula "22") (term "1,0,0"))
         (rule "elementOfEmpty" (formula "22") (term "0,0,0,0"))
         (rule "concrete_and_2" (formula "22") (term "0,0,0"))
         (rule "concrete_or_2" (formula "22") (term "0,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1,0,0") (ifseqformula "13"))
         (rule "replace_known_left" (formula "22") (term "0,0,1,0,0") (ifseqformula "3"))
         (rule "concrete_or_1" (formula "22") (term "0,1,0,0"))
         (rule "concrete_not_1" (formula "22") (term "1,0,0"))
         (rule "concrete_and_4" (formula "22") (term "0,0"))
         (rule "ifthenelse_false" (formula "22") (term "0"))
         (rule "applyEqReverse" (formula "23") (term "0,1,0,0,1,1") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "1,0,0,0,1,1,1") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "0,0,0,0,1,1") (ifseqformula "22"))
         (rule "applyEqReverse" (formula "23") (term "1,1,1,0,0,1,0,1,1") (ifseqformula "22"))
         (rule "hideAuxiliaryEq" (formula "22"))
         (rule "replace_known_left" (formula "22") (term "1,0,0,1,1") (ifseqformula "9"))
         (rule "concrete_and_3" (formula "22") (term "0,0,1,1"))
         (rule "replace_known_left" (formula "22") (term "0,0,1,1") (ifseqformula "8"))
         (rule "concrete_and_1" (formula "22") (term "0,1,1"))
         (rule "nnf_imp2or" (formula "22") (term "0,1,1,1"))
         (rule "nnf_imp2or" (formula "22") (term "0,0,1,1"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,1,1,1"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1,1,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1,1,1"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1,1,1"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,1,1,1"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1,1,1"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1,1,1"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1,1,1"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1,1,1"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,1,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,1,1,1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1,1,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1,1,1"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,0,1,1"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0,1,1"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0,1,1"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0,1,1"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0,1,1"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0,1,1"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0,1,1"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0,1,1"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0,1,1"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0,1,1"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0,1,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0,1,1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1,1"))
         (rule "commute_or_2" (formula "22") (term "0,0,0"))
         (rule "compound_assignment_1_new" (formula "27") (term "1"))
         (rule "sequentialToParallel2" (formula "27"))
         (rule "simplifyUpdate2" (formula "27"))
         (rule "simplifyUpdate3" (formula "27") (term "1,0"))
         (rule "applyOnElementary" (formula "27") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
         (rule "commute_or" (formula "22") (term "0,0,1,0"))
         (rule "replace_known_left" (formula "22") (term "1,0") (ifseqformula "16"))
         (rule "concrete_and_3" (formula "22") (term "0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "24"))
         (rule "concrete_or_2" (formula "9"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "7"))
         (rule "concrete_or_1" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "ifElseSplit" (formula "25"))
         (branch "if x_72 true"
            (rule "simplifyUpdate2" (formula "26"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_72 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "26"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "24"))
            (rule "applyOnPV" (formula "24") (term "0"))
            (rule "simplifyUpdate1" (formula "24") (term "1"))
            (rule "boolean_not_equal_2" (formula "24"))
            (rule "false_right" (formula "24"))
            (rule "commute_or" (formula "23") (term "0,0,0"))
            (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "16"))
            (rule "concrete_impl_1" (formula "23"))
            (rule "andLeft" (formula "23"))
            (rule "andLeft" (formula "24"))
            (rule "replace_known_left" (formula "30") (term "0,0,1,0") (ifseqformula "23"))
            (rule "ifthenelse_true" (formula "30") (term "0,1,0"))
            (rule "commute_or_2" (formula "24") (term "0"))
            (rule "commute_or" (formula "25") (term "0,0"))
            (rule "commute_or" (formula "24") (term "0,0"))
            (rule "less_equal_than_comparison_simple" (formula "27") (term "1"))
            (rule "sequentialToParallel2" (formula "27"))
            (rule "simplifyUpdate2" (formula "27"))
            (rule "simplifyUpdate3" (formula "27") (term "1,0"))
            (rule "applyOnElementary" (formula "27") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
            (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
            (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
            (rule "replace_known_left" (formula "27") (term "0,0,1,0") (ifseqformula "19"))
            (rule "ifthenelse_true" (formula "27") (term "0,1,0"))
            (rule "blockEmpty" (formula "27") (term "1"))
            (rule "methodCallReturn" (formula "27") (term "1"))
            (rule "assignment" (formula "27") (term "1"))
            (rule "sequentialToParallel2" (formula "27"))
            (rule "simplifyUpdate2" (formula "27"))
            (rule "simplifyUpdate3" (formula "27") (term "1,0"))
            (rule "applyOnElementary" (formula "27") (term "1,0"))
            (rule "applyOnPV" (formula "27") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "27") (term "1"))
            (rule "simplifyUpdate2" (formula "27"))
            (rule "emptyModality" (formula "27") (term "1"))
            (rule "applyOnRigidFormula" (formula "27"))
            (rule "simplifyUpdate1" (formula "27") (term "1"))
            (rule "applyOnPV" (formula "27") (term "0"))
            (rule "boolean_equal" (formula "27"))
            (rule "closeTrue" (formula "27"))
         )
      )
      (branch "Exceptional Post (isSingleDigit)"
         (rule "ifthenelse_false" (formula "20") (term "1,0,0,1,1,1,1,1,1,1"))
         (rule "false_to_not_true" (formula "20") (term "0,0,1,1,1,1,1,1,1"))
         (rule "ifthenelse_true" (formula "20") (term "1,0,0,1,0,1,1,1,1,1"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "sequentialToParallel2" (formula "25"))
         (rule "simplifyUpdate2" (formula "25"))
         (rule "simplifyUpdate3" (formula "25") (term "1,0"))
         (rule "sequentialToParallel2" (formula "20"))
         (rule "simplifyUpdate3" (formula "20") (term "1,0"))
         (rule "andLeft" (formula "20"))
         (rule "simplifyUpdate2" (formula "20"))
         (rule "applyOnSkip" (formula "20") (term "1,0"))
         (rule "parallelWithSkip2" (formula "20") (term "0"))
         (rule "applyOnElementary" (formula "21") (term "1,0"))
         (rule "applyOnPV" (formula "21") (term "0,1,0"))
         (rule "sequentialToParallel2" (formula "21"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "simplifyUpdate3" (formula "21") (term "1,0"))
         (rule "andLeft" (formula "21"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "andLeft" (formula "22"))
         (rule "andLeft" (formula "21"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "notLeft" (formula "21"))
         (rule "applyOnRigidFormula" (formula "20"))
         (rule "simplifyUpdate1" (formula "20") (term "1"))
         (rule "applyOnRigidFormula" (formula "22"))
         (rule "simplifyUpdate2" (formula "22") (term "0"))
         (rule "simplifyUpdate2" (formula "22") (term "1"))
         (rule "applyOnRigidFormula" (formula "23"))
         (rule "simplifyUpdate2" (formula "23") (term "0"))
         (rule "simplifyUpdate2" (formula "23") (term "1"))
         (rule "applyOnRigidFormula" (formula "21"))
         (rule "simplifyUpdate1" (formula "21") (term "1"))
         (rule "applyOnRigidTerm" (formula "20") (term "0"))
         (rule "applyOnPV" (formula "20") (term "0,0"))
         (rule "simplifyUpdate1" (formula "20") (term "1,0"))
         (rule "simplifyUpdate1" (formula "20") (term "2,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0"))
         (rule "simplifyUpdate2" (formula "22") (term "0,0"))
         (rule "simplifyUpdate2" (formula "22") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "simplifyUpdate2" (formula "22") (term "1,1"))
         (rule "replace_known_right" (formula "22") (term "1,1") (ifseqformula "24"))
         (rule "concrete_and_4" (formula "22") (term "1"))
         (rule "concrete_impl_3" (formula "22"))
         (rule "notLeft" (formula "22"))
         (rule "applyOnRigidFormula" (formula "22") (term "0"))
         (rule "simplifyUpdate2" (formula "22") (term "0,0"))
         (rule "simplifyUpdate2" (formula "22") (term "1,0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "simplifyUpdate2" (formula "22") (term "1,1"))
         (rule "replace_known_right" (formula "22") (term "1,1") (ifseqformula "24"))
         (rule "concrete_and_4" (formula "22") (term "1"))
         (rule "concrete_impl_3" (formula "22"))
         (rule "notLeft" (formula "22"))
         (rule "applyOnRigidTerm" (formula "21") (term "0"))
         (rule "simplifyUpdate1" (formula "21") (term "1,0"))
         (rule "applyOnPV" (formula "21") (term "0,0"))
         (rule "simplifyUpdate1" (formula "21") (term "2,0"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (ifseqformula "20"))
         (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0") (ifseqformula "13"))
         (rule "applyOnRigidFormula" (formula "23") (term "0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1"))
         (rule "applyOnPV" (formula "23") (term "0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "22") (term "0"))
         (rule "applyOnRigidFormula" (formula "22") (term "1"))
         (rule "simplifyUpdate1" (formula "22") (term "1,1"))
         (rule "applyOnPV" (formula "22") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0,0"))
         (rule "applyOnPV" (formula "23") (term "0,0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,0,0"))
         (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "17"))
         (rule "concrete_and_1" (formula "23") (term "0"))
         (rule "applyOnRigidFormula" (formula "22") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0"))
         (rule "applyOnPV" (formula "23") (term "0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,0"))
         (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "18"))
         (rule "concrete_and_1" (formula "23"))
         (rule "replace_known_right" (formula "22") (term "1") (ifseqformula "23"))
         (rule "concrete_and_4" (formula "22"))
         (rule "false_right" (formula "22"))
         (rule "Class_invariant_axiom_for_NumericTextBox" (formula "22") (inst "x=x_77") (inst "x_0=x_0") (ifseqformula "4"))
         (rule "inInt" (formula "22") (term "1,0,0,1"))
         (rule "concrete_and_3" (formula "22") (term "0,0,1"))
         (rule "replaceKnownSelect_taclet0_2" (formula "22") (term "1,1,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "22") (term "1,1,0,1"))
         (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "1,0,1,0,1"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "0,0,0,0,0"))
         (rule "inInt" (formula "22") (term "1,0,0,1,0"))
         (rule "concrete_and_3" (formula "22") (term "0,0,1,0"))
         (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "1,0,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "0,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "1,0,1,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "0,0,0,0,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "0,1,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "1,0,0,0,1"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "0,1,1,0,0,1"))
         (rule "replaceKnownSelect_taclet0_0" (formula "22") (term "1,2,0,1,0,1,0"))
         (rule "replaceKnownSelect_taclet0_4" (formula "22") (term "1,1,0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "0,1,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "22") (term "1,1,0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "22") (term "1,2,0,1,0,1,0"))
         (rule "replace_known_left" (formula "22") (term "0,1,0,0") (ifseqformula "8"))
         (rule "concrete_and_1" (formula "22") (term "1,0,0"))
         (rule "replace_known_left" (formula "22") (term "1,0,0") (ifseqformula "9"))
         (rule "concrete_and_3" (formula "22") (term "0,0"))
         (rule "replace_known_right" (formula "22") (term "0,0,0") (ifseqformula "24"))
         (rule "concrete_not_2" (formula "22") (term "0,0"))
         (rule "concrete_and_1" (formula "22") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "22") (term "0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,1"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,1"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,1,0,0,0"))
         (rule "nnf_imp2or" (formula "22") (term "0,1"))
         (rule "nnf_imp2or" (formula "22") (term "0,0"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,1"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,1"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,1"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,1"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0,1"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0,1"))
         (rule "nnf_notAnd" (formula "22") (term "0,0,0"))
         (rule "inEqSimp_notGeq" (formula "22") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "22") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "22") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,0,0"))
         (rule "mul_literals" (formula "22") (term "1,0,0,0,0"))
         (rule "inEqSimp_notLeq" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "22") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "22") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "22") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "22") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "22") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,0"))
         (rule "methodCallThrow" (formula "28") (term "1"))
         (rule "simplifyUpdate2" (formula "28"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "7"))
         (rule "concrete_or_1" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "25"))
         (rule "concrete_or_2" (formula "9"))
         (rule "ifElseSplit" (formula "26"))
         (branch "if x_72 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "27"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_72 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "27"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "23"))
            (rule "simplifyUpdate1" (formula "23") (term "1"))
            (rule "applyOnPV" (formula "23") (term "0"))
            (rule "boolean_not_equal_2" (formula "23"))
            (rule "false_right" (formula "23"))
            (rule "tryCatchThrow" (formula "29") (term "1"))
            (rule "less_equal_than_comparison_simple" (formula "26") (term "1"))
            (rule "sequentialToParallel2" (formula "26"))
            (rule "simplifyUpdate2" (formula "26"))
            (rule "simplifyUpdate3" (formula "26") (term "1,0"))
            (rule "applyOnElementary" (formula "26") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
            (rule "replace_known_left" (formula "26") (term "0,0,1,0") (ifseqformula "19"))
            (rule "ifthenelse_true" (formula "26") (term "0,1,0"))
            (rule "blockEmpty" (formula "26") (term "1"))
            (rule "methodCallReturn" (formula "26") (term "1"))
            (rule "assignment" (formula "26") (term "1"))
            (rule "sequentialToParallel2" (formula "26"))
            (rule "simplifyUpdate2" (formula "26"))
            (rule "simplifyUpdate3" (formula "26") (term "1,0"))
            (rule "applyOnElementary" (formula "26") (term "1,0"))
            (rule "applyOnPV" (formula "26") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "26") (term "1"))
            (rule "simplifyUpdate2" (formula "26"))
            (rule "emptyModality" (formula "26") (term "1"))
            (rule "applyOnRigidFormula" (formula "26"))
            (rule "simplifyUpdate1" (formula "26") (term "1"))
            (rule "applyOnPV" (formula "26") (term "0"))
            (rule "boolean_equal" (formula "26"))
            (rule "closeTrue" (formula "26"))
         )
      )
      (branch "Pre (isSingleDigit)"
         (rule "inInt" (formula "23") (term "1,1,1,1"))
         (rule "concrete_and_3" (formula "23") (term "1,1,1"))
         (rule "simplifyUpdate2" (formula "23"))
         (rule "simplifyUpdate2" (formula "23") (term "1"))
         (rule "applyOnRigidFormula" (formula "23"))
         (rule "simplifyUpdate2" (formula "23") (term "1"))
         (rule "applyOnRigidFormula" (formula "23") (term "0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1"))
         (rule "applyOnPV" (formula "23") (term "0,1"))
         (rule "wellFormedAnonEQ" (formula "23") (term "1") (ifseqformula "13"))
         (rule "replace_known_left" (formula "23") (term "1,1") (ifseqformula "12"))
         (rule "concrete_and_3" (formula "23") (term "1"))
         (rule "replace_known_left" (formula "23") (term "1") (ifseqformula "2"))
         (rule "concrete_and_3" (formula "23"))
         (rule "orRight" (formula "23"))
         (rule "applyOnRigidFormula" (formula "23"))
         (rule "simplifyUpdate2" (formula "23") (term "0"))
         (rule "simplifyUpdate2" (formula "23") (term "1"))
         (rule "applyOnRigidFormula" (formula "24"))
         (rule "simplifyUpdate2" (formula "24") (term "1"))
         (rule "simplifyUpdate2" (formula "24") (term "0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1"))
         (rule "applyOnPV" (formula "23") (term "0,1"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "1"))
         (rule "simplifyUpdate1" (formula "24") (term "1,1"))
         (rule "applyOnPV" (formula "24") (term "0,1"))
         (rule "applyOnRigidFormula" (formula "24") (term "0"))
         (rule "applyOnRigidFormula" (formula "23") (term "1,0"))
         (rule "applyOnPV" (formula "23") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,1,0"))
         (rule "replace_known_left" (formula "23") (term "1,0") (ifseqformula "18"))
         (rule "concrete_and_3" (formula "23") (term "0"))
         (rule "applyOnRigidFormula" (formula "24") (term "0,0"))
         (rule "applyOnRigidFormula" (formula "23") (term "0"))
         (rule "applyOnPV" (formula "23") (term "0,0"))
         (rule "simplifyUpdate1" (formula "23") (term "1,0"))
         (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "17"))
         (rule "concrete_and_1" (formula "23"))
         (rule "replace_known_right" (formula "24") (term "1") (ifseqformula "23"))
         (rule "concrete_and_4" (formula "24"))
         (rule "false_right" (formula "24"))
         (rule "Class_invariant_axiom_for_NumericTextBox" (formula "23") (inst "x=x_77") (inst "x_0=x_0") (ifseqformula "4"))
         (rule "inInt" (formula "23") (term "1,0,0,1"))
         (rule "concrete_and_3" (formula "23") (term "0,0,1"))
         (rule "replaceKnownSelect_taclet0_2" (formula "23") (term "1,1,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_3" (formula "23") (term "1,1,0,1"))
         (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "0,0,0,0,0"))
         (rule "inInt" (formula "23") (term "1,0,0,1,0"))
         (rule "concrete_and_3" (formula "23") (term "0,0,1,0"))
         (rule "replaceKnownSelect_taclet0_4" (formula "23") (term "0,0,1,0,0"))
         (rule "replaceKnownSelect_taclet0_4" (formula "23") (term "0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "1,0,1,0,1"))
         (rule "replaceKnownSelect_taclet0_4" (formula "23") (term "1,0,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "0,0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "23") (term "0,0,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "23") (term "0,1,1,0,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "0,1,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "1,0,1,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "23") (term "1,0,0,0,1"))
         (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "0,1,1,0,0,1"))
         (rule "replaceKnownSelect_taclet0_4" (formula "23") (term "1,1,0,0,1,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "23") (term "1,2,0,1,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "0,1,1,1,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "0,1,1,0,0,1"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_5" (formula "23") (term "1,1,0,0,1,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "23") (term "1,2,0,1,0,1,0"))
         (rule "replace_known_right" (formula "23") (term "0,0,0,0") (ifseqformula "19"))
         (rule "concrete_not_2" (formula "23") (term "0,0,0"))
         (rule "concrete_and_1" (formula "23") (term "0,0"))
         (rule "replace_known_left" (formula "23") (term "0,0,0") (ifseqformula "8"))
         (rule "concrete_and_1" (formula "23") (term "0,0"))
         (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "9"))
         (rule "concrete_and_1" (formula "23") (term "0"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,1,0,0,0"))
         (rule "inEqSimp_commuteLeq" (formula "23") (term "0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,1"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,1"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,1"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,1,0,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,1,0,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,1,0,0,0"))
         (rule "nnf_imp2or" (formula "23") (term "0,1"))
         (rule "nnf_imp2or" (formula "23") (term "0,0"))
         (rule "nnf_notAnd" (formula "23") (term "0,0,1"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,1"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,1"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,1"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,1"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,1"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,1"))
         (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,0,1"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0,1"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0,1"))
         (rule "nnf_notAnd" (formula "23") (term "0,0,0"))
         (rule "inEqSimp_notLeq" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "23") (term "1,0,0,1,0,0,0"))
         (rule "mul_literals" (formula "23") (term "0,1,0,0,1,0,0,0"))
         (rule "polySimp_addAssoc" (formula "23") (term "0,0,1,0,0,0"))
         (rule "add_literals" (formula "23") (term "0,0,0,1,0,0,0"))
         (rule "add_zero_left" (formula "23") (term "0,0,1,0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "23") (term "1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "23") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "23") (term "1,1,0,0,0"))
         (rule "inEqSimp_notGeq" (formula "23") (term "0,0,0,0"))
         (rule "times_zero_1" (formula "23") (term "1,0,0,0,0,0,0"))
         (rule "add_zero_right" (formula "23") (term "0,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "23") (term "0,0,0,0"))
         (rule "mul_literals" (formula "23") (term "1,0,0,0,0"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "20"))
         (rule "concrete_or_2" (formula "9"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "7"))
         (rule "concrete_or_1" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "ifElseSplit" (formula "21"))
         (branch "if x_72 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "22"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_72 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "22"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "20"))
            (rule "applyOnPV" (formula "20") (term "0"))
            (rule "simplifyUpdate1" (formula "20") (term "1"))
            (rule "boolean_not_equal_2" (formula "20"))
            (rule "false_right" (formula "20"))
            (rule "less_equal_than_comparison_simple" (formula "21") (term "1"))
            (rule "sequentialToParallel2" (formula "21"))
            (rule "simplifyUpdate2" (formula "21"))
            (rule "simplifyUpdate3" (formula "21") (term "1,0"))
            (rule "applyOnElementary" (formula "21") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
            (rule "replace_known_left" (formula "21") (term "0,0,1,0") (ifseqformula "19"))
            (rule "ifthenelse_true" (formula "21") (term "0,1,0"))
            (rule "blockEmpty" (formula "21") (term "1"))
            (rule "methodCallReturn" (formula "21") (term "1"))
            (rule "assignment" (formula "21") (term "1"))
            (rule "sequentialToParallel2" (formula "21"))
            (rule "simplifyUpdate2" (formula "21"))
            (rule "simplifyUpdate3" (formula "21") (term "1,0"))
            (rule "applyOnElementary" (formula "21") (term "1,0"))
            (rule "applyOnPV" (formula "21") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "21") (term "1"))
            (rule "simplifyUpdate2" (formula "21"))
            (rule "emptyModality" (formula "21") (term "1"))
            (rule "applyOnRigidFormula" (formula "21"))
            (rule "applyOnPV" (formula "21") (term "0"))
            (rule "simplifyUpdate1" (formula "21") (term "1"))
            (rule "boolean_equal" (formula "21"))
            (rule "closeTrue" (formula "21"))
         )
      )
   )
)
(branch "Exceptional Post (isSingleDigit)"
   (rule "ifthenelse_false" (formula "12") (term "1,0,0,1,1,1,1,1,1,1"))
   (rule "false_to_not_true" (formula "12") (term "0,0,1,1,1,1,1,1,1"))
   (rule "ifthenelse_true" (formula "12") (term "1,0,0,1,0,1,1,1,1,1"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "17"))
   (rule "simplifyUpdate3" (formula "17") (term "1,0"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "andLeft" (formula "12"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "sequentialToParallel2" (formula "13"))
   (rule "simplifyUpdate3" (formula "13") (term "1,0"))
   (rule "andLeft" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "andLeft" (formula "14"))
   (rule "andLeft" (formula "13"))
   (rule "simplifyUpdate2" (formula "13"))
   (rule "notLeft" (formula "13"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "14"))
   (rule "simplifyUpdate2" (formula "14") (term "0"))
   (rule "simplifyUpdate2" (formula "14") (term "1"))
   (rule "applyOnRigidFormula" (formula "13"))
   (rule "simplifyUpdate1" (formula "13") (term "1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "1,1"))
   (rule "replace_known_right" (formula "15") (term "1,1") (ifseqformula "16"))
   (rule "concrete_and_4" (formula "15") (term "1"))
   (rule "concrete_impl_3" (formula "15"))
   (rule "notLeft" (formula "15"))
   (rule "applyOnRigidFormula" (formula "14") (term "0"))
   (rule "simplifyUpdate2" (formula "14") (term "0,0"))
   (rule "simplifyUpdate2" (formula "14") (term "1,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "simplifyUpdate2" (formula "14") (term "1,1"))
   (rule "replace_known_right" (formula "14") (term "1,1") (ifseqformula "16"))
   (rule "concrete_and_4" (formula "14") (term "1"))
   (rule "concrete_impl_3" (formula "14"))
   (rule "notLeft" (formula "14"))
   (rule "applyOnRigidTerm" (formula "13") (term "0"))
   (rule "applyOnPV" (formula "13") (term "0,0"))
   (rule "simplifyUpdate1" (formula "13") (term "2,0"))
   (rule "selectCreatedOfAnonAsFormulaEQ" (formula "13") (ifseqformula "12"))
   (rule "simplifyUpdate1" (formula "13") (term "1,0,0"))
   (rule "simplifyUpdate1" (formula "13") (term "1,0,1"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "1"))
   (rule "simplifyUpdate2" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1"))
   (rule "applyOnPV" (formula "14") (term "0,1"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "1"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1"))
   (rule "applyOnPV" (formula "15") (term "0,1"))
   (rule "applyOnRigidFormula" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "14") (term "0,0"))
   (rule "applyOnPV" (formula "14") (term "0,0,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,0,0"))
   (rule "applyOnRigidFormula" (formula "14") (term "1,0"))
   (rule "applyOnPV" (formula "14") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "14") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,0,0"))
   (rule "Class_invariant_axiom_for_NumericTextBox" (formula "15") (term "1") (inst "x=x_23") (inst "x_0=x_0") (ifseqformula "3"))
   (rule "inInt" (formula "15") (term "1,0,0,1,1"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1,1"))
   (rule "inInt" (formula "15") (term "1,0,0,1,0,1"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1,0,1"))
   (rule "replace_known_right" (formula "15") (term "0,0,0,0,1") (ifseqformula "17"))
   (rule "concrete_not_2" (formula "15") (term "0,0,0,1"))
   (rule "concrete_and_1" (formula "15") (term "0,0,1"))
   (rule "replace_known_left" (formula "15") (term "0,0,0,1") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "15") (term "0,0,1"))
   (rule "replace_known_left" (formula "15") (term "0,0,1") (ifseqformula "8"))
   (rule "concrete_and_1" (formula "15") (term "0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,1"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "15") (term "0,1,1"))
   (rule "nnf_imp2or" (formula "15") (term "0,0,1"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,1"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,1"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,1"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1"))
   (rule "Class_invariant_axiom_for_NumericTextBox" (formula "14") (term "1") (inst "x=x_23") (inst "x_0=x_0") (ifseqformula "3"))
   (rule "inInt" (formula "14") (term "1,0,0,1,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,1,1"))
   (rule "inInt" (formula "14") (term "1,0,0,1,0,1"))
   (rule "concrete_and_3" (formula "14") (term "0,0,1,0,1"))
   (rule "replace_known_left" (formula "14") (term "0,1,0,0,1") (ifseqformula "7"))
   (rule "concrete_and_1" (formula "14") (term "1,0,0,1"))
   (rule "replace_known_left" (formula "14") (term "1,0,0,1") (ifseqformula "8"))
   (rule "concrete_and_3" (formula "14") (term "0,0,1"))
   (rule "replace_known_right" (formula "14") (term "0,0,0,1") (ifseqformula "17"))
   (rule "concrete_not_2" (formula "14") (term "0,0,1"))
   (rule "concrete_and_1" (formula "14") (term "0,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0,1"))
   (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "14") (term "0,1,1"))
   (rule "nnf_imp2or" (formula "14") (term "0,0,1"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,1"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,1"))
   (rule "nnf_notAnd" (formula "14") (term "0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0,1"))
   (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0,1"))
   (rule "mul_literals" (formula "14") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0,1"))
   (rule "methodCallThrow" (formula "21") (term "1"))
   (rule "simplifyUpdate2" (formula "21"))
   (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_3"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_23"))
   (rule "arrayLengthNotNegative" (formula "8") (term "1"))
   (rule "arrayLengthIsAShort" (formula "8") (term "1"))
   (rule "inShort" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "tryCatchThrow" (formula "21") (term "1"))
   (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_24"))
   (rule "variableDeclarationAssign" (formula "18") (term "1"))
   (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_24"))
   (rule "greater_equal_than_comparison_simple" (formula "18") (term "1"))
   (rule "sequentialToParallel2" (formula "18"))
   (rule "simplifyUpdate3" (formula "18") (term "1,0"))
   (rule "applyOnElementary" (formula "18") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
   (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
   (rule "compound_assignment_1_new" (formula "18") (term "1"))
   (rule "sequentialToParallel2" (formula "18"))
   (rule "simplifyUpdate2" (formula "18"))
   (rule "simplifyUpdate3" (formula "18") (term "1,0"))
   (rule "applyOnElementary" (formula "18") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
   (rule "ifthenelse_concrete3" (formula "18") (term "0,0,1,0"))
   (rule "boolean_not_equal_2" (formula "18") (term "1,0,0,1,0"))
   (rule "concrete_or_4" (formula "18") (term "0,0,1,0"))
   (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_25"))
   (rule "equality_comparison_simple" (formula "21") (term "1"))
   (rule "sequentialToParallel2" (formula "21"))
   (rule "simplifyUpdate3" (formula "21") (term "1,0"))
   (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "16"))
   (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
   (rule "ifElseSplit" (formula "18"))
   (branch "if x_23 true"
      (rule "simplifyUpdate2" (formula "1"))
      (rule "simplifyUpdate2" (formula "19"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "ifthenelse_concrete4" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "16") (term "0,0,0") (ifseqformula "14"))
      (rule "concrete_and_2" (formula "16") (term "0,0"))
      (rule "concrete_not_2" (formula "16") (term "0"))
      (rule "concrete_and_1" (formula "16"))
      (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "14"))
      (rule "concrete_and_2" (formula "15") (term "0"))
      (rule "concrete_and_2" (formula "15"))
      (rule "false_right" (formula "15"))
      (rule "inEqSimp_geqRight" (formula "14"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "assignment" (formula "18") (term "1"))
      (rule "sequentialToParallel2" (formula "18"))
      (rule "simplifyUpdate3" (formula "18") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "methodCallReturn" (formula "18") (term "1"))
      (rule "assignment" (formula "18") (term "1"))
      (rule "sequentialToParallel2" (formula "18"))
      (rule "simplifyUpdate2" (formula "18"))
      (rule "simplifyUpdate3" (formula "18") (term "1,0"))
      (rule "applyOnElementary" (formula "18") (term "1,0"))
      (rule "applyOnPV" (formula "18") (term "0,1,0"))
      (rule "methodCallEmpty" (formula "18") (term "1"))
      (rule "simplifyUpdate2" (formula "18"))
      (rule "emptyModality" (formula "18") (term "1"))
      (rule "applyOnRigidFormula" (formula "18"))
      (rule "applyOnPV" (formula "18") (term "0"))
      (rule "simplifyUpdate1" (formula "18") (term "1"))
      (rule "boolean_not_equal_2" (formula "18"))
      (rule "false_right" (formula "18"))
      (rule "ifElseSplit" (formula "20"))
      (branch "if x_25 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_25 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "15"))
         (rule "simplifyUpdate1" (formula "15") (term "1"))
         (rule "applyOnPV" (formula "15") (term "0"))
         (rule "boolean_not_equal_2" (formula "15"))
         (rule "false_right" (formula "15"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "18"))
         (rule "concrete_or_2" (formula "9"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "7"))
         (rule "concrete_or_1" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "ifElseSplit" (formula "21"))
         (branch "if exc_0 instanceof java.lang.Throwable true"
            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
            (rule "ifthenelse_concrete4" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
            (rule "concrete_or_4" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "variableDeclaration" (formula "21") (term "1") (newnames "e_1"))
            (rule "delete_unnecessary_cast" (formula "21") (term "1"))
            (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
               (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
               (rule "boolean_equal" (formula "1") (term "1,1"))
               (rule "concrete_or_3" (formula "1") (term "1"))
               (rule "true_left" (formula "1"))
               (rule "sequentialToParallel2" (formula "21"))
               (rule "simplifyUpdate3" (formula "21") (term "1,0"))
               (rule "assignment" (formula "21") (term "1"))
               (rule "sequentialToParallel2" (formula "21"))
               (rule "simplifyUpdate2" (formula "21"))
               (rule "simplifyUpdate3" (formula "21") (term "1,0"))
               (rule "applyOnElementary" (formula "21") (term "1,0"))
               (rule "applyOnPV" (formula "21") (term "0,1,0"))
               (rule "emptyModality" (formula "21") (term "1"))
               (rule "applyOnRigidFormula" (formula "21"))
               (rule "simplifyUpdate2" (formula "21") (term "0"))
               (rule "applyOnRigidFormula" (formula "21") (term "1"))
               (rule "simplifyUpdate2" (formula "21") (term "1,1"))
               (rule "simplifyUpdate2" (formula "21") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "21") (term "0"))
               (rule "applyOnRigidFormula" (formula "21") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "21") (term "0,1"))
               (rule "simplifyUpdate1" (formula "21") (term "1,0,1"))
               (rule "applyOnPV" (formula "21") (term "0,0,1"))
               (rule "applyOnRigidFormula" (formula "21") (term "0,0"))
               (rule "applyOnPV" (formula "21") (term "0,0,0"))
               (rule "simplifyUpdate1" (formula "21") (term "1,0,0"))
               (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "17"))
               (rule "concrete_not_2" (formula "21") (term "0"))
               (rule "concrete_and_1" (formula "21"))
               (rule "applyOnRigidFormula" (formula "21") (term "1,1"))
               (rule "simplifyUpdate1" (formula "21") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "21") (term "0,1"))
               (rule "simplifyUpdate1" (formula "21") (term "1,0,1"))
               (rule "applyOnRigidTerm" (formula "21") (term "0,1,1"))
               (rule "applyOnPV" (formula "21") (term "0,0,1,1"))
               (rule "applyOnRigidTerm" (formula "21") (term "0,0,1"))
               (rule "applyOnPV" (formula "21") (term "0,0,0,1"))
               (rule "Class_invariant_axiom_for_NumericTextBox" (formula "21") (term "0") (inst "x=x_49") (inst "x_0=x_0") (ifseqformula "4"))
               (rule "inInt" (formula "21") (term "1,0,0,1,0"))
               (rule "concrete_and_3" (formula "21") (term "0,0,1,0"))
               (rule "inInt" (formula "21") (term "1,0,0,1,0,0"))
               (rule "concrete_and_3" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0,0"))
               (rule "pullOutSelect" (formula "21") (term "1,1,0,1,0") (inst "selectSK=NumericTextBox_EMPTY_1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
               (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
               (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_or_2" (formula "1") (term "0,0"))
               (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "22") (term "1,1,0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "21") (term "0,0,0,0,0,0") (inst "selectSK=NumericTextBox_content_1"))
               (rule "applyEq" (formula "22") (term "1,0,1,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "0,0,1,1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "1,2,0,1,0,1,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
               (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
               (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_or_2" (formula "1") (term "0,0"))
               (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "1") (term "1,0,0"))
               (rule "concrete_and_4" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "22") (term "1,2,0,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "0,0,1,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "1,0,1,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "0,0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "21") (term "0,0,0,0,0") (ifseqformula "18"))
               (rule "concrete_not_2" (formula "21") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "21") (term "0,0,0"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "1,0,0,0"))
               (rule "pullOutSelect" (formula "21") (term "1,0,0,0,1,0") (inst "selectSK=NumericTextBox_cursorPosition_1"))
               (rule "applyEq" (formula "22") (term "0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
               (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
               (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_or_2" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "concrete_not_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "22") (term "1,0,0,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "0,0,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_left" (formula "21") (term "1,0,0,0") (ifseqformula "10"))
               (rule "concrete_and_3" (formula "21") (term "0,0,0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "8"))
               (rule "concrete_and_1" (formula "21") (term "0,0"))
               (rule "nnf_imp2or" (formula "21") (term "0,1,0"))
               (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
               (rule "andRight" (formula "16"))
               (branch
                  (rule "allRight" (formula "16") (inst "sk=x_0_5"))
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "inEqSimp_geqRight" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "17"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "18") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_16") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "6"))
                  (rule "eqSymm" (formula "1") (term "0,1"))
                  (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "19"))
                  (rule "false_to_not_true" (formula "1") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "13"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "boxToDiamond" (formula "1") (term "1"))
                  (rule "double_not" (formula "1") (term "0,0,1"))
                  (rule "notLeft" (formula "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_isSingleDigit_16,savedHeapBefore_isSingleDigit_15"))
                  (rule "simplifyUpdate2" (formula "19") (term "1"))
                  (rule "returnUnfold" (formula "19") (term "1") (inst "#v0=x_2"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_49"))
                  (rule "compound_assignment_3_nonsimple" (formula "19") (term "1"))
                  (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x_50"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_50"))
                  (rule "compound_assignment_2" (formula "19") (term "1") (inst "#v=x_51"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_51"))
                  (rule "greater_equal_than_comparison_simple" (formula "19") (term "1"))
                  (rule "sequentialToParallel2" (formula "19"))
                  (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                  (rule "applyOnElementary" (formula "19") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                  (rule "compound_assignment_1_new" (formula "19") (term "1"))
                  (rule "sequentialToParallel2" (formula "19"))
                  (rule "simplifyUpdate2" (formula "19"))
                  (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                  (rule "applyOnElementary" (formula "19") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                  (rule "ifthenelse_concrete3" (formula "19") (term "0,0,1,0"))
                  (rule "boolean_not_equal_2" (formula "19") (term "1,0,0,1,0"))
                  (rule "concrete_or_4" (formula "19") (term "0,0,1,0"))
                  (rule "ifElseSplit" (formula "19"))
                  (branch "if x_50 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "ifthenelse_concrete4" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1"))
                     (rule "concrete_or_4" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_geqRight" (formula "19"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "assignment" (formula "20") (term "1"))
                     (rule "sequentialToParallel2" (formula "20"))
                     (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "methodCallReturn" (formula "20") (term "1"))
                     (rule "assignment" (formula "20") (term "1"))
                     (rule "sequentialToParallel2" (formula "20"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                     (rule "applyOnElementary" (formula "20") (term "1,0"))
                     (rule "applyOnPV" (formula "20") (term "0,1,0"))
                     (rule "methodCallEmpty" (formula "20") (term "1"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "emptyModality" (formula "20") (term "1"))
                     (rule "applyOnRigidFormula" (formula "20"))
                     (rule "simplifyUpdate1" (formula "20") (term "1"))
                     (rule "applyOnPV" (formula "20") (term "0"))
                     (rule "boolean_not_equal_2" (formula "20"))
                     (rule "false_right" (formula "20"))
                     (rule "andRight" (formula "25"))
                     (branch
                        (rule "andRight" (formula "25"))
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=x_0_7"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "26"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "27") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_22") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                           (rule "eqSymm" (formula "1") (term "0,1"))
                           (rule "pullOutSelect" (formula "1") (term "0,1,0") (inst "selectSK=arr_7"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_or_2" (formula "1") (term "0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                           (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "concrete_not_1" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "2") (term "0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "28"))
                           (rule "false_to_not_true" (formula "1") (term "0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "boxToDiamond" (formula "1") (term "1"))
                           (rule "double_not" (formula "1") (term "0,0,1"))
                           (rule "notLeft" (formula "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_isSingleDigit_22,savedHeapBefore_isSingleDigit_21"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "returnUnfold" (formula "23") (term "1") (inst "#v0=x_2"))
                           (rule "variableDeclarationAssign" (formula "23") (term "1"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_65"))
                           (rule "compound_assignment_3_nonsimple" (formula "23") (term "1"))
                           (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_66"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_66"))
                           (rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_67"))
                           (rule "variableDeclarationAssign" (formula "23") (term "1"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_67"))
                           (rule "greater_equal_than_comparison_simple" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                           (rule "compound_assignment_1_new" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                           (rule "ifthenelse_concrete3" (formula "23") (term "0,0,1,0"))
                           (rule "boolean_not_equal_2" (formula "23") (term "1,0,0,1,0"))
                           (rule "concrete_or_4" (formula "23") (term "0,0,1,0"))
                           (rule "allLeft" (formula "18") (inst "t=x_0_5"))
                           (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                           (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "18") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_23") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "11"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "19") (term "0,1,0"))
                           (rule "concrete_and_2" (formula "19") (term "1,0"))
                           (rule "concrete_or_4" (formula "19") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,0,1"))
                           (rule "leq_literals" (formula "19") (term "0,1"))
                           (rule "concrete_and_2" (formula "19") (term "1"))
                           (rule "concrete_or_4" (formula "19"))
                           (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                           (rule "boxToDiamond" (formula "18") (term "1"))
                           (rule "notLeft" (formula "18"))
                           (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_isSingleDigit_23,savedHeapBefore_isSingleDigit_22"))
                           (rule "simplifyUpdate2" (formula "24") (term "1"))
                           (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x_2"))
                           (rule "variableDeclarationAssign" (formula "24") (term "1"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_68"))
                           (rule "compound_assignment_3_nonsimple" (formula "24") (term "1"))
                           (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=x_69"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_69"))
                           (rule "compound_assignment_2" (formula "24") (term "1") (inst "#v=x_70"))
                           (rule "variableDeclarationAssign" (formula "24") (term "1"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_70"))
                           (rule "greater_equal_than_comparison_simple" (formula "24") (term "1"))
                           (rule "sequentialToParallel2" (formula "24"))
                           (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                           (rule "applyOnElementary" (formula "24") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                           (rule "inEqSimp_contradInEq0" (formula "24") (term "0,0,1,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "24") (term "0,0,0,1,0"))
                           (rule "concrete_and_2" (formula "24") (term "0,0,1,0"))
                           (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                           (rule "compound_assignment_1_new" (formula "24") (term "1"))
                           (rule "sequentialToParallel2" (formula "24"))
                           (rule "simplifyUpdate2" (formula "24"))
                           (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                           (rule "applyOnElementary" (formula "24") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                           (rule "boolean_not_equal_2" (formula "24") (term "0,0,1,0"))
                           (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                           (rule "ifElseSplit" (formula "25"))
                           (branch "if x_66 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "ifthenelse_concrete4" (formula "1"))
                              (rule "boolean_not_equal_2" (formula "1") (term "1"))
                              (rule "concrete_or_4" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "24"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "methodCallReturn" (formula "26") (term "1"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,1,0"))
                              (rule "methodCallEmpty" (formula "26") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "emptyModality" (formula "26") (term "1"))
                              (rule "applyOnRigidFormula" (formula "26"))
                              (rule "applyOnPV" (formula "26") (term "0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1"))
                              (rule "boolean_not_equal_2" (formula "26"))
                              (rule "false_right" (formula "26"))
                              (rule "allLeft" (formula "20") (inst "t=x_0_7"))
                              (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                              (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "20") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_24") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "12"))
                              (rule "eqSymm" (formula "20") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                              (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "21") (term "0,0,1"))
                              (rule "leq_literals" (formula "21") (term "0,1"))
                              (rule "concrete_and_2" (formula "21") (term "1"))
                              (rule "concrete_or_4" (formula "21"))
                              (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "21") (term "0,1"))
                              (rule "concrete_and_2" (formula "21") (term "1"))
                              (rule "concrete_or_4" (formula "21"))
                              (rule "applyEqRigid" (formula "20") (term "1,0,1") (ifseqformula "21"))
                              (rule "boxToDiamond" (formula "20") (term "1"))
                              (rule "notLeft" (formula "20"))
                              (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_isSingleDigit_24,savedHeapBefore_isSingleDigit_23"))
                              (rule "simplifyUpdate2" (formula "26") (term "1"))
                              (rule "returnUnfold" (formula "26") (term "1") (inst "#v0=x_2"))
                              (rule "variableDeclarationAssign" (formula "26") (term "1"))
                              (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_71"))
                              (rule "compound_assignment_3_nonsimple" (formula "26") (term "1"))
                              (rule "ifElseSplit" (formula "27"))
                              (branch "if x_69 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "28"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment" (formula "27") (term "1"))
                                 (rule "sequentialToParallel2" (formula "27"))
                                 (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                 (rule "methodCallReturn" (formula "27") (term "1"))
                                 (rule "assignment" (formula "27") (term "1"))
                                 (rule "sequentialToParallel2" (formula "27"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                 (rule "applyOnElementary" (formula "27") (term "1,0"))
                                 (rule "applyOnPV" (formula "27") (term "0,1,0"))
                                 (rule "methodCallEmpty" (formula "27") (term "1"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "emptyModality" (formula "27") (term "1"))
                                 (rule "notRight" (formula "27"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_69 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "28"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "26"))
                                 (rule "applyOnPV" (formula "26") (term "0"))
                                 (rule "simplifyUpdate1" (formula "26") (term "1"))
                                 (rule "boolean_equal" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                           )
                           (branch "if x_66 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "24"))
                              (rule "applyOnPV" (formula "24") (term "0"))
                              (rule "simplifyUpdate1" (formula "24") (term "1"))
                              (rule "ifthenelse_concrete4" (formula "24"))
                              (rule "boolean_not_equal_2" (formula "24") (term "1"))
                              (rule "concrete_or_4" (formula "24"))
                              (rule "notRight" (formula "24"))
                              (rule "less_equal_than_comparison_simple" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                              (rule "blockEmpty" (formula "26") (term "1"))
                              (rule "methodCallReturn" (formula "26") (term "1"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,1,0"))
                              (rule "methodCallEmpty" (formula "26") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "emptyModality" (formula "26") (term "1"))
                              (rule "applyOnRigidFormula" (formula "26"))
                              (rule "simplifyUpdate1" (formula "26") (term "1"))
                              (rule "applyOnPV" (formula "26") (term "0"))
                              (rule "ifthenelse_concrete3" (formula "26"))
                              (rule "boolean_not_equal_2" (formula "26") (term "1"))
                              (rule "concrete_or_4" (formula "26"))
                              (rule "inEqSimp_leqRight" (formula "26"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                              (rule "leq_literals" (formula "2") (term "0"))
                              (rule "concrete_or_1" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "ifElseSplit" (formula "25"))
                              (branch "if x_69 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment" (formula "25") (term "1"))
                                 (rule "sequentialToParallel2" (formula "25"))
                                 (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                 (rule "methodCallReturn" (formula "25") (term "1"))
                                 (rule "assignment" (formula "25") (term "1"))
                                 (rule "sequentialToParallel2" (formula "25"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                 (rule "applyOnElementary" (formula "25") (term "1,0"))
                                 (rule "applyOnPV" (formula "25") (term "0,1,0"))
                                 (rule "methodCallEmpty" (formula "25") (term "1"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "emptyModality" (formula "25") (term "1"))
                                 (rule "notRight" (formula "25"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_69 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "25"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1"))
                                 (rule "applyOnPV" (formula "25") (term "0"))
                                 (rule "boolean_equal" (formula "25"))
                                 (rule "closeTrue" (formula "25"))
                              )
                           )
                        )
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=x_49_1"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "26"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_6"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_or_2" (formula "1") (term "0,0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
                           (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "27"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                           (rule "mul_literals" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                           (rule "inEqSimp_exactShadow3" (formula "15") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "15") (term "0,0"))
                           (rule "add_zero_left" (formula "15") (term "0"))
                           (rule "allLeft" (formula "20") (inst "t=x_49_1"))
                           (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "30"))
                           (rule "concrete_or_4" (formula "20"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq1" (formula "20") (term "0") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "20") (term "0,0"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,0"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,0"))
                           (rule "add_zero_right" (formula "20") (term "0,0,0"))
                           (rule "leq_literals" (formula "20") (term "0,0"))
                           (rule "concrete_and_2" (formula "20") (term "0"))
                           (rule "concrete_or_2" (formula "20"))
                           (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "20"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch
                        (rule "orRight" (formula "25"))
                        (rule "allLeft" (formula "15") (inst "t=x_0_5"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                        (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_21") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
                        (rule "eqSymm" (formula "15") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                        (rule "add_literals" (formula "16") (term "0,0,1"))
                        (rule "leq_literals" (formula "16") (term "0,1"))
                        (rule "concrete_and_2" (formula "16") (term "1"))
                        (rule "concrete_or_4" (formula "16"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "16") (term "0,1"))
                        (rule "concrete_and_2" (formula "16") (term "1"))
                        (rule "concrete_or_4" (formula "16"))
                        (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
                        (rule "boxToDiamond" (formula "15") (term "1"))
                        (rule "notLeft" (formula "15"))
                        (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_isSingleDigit_21,savedHeapBefore_isSingleDigit_20"))
                        (rule "simplifyUpdate2" (formula "21") (term "1"))
                        (rule "returnUnfold" (formula "21") (term "1") (inst "#v0=x_2"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_62"))
                        (rule "compound_assignment_3_nonsimple" (formula "21") (term "1"))
                        (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x_63"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_63"))
                        (rule "compound_assignment_2" (formula "21") (term "1") (inst "#v=x_64"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_64"))
                        (rule "greater_equal_than_comparison_simple" (formula "21") (term "1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "applyOnElementary" (formula "21") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                        (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                        (rule "inEqSimp_contradInEq0" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "21") (term "0,0,0,1,0"))
                        (rule "concrete_and_2" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                        (rule "compound_assignment_1_new" (formula "21") (term "1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "applyOnElementary" (formula "21") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                        (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                        (rule "boolean_not_equal_2" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                        (rule "ifElseSplit" (formula "21"))
                        (branch "if x_63 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "22"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "assignment" (formula "21") (term "1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "methodCallReturn" (formula "21") (term "1"))
                           (rule "assignment" (formula "21") (term "1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "applyOnElementary" (formula "21") (term "1,0"))
                           (rule "applyOnPV" (formula "21") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "21") (term "1"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "emptyModality" (formula "21") (term "1"))
                           (rule "notRight" (formula "21"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_63 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "22"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "21"))
                           (rule "applyOnPV" (formula "21") (term "0"))
                           (rule "simplifyUpdate1" (formula "21") (term "1"))
                           (rule "boolean_equal" (formula "21"))
                           (rule "closeTrue" (formula "21"))
                        )
                     )
                  )
                  (branch "if x_50 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "19"))
                     (rule "simplifyUpdate1" (formula "19") (term "1"))
                     (rule "applyOnPV" (formula "19") (term "0"))
                     (rule "ifthenelse_concrete4" (formula "19"))
                     (rule "boolean_not_equal_2" (formula "19") (term "1"))
                     (rule "concrete_or_4" (formula "19"))
                     (rule "notRight" (formula "19"))
                     (rule "less_equal_than_comparison_simple" (formula "20") (term "1"))
                     (rule "sequentialToParallel2" (formula "20"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                     (rule "applyOnElementary" (formula "20") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
                     (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "20") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,0"))
                     (rule "applyOnPV" (formula "20") (term "0,0,0,1,0"))
                     (rule "blockEmpty" (formula "20") (term "1"))
                     (rule "methodCallReturn" (formula "20") (term "1"))
                     (rule "assignment" (formula "20") (term "1"))
                     (rule "sequentialToParallel2" (formula "20"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                     (rule "applyOnElementary" (formula "20") (term "1,0"))
                     (rule "applyOnPV" (formula "20") (term "0,1,0"))
                     (rule "methodCallEmpty" (formula "20") (term "1"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "emptyModality" (formula "20") (term "1"))
                     (rule "applyOnRigidFormula" (formula "20"))
                     (rule "applyOnPV" (formula "20") (term "0"))
                     (rule "simplifyUpdate1" (formula "20") (term "1"))
                     (rule "ifthenelse_concrete3" (formula "20"))
                     (rule "boolean_not_equal_2" (formula "20") (term "1"))
                     (rule "concrete_or_4" (formula "20"))
                     (rule "inEqSimp_leqRight" (formula "20"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "andRight" (formula "25"))
                     (branch
                        (rule "andRight" (formula "25"))
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=x_0_6"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "inEqSimp_leqRight" (formula "25"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "27") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_18") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                           (rule "eqSymm" (formula "1") (term "0,1"))
                           (rule "pullOutSelect" (formula "1") (term "0,1,0") (inst "selectSK=arr_5"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_or_2" (formula "1") (term "0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                           (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "concrete_not_1" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "2") (term "0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "28"))
                           (rule "false_to_not_true" (formula "1") (term "0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "boxToDiamond" (formula "1") (term "1"))
                           (rule "double_not" (formula "1") (term "0,0,1"))
                           (rule "notLeft" (formula "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_isSingleDigit_18,savedHeapBefore_isSingleDigit_17"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "returnUnfold" (formula "23") (term "1") (inst "#v0=x_2"))
                           (rule "variableDeclarationAssign" (formula "23") (term "1"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_55"))
                           (rule "compound_assignment_3_nonsimple" (formula "23") (term "1"))
                           (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_56"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_56"))
                           (rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_57"))
                           (rule "variableDeclarationAssign" (formula "23") (term "1"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_57"))
                           (rule "greater_equal_than_comparison_simple" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                           (rule "compound_assignment_1_new" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                           (rule "ifthenelse_concrete3" (formula "23") (term "0,0,1,0"))
                           (rule "boolean_not_equal_2" (formula "23") (term "1,0,0,1,0"))
                           (rule "concrete_or_4" (formula "23") (term "0,0,1,0"))
                           (rule "allLeft" (formula "18") (inst "t=x_0_5"))
                           (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                           (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "18") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_19") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "11"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,0,1"))
                           (rule "leq_literals" (formula "19") (term "0,1"))
                           (rule "concrete_and_2" (formula "19") (term "1"))
                           (rule "concrete_or_4" (formula "19"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "19") (term "0,1"))
                           (rule "concrete_and_2" (formula "19") (term "1"))
                           (rule "concrete_or_4" (formula "19"))
                           (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                           (rule "boxToDiamond" (formula "18") (term "1"))
                           (rule "notLeft" (formula "18"))
                           (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_isSingleDigit_19,savedHeapBefore_isSingleDigit_18"))
                           (rule "simplifyUpdate2" (formula "24") (term "1"))
                           (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x_2"))
                           (rule "variableDeclarationAssign" (formula "24") (term "1"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_58"))
                           (rule "compound_assignment_3_nonsimple" (formula "24") (term "1"))
                           (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=x_59"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_59"))
                           (rule "compound_assignment_2" (formula "24") (term "1") (inst "#v=x_60"))
                           (rule "variableDeclarationAssign" (formula "24") (term "1"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_60"))
                           (rule "greater_equal_than_comparison_simple" (formula "24") (term "1"))
                           (rule "sequentialToParallel2" (formula "24"))
                           (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                           (rule "applyOnElementary" (formula "24") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                           (rule "inEqSimp_subsumption1" (formula "24") (term "0,0,1,0") (ifseqformula "4"))
                           (rule "leq_literals" (formula "24") (term "0,0,0,1,0"))
                           (rule "concrete_or_1" (formula "24") (term "0,0,1,0"))
                           (rule "ifthenelse_true" (formula "24") (term "0,1,0"))
                           (rule "compound_assignment_1_new" (formula "24") (term "1"))
                           (rule "sequentialToParallel2" (formula "24"))
                           (rule "simplifyUpdate2" (formula "24"))
                           (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                           (rule "applyOnElementary" (formula "24") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                           (rule "boolean_equal" (formula "24") (term "0,0,1,0"))
                           (rule "ifthenelse_true" (formula "24") (term "0,1,0"))
                           (rule "ifElseSplit" (formula "25"))
                           (branch "if x_56 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "ifthenelse_concrete4" (formula "1"))
                              (rule "boolean_not_equal_2" (formula "1") (term "1"))
                              (rule "concrete_or_4" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "24"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "methodCallReturn" (formula "26") (term "1"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,1,0"))
                              (rule "methodCallEmpty" (formula "26") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "emptyModality" (formula "26") (term "1"))
                              (rule "applyOnRigidFormula" (formula "26"))
                              (rule "applyOnPV" (formula "26") (term "0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1"))
                              (rule "boolean_not_equal_2" (formula "26"))
                              (rule "false_right" (formula "26"))
                              (rule "allLeft" (formula "20") (inst "t=x_0_6"))
                              (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                              (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "20") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_20") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "12"))
                              (rule "eqSymm" (formula "20") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "21") (term "0,1,0"))
                              (rule "concrete_and_2" (formula "21") (term "1,0"))
                              (rule "concrete_or_4" (formula "21") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                              (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "21") (term "0,0,1"))
                              (rule "leq_literals" (formula "21") (term "0,1"))
                              (rule "concrete_and_2" (formula "21") (term "1"))
                              (rule "concrete_or_4" (formula "21"))
                              (rule "applyEqRigid" (formula "20") (term "1,0,1") (ifseqformula "21"))
                              (rule "boxToDiamond" (formula "20") (term "1"))
                              (rule "notLeft" (formula "20"))
                              (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_isSingleDigit_20,savedHeapBefore_isSingleDigit_19"))
                              (rule "simplifyUpdate2" (formula "26") (term "1"))
                              (rule "returnUnfold" (formula "26") (term "1") (inst "#v0=x_2"))
                              (rule "variableDeclarationAssign" (formula "26") (term "1"))
                              (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_61"))
                              (rule "compound_assignment_3_nonsimple" (formula "26") (term "1"))
                              (rule "ifElseSplit" (formula "27"))
                              (branch "if x_59 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "28"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_59 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "28"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "26"))
                                 (rule "applyOnPV" (formula "26") (term "0"))
                                 (rule "simplifyUpdate1" (formula "26") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "26"))
                                 (rule "false_right" (formula "26"))
                                 (rule "less_equal_than_comparison_simple" (formula "27") (term "1"))
                                 (rule "sequentialToParallel2" (formula "27"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                 (rule "applyOnElementary" (formula "27") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
                                 (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
                                 (rule "blockEmpty" (formula "27") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0,1,0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "27") (term "0,0,0,1,0"))
                                 (rule "concrete_and_2" (formula "27") (term "0,0,1,0"))
                                 (rule "ifthenelse_false" (formula "27") (term "0,1,0"))
                                 (rule "methodCallReturn" (formula "27") (term "1"))
                                 (rule "assignment" (formula "27") (term "1"))
                                 (rule "sequentialToParallel2" (formula "27"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                 (rule "applyOnElementary" (formula "27") (term "1,0"))
                                 (rule "applyOnPV" (formula "27") (term "0,1,0"))
                                 (rule "methodCallEmpty" (formula "27") (term "1"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "emptyModality" (formula "27") (term "1"))
                                 (rule "notRight" (formula "27"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "if x_56 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "24"))
                              (rule "applyOnPV" (formula "24") (term "0"))
                              (rule "simplifyUpdate1" (formula "24") (term "1"))
                              (rule "ifthenelse_concrete4" (formula "24"))
                              (rule "boolean_not_equal_2" (formula "24") (term "1"))
                              (rule "concrete_or_4" (formula "24"))
                              (rule "notRight" (formula "24"))
                              (rule "less_equal_than_comparison_simple" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                              (rule "blockEmpty" (formula "26") (term "1"))
                              (rule "methodCallReturn" (formula "26") (term "1"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,1,0"))
                              (rule "methodCallEmpty" (formula "26") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "emptyModality" (formula "26") (term "1"))
                              (rule "applyOnRigidFormula" (formula "26"))
                              (rule "simplifyUpdate1" (formula "26") (term "1"))
                              (rule "applyOnPV" (formula "26") (term "0"))
                              (rule "ifthenelse_concrete3" (formula "26"))
                              (rule "boolean_not_equal_2" (formula "26") (term "1"))
                              (rule "concrete_or_4" (formula "26"))
                              (rule "inEqSimp_leqRight" (formula "26"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                              (rule "leq_literals" (formula "2") (term "0"))
                              (rule "concrete_or_1" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "ifElseSplit" (formula "25"))
                              (branch "if x_59 true"
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_59 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "25"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1"))
                                 (rule "applyOnPV" (formula "25") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "less_equal_than_comparison_simple" (formula "25") (term "1"))
                                 (rule "sequentialToParallel2" (formula "25"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                 (rule "applyOnElementary" (formula "25") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "25") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0"))
                                 (rule "applyOnPV" (formula "25") (term "0,0,0,1,0"))
                                 (rule "blockEmpty" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0,1,0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "25") (term "0,0,0,1,0"))
                                 (rule "concrete_and_2" (formula "25") (term "0,0,1,0"))
                                 (rule "ifthenelse_false" (formula "25") (term "0,1,0"))
                                 (rule "methodCallReturn" (formula "25") (term "1"))
                                 (rule "assignment" (formula "25") (term "1"))
                                 (rule "sequentialToParallel2" (formula "25"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                 (rule "applyOnElementary" (formula "25") (term "1,0"))
                                 (rule "applyOnPV" (formula "25") (term "0,1,0"))
                                 (rule "methodCallEmpty" (formula "25") (term "1"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "emptyModality" (formula "25") (term "1"))
                                 (rule "notRight" (formula "25"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=x_49_0"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "inEqSimp_leqRight" (formula "25"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_4"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_or_2" (formula "1") (term "0,0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
                           (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "27"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "14") (term "0,0"))
                           (rule "add_zero_left" (formula "14") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
                           (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                           (rule "mul_literals" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                           (rule "allLeft" (formula "20") (inst "t=x_49_0"))
                           (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "30"))
                           (rule "concrete_or_4" (formula "20"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1"))
                           (rule "leq_literals" (formula "20") (term "0,1"))
                           (rule "concrete_and_2" (formula "20") (term "1"))
                           (rule "concrete_or_4" (formula "20"))
                           (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "1"))
                           (rule "andLeft" (formula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "20"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "leq_literals" (formula "20"))
                           (rule "closeFalse" (formula "20"))
                        )
                     )
                     (branch
                        (rule "orRight" (formula "25"))
                        (rule "allLeft" (formula "15") (inst "t=x_0_5"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                        (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_17") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
                        (rule "eqSymm" (formula "15") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "16") (term "0,1,0"))
                        (rule "concrete_and_2" (formula "16") (term "1,0"))
                        (rule "concrete_or_4" (formula "16") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                        (rule "add_literals" (formula "16") (term "0,0,1"))
                        (rule "leq_literals" (formula "16") (term "0,1"))
                        (rule "concrete_and_2" (formula "16") (term "1"))
                        (rule "concrete_or_4" (formula "16"))
                        (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
                        (rule "boxToDiamond" (formula "15") (term "1"))
                        (rule "notLeft" (formula "15"))
                        (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_isSingleDigit_17,savedHeapBefore_isSingleDigit_16"))
                        (rule "simplifyUpdate2" (formula "21") (term "1"))
                        (rule "returnUnfold" (formula "21") (term "1") (inst "#v0=x_2"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_52"))
                        (rule "compound_assignment_3_nonsimple" (formula "21") (term "1"))
                        (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x_53"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_53"))
                        (rule "compound_assignment_2" (formula "21") (term "1") (inst "#v=x_54"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_54"))
                        (rule "greater_equal_than_comparison_simple" (formula "21") (term "1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "applyOnElementary" (formula "21") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                        (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                        (rule "inEqSimp_subsumption1" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "leq_literals" (formula "21") (term "0,0,0,1,0"))
                        (rule "concrete_or_1" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_true" (formula "21") (term "0,1,0"))
                        (rule "compound_assignment_1_new" (formula "21") (term "1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "applyOnElementary" (formula "21") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                        (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                        (rule "boolean_equal" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_true" (formula "21") (term "0,1,0"))
                        (rule "ifElseSplit" (formula "21"))
                        (branch "if x_53 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "22"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_53 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "22"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "21"))
                           (rule "applyOnPV" (formula "21") (term "0"))
                           (rule "simplifyUpdate1" (formula "21") (term "1"))
                           (rule "boolean_not_equal_2" (formula "21"))
                           (rule "false_right" (formula "21"))
                           (rule "less_equal_than_comparison_simple" (formula "21") (term "1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "applyOnElementary" (formula "21") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                           (rule "blockEmpty" (formula "21") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "21") (term "0,0,0,1,0"))
                           (rule "concrete_and_2" (formula "21") (term "0,0,1,0"))
                           (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                           (rule "methodCallReturn" (formula "21") (term "1"))
                           (rule "assignment" (formula "21") (term "1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "applyOnElementary" (formula "21") (term "1,0"))
                           (rule "applyOnPV" (formula "21") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "21") (term "1"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "emptyModality" (formula "21") (term "1"))
                           (rule "notRight" (formula "21"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
               (branch
                  (rule "allRight" (formula "16") (inst "sk=x_23_1"))
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
                  (rule "times_zero_1" (formula "10") (term "0,0"))
                  (rule "add_zero_left" (formula "10") (term "0"))
                  (rule "allLeft" (formula "15") (inst "t=x_23_1"))
                  (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "20"))
                  (rule "concrete_or_4" (formula "15"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "15") (term "1"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1"))
                  (rule "mul_literals" (formula "15") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq0" (formula "15") (term "1") (ifseqformula "2"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,1"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,1"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,1"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,1"))
                  (rule "add_zero_right" (formula "15") (term "0,0,1"))
                  (rule "leq_literals" (formula "15") (term "0,1"))
                  (rule "concrete_and_2" (formula "15") (term "1"))
                  (rule "concrete_or_4" (formula "15"))
                  (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "15"))
                  (rule "andLeft" (formula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "1"))
                  (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                  (rule "add_literals" (formula "1") (term "1,1,0"))
                  (rule "times_zero_1" (formula "1") (term "1,0"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "leq_literals" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
               (rule "instanceof_static_type" (formula "21") (term "0,1,1"))
               (rule "boolean_equal" (formula "21") (term "1,1"))
               (rule "concrete_or_3" (formula "21") (term "1"))
               (rule "closeTrue" (formula "21"))
            )
         )
         (branch "if exc_0 instanceof java.lang.Throwable false"
            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
            (rule "concrete_or_4" (formula "1") (term "0,1"))
            (rule "double_not" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "close" (formula "18") (ifseqformula "1"))
         )
      )
   )
   (branch "if x_23 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "19"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "14"))
      (rule "simplifyUpdate1" (formula "14") (term "1"))
      (rule "applyOnPV" (formula "14") (term "0"))
      (rule "ifthenelse_concrete4" (formula "14"))
      (rule "boolean_not_equal_2" (formula "14") (term "1"))
      (rule "concrete_or_4" (formula "14"))
      (rule "notRight" (formula "14"))
      (rule "replace_known_left" (formula "16") (term "0,0,0") (ifseqformula "1"))
      (rule "concrete_and_1" (formula "16") (term "0,0"))
      (rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "1"))
      (rule "concrete_and_1" (formula "15") (term "0"))
      (rule "inEqSimp_notLeq" (formula "16") (term "0"))
      (rule "mul_literals" (formula "16") (term "1,0,0,0"))
      (rule "add_literals" (formula "16") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "0"))
      (rule "mul_literals" (formula "16") (term "1,0"))
      (rule "less_equal_than_comparison_simple" (formula "19") (term "1"))
      (rule "sequentialToParallel2" (formula "19"))
      (rule "simplifyUpdate2" (formula "19"))
      (rule "simplifyUpdate3" (formula "19") (term "1,0"))
      (rule "applyOnElementary" (formula "19") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
      (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
      (rule "blockEmpty" (formula "19") (term "1"))
      (rule "methodCallReturn" (formula "19") (term "1"))
      (rule "assignment" (formula "19") (term "1"))
      (rule "sequentialToParallel2" (formula "19"))
      (rule "simplifyUpdate2" (formula "19"))
      (rule "simplifyUpdate3" (formula "19") (term "1,0"))
      (rule "applyOnElementary" (formula "19") (term "1,0"))
      (rule "applyOnPV" (formula "19") (term "0,1,0"))
      (rule "methodCallEmpty" (formula "19") (term "1"))
      (rule "simplifyUpdate2" (formula "19"))
      (rule "emptyModality" (formula "19") (term "1"))
      (rule "applyOnRigidFormula" (formula "19"))
      (rule "applyOnPV" (formula "19") (term "0"))
      (rule "simplifyUpdate1" (formula "19") (term "1"))
      (rule "ifthenelse_concrete3" (formula "19"))
      (rule "boolean_not_equal_2" (formula "19") (term "1"))
      (rule "concrete_or_4" (formula "19"))
      (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "19"))
      (rule "concrete_and_2" (formula "15"))
      (rule "false_right" (formula "15"))
      (rule "inEqSimp_leqRight" (formula "18"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
      (rule "concrete_and_1" (formula "16"))
      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
      (rule "leq_literals" (formula "2") (term "0"))
      (rule "concrete_or_1" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "ifElseSplit" (formula "20"))
      (branch "if x_25 true"
         (rule "simplifyUpdate2" (formula "21"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "boolean_not_equal_2" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
      (branch "if x_25 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "21"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "15"))
         (rule "simplifyUpdate1" (formula "15") (term "1"))
         (rule "applyOnPV" (formula "15") (term "0"))
         (rule "boolean_not_equal_2" (formula "15"))
         (rule "false_right" (formula "15"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0,1") (ifseqformula "2"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "18"))
         (rule "concrete_or_2" (formula "9"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "0") (ifseqformula "2"))
         (rule "replace_known_left" (formula "6") (term "0") (ifseqformula "7"))
         (rule "concrete_or_1" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "ifElseSplit" (formula "21"))
         (branch "if exc_0 instanceof java.lang.Throwable true"
            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
            (rule "ifthenelse_concrete4" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1,1"))
            (rule "concrete_or_4" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "variableDeclaration" (formula "21") (term "1") (newnames "e"))
            (rule "delete_unnecessary_cast" (formula "21") (term "1"))
            (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
               (rule "instanceof_static_type" (formula "1") (term "0,1,1"))
               (rule "boolean_equal" (formula "1") (term "1,1"))
               (rule "concrete_or_3" (formula "1") (term "1"))
               (rule "true_left" (formula "1"))
               (rule "sequentialToParallel2" (formula "21"))
               (rule "simplifyUpdate3" (formula "21") (term "1,0"))
               (rule "assignment" (formula "21") (term "1"))
               (rule "sequentialToParallel2" (formula "21"))
               (rule "simplifyUpdate2" (formula "21"))
               (rule "simplifyUpdate3" (formula "21") (term "1,0"))
               (rule "applyOnElementary" (formula "21") (term "1,0"))
               (rule "applyOnPV" (formula "21") (term "0,1,0"))
               (rule "emptyModality" (formula "21") (term "1"))
               (rule "applyOnRigidFormula" (formula "21"))
               (rule "simplifyUpdate2" (formula "21") (term "0"))
               (rule "applyOnRigidFormula" (formula "21") (term "1"))
               (rule "simplifyUpdate2" (formula "21") (term "1,1"))
               (rule "simplifyUpdate2" (formula "21") (term "0,1"))
               (rule "applyOnRigidFormula" (formula "21") (term "0"))
               (rule "applyOnRigidFormula" (formula "21") (term "1,1"))
               (rule "applyOnRigidFormula" (formula "21") (term "0,1"))
               (rule "simplifyUpdate1" (formula "21") (term "1,0,1"))
               (rule "applyOnPV" (formula "21") (term "0,0,1"))
               (rule "applyOnRigidFormula" (formula "21") (term "0,0"))
               (rule "applyOnPV" (formula "21") (term "0,0,0"))
               (rule "simplifyUpdate1" (formula "21") (term "1,0,0"))
               (rule "replace_known_right" (formula "21") (term "0,0") (ifseqformula "17"))
               (rule "concrete_not_2" (formula "21") (term "0"))
               (rule "concrete_and_1" (formula "21"))
               (rule "applyOnRigidFormula" (formula "21") (term "1,1"))
               (rule "simplifyUpdate1" (formula "21") (term "1,1,1"))
               (rule "applyOnRigidFormula" (formula "21") (term "0,1"))
               (rule "simplifyUpdate1" (formula "21") (term "1,0,1"))
               (rule "applyOnRigidTerm" (formula "21") (term "0,1,1"))
               (rule "applyOnPV" (formula "21") (term "0,0,1,1"))
               (rule "applyOnRigidTerm" (formula "21") (term "0,0,1"))
               (rule "applyOnPV" (formula "21") (term "0,0,0,1"))
               (rule "Class_invariant_axiom_for_NumericTextBox" (formula "21") (term "0") (inst "x=x_26") (inst "x_0=x_0") (ifseqformula "4"))
               (rule "inInt" (formula "21") (term "1,0,0,1,0"))
               (rule "concrete_and_3" (formula "21") (term "0,0,1,0"))
               (rule "inInt" (formula "21") (term "1,0,0,1,0,0"))
               (rule "concrete_and_3" (formula "21") (term "0,0,1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0"))
               (rule "inEqSimp_ltToLeq" (formula "21") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1,0,0,1,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "1,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "21") (term "0,0,0,1,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "1,0,0,1,0,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,1,0,0,1,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,1,0,0,1,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,1,0,0,1,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,1,0,0,1,0,0"))
               (rule "pullOutSelect" (formula "21") (term "0,0,1,0,0,0") (inst "selectSK=NumericTextBox_cursorPosition_0"))
               (rule "applyEq" (formula "22") (term "1,1,1,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "1,0,0,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
               (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
               (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_or_2" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "concrete_not_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "22") (term "1,0,0,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "1,1,1,0,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "0,0,1,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "1,1,1,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_left" (formula "21") (term "0,1,0,0,0") (ifseqformula "8"))
               (rule "concrete_and_1" (formula "21") (term "1,0,0,0"))
               (rule "pullOutSelect" (formula "21") (term "1,1,0,1,0") (inst "selectSK=NumericTextBox_EMPTY_0"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
               (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
               (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_or_2" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "concrete_not_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "22") (term "1,1,0,1,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "pullOutSelect" (formula "21") (term "1,2,0,1,0,1,0,0") (inst "selectSK=NumericTextBox_content_0"))
               (rule "applyEq" (formula "22") (term "1,0,1,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
               (rule "applyEq" (formula "22") (term "0,0,1,0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
               (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
               (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
               (rule "concrete_and_2" (formula "1") (term "0,0,0"))
               (rule "concrete_or_2" (formula "1") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "20"))
               (rule "concrete_not_2" (formula "1") (term "0,0,0"))
               (rule "concrete_and_1" (formula "1") (term "0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "4"))
               (rule "concrete_not_1" (formula "1") (term "0,0"))
               (rule "ifthenelse_false" (formula "1") (term "0"))
               (rule "applyEqReverse" (formula "22") (term "1,0,1,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "1,2,0,1,0,1,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "0,1,1,1,0,0,1,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "0,0,0,0,0,0") (ifseqformula "1"))
               (rule "applyEqReverse" (formula "22") (term "0,0,1,0,0,0") (ifseqformula "1"))
               (rule "hideAuxiliaryEq" (formula "1"))
               (rule "replace_known_right" (formula "21") (term "0,0,0,0,0") (ifseqformula "18"))
               (rule "concrete_not_2" (formula "21") (term "0,0,0,0"))
               (rule "concrete_and_1" (formula "21") (term "0,0,0"))
               (rule "inEqSimp_commuteGeq" (formula "21") (term "0,0,0"))
               (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "10"))
               (rule "concrete_and_1" (formula "21") (term "0,0"))
               (rule "nnf_imp2or" (formula "21") (term "0,1,0"))
               (rule "nnf_imp2or" (formula "21") (term "0,0,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0,1,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,1,0"))
               (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,0,1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,1,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,1,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,1,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,1,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,1,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,1,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,1,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,1,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1,0"))
               (rule "nnf_notAnd" (formula "21") (term "0,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "21") (term "0,0,0,0,0"))
               (rule "times_zero_1" (formula "21") (term "1,0,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "21") (term "0,0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "21") (term "1,0,0,0,0"))
               (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1,0,0,0,0"))
               (rule "mul_literals" (formula "21") (term "0,1,0,0,1,0,0,0,0"))
               (rule "polySimp_addAssoc" (formula "21") (term "0,0,1,0,0,0,0"))
               (rule "add_literals" (formula "21") (term "0,0,0,1,0,0,0,0"))
               (rule "add_zero_left" (formula "21") (term "0,0,1,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "21") (term "1,0,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,0,0"))
               (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,0,0"))
               (rule "andRight" (formula "16"))
               (branch
                  (rule "allRight" (formula "16") (inst "sk=x_0_2"))
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "inEqSimp_geqRight" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_leqRight" (formula "17"))
                  (rule "mul_literals" (formula "1") (term "1,0,0"))
                  (rule "add_literals" (formula "1") (term "0,0"))
                  (rule "add_zero_left" (formula "1") (term "0"))
                  (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "18") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_7") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "6"))
                  (rule "eqSymm" (formula "1") (term "0,1"))
                  (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "19"))
                  (rule "false_to_not_true" (formula "1") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                  (rule "polySimp_elimOne" (formula "3") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "13"))
                  (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                  (rule "mul_literals" (formula "3") (term "0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1"))
                  (rule "polySimp_rightDist" (formula "3") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                  (rule "mul_literals" (formula "3") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                  (rule "boxToDiamond" (formula "1") (term "1"))
                  (rule "double_not" (formula "1") (term "0,0,1"))
                  (rule "notLeft" (formula "1"))
                  (rule "methodBodyExpand" (formula "19") (term "1") (newnames "heapBefore_isSingleDigit_7,savedHeapBefore_isSingleDigit_6"))
                  (rule "simplifyUpdate2" (formula "19") (term "1"))
                  (rule "returnUnfold" (formula "19") (term "1") (inst "#v0=x_2"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_26"))
                  (rule "compound_assignment_3_nonsimple" (formula "19") (term "1"))
                  (rule "ifElseUnfold" (formula "19") (term "1") (inst "#boolv=x_27"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_27"))
                  (rule "compound_assignment_2" (formula "19") (term "1") (inst "#v=x_28"))
                  (rule "variableDeclarationAssign" (formula "19") (term "1"))
                  (rule "variableDeclaration" (formula "19") (term "1") (newnames "x_28"))
                  (rule "greater_equal_than_comparison_simple" (formula "19") (term "1"))
                  (rule "sequentialToParallel2" (formula "19"))
                  (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                  (rule "applyOnElementary" (formula "19") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                  (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                  (rule "compound_assignment_1_new" (formula "19") (term "1"))
                  (rule "sequentialToParallel2" (formula "19"))
                  (rule "simplifyUpdate2" (formula "19"))
                  (rule "simplifyUpdate3" (formula "19") (term "1,0"))
                  (rule "applyOnElementary" (formula "19") (term "1,0"))
                  (rule "applyOnRigidTerm" (formula "19") (term "0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "1,0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "2,0,1,0"))
                  (rule "applyOnRigidFormula" (formula "19") (term "0,0,1,0"))
                  (rule "applyOnPV" (formula "19") (term "0,0,0,1,0"))
                  (rule "simplifyUpdate1" (formula "19") (term "1,0,0,1,0"))
                  (rule "ifthenelse_concrete3" (formula "19") (term "0,0,1,0"))
                  (rule "boolean_not_equal_2" (formula "19") (term "1,0,0,1,0"))
                  (rule "concrete_or_4" (formula "19") (term "0,0,1,0"))
                  (rule "ifElseSplit" (formula "19"))
                  (branch "if x_27 true"
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "applyOnRigidFormula" (formula "1"))
                     (rule "simplifyUpdate1" (formula "1") (term "1"))
                     (rule "applyOnPV" (formula "1") (term "0"))
                     (rule "ifthenelse_concrete4" (formula "1"))
                     (rule "boolean_not_equal_2" (formula "1") (term "1"))
                     (rule "concrete_or_4" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "inEqSimp_geqRight" (formula "19"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "assignment" (formula "20") (term "1"))
                     (rule "sequentialToParallel2" (formula "20"))
                     (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "methodCallReturn" (formula "20") (term "1"))
                     (rule "assignment" (formula "20") (term "1"))
                     (rule "sequentialToParallel2" (formula "20"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                     (rule "applyOnElementary" (formula "20") (term "1,0"))
                     (rule "applyOnPV" (formula "20") (term "0,1,0"))
                     (rule "methodCallEmpty" (formula "20") (term "1"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "emptyModality" (formula "20") (term "1"))
                     (rule "applyOnRigidFormula" (formula "20"))
                     (rule "simplifyUpdate1" (formula "20") (term "1"))
                     (rule "applyOnPV" (formula "20") (term "0"))
                     (rule "boolean_not_equal_2" (formula "20"))
                     (rule "false_right" (formula "20"))
                     (rule "andRight" (formula "25"))
                     (branch
                        (rule "andRight" (formula "25"))
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=x_0_4"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "inEqSimp_leqRight" (formula "25"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "27") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_13") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                           (rule "eqSymm" (formula "1") (term "0,1"))
                           (rule "pullOutSelect" (formula "1") (term "0,1,0") (inst "selectSK=arr_3"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_or_2" (formula "1") (term "0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                           (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "concrete_not_1" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "2") (term "0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "28"))
                           (rule "false_to_not_true" (formula "1") (term "0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "17"))
                           (rule "polySimp_rightDist" (formula "2") (term "0,0"))
                           (rule "mul_literals" (formula "2") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "2"))
                           (rule "polySimp_mulComm0" (formula "2") (term "1"))
                           (rule "polySimp_rightDist" (formula "2") (term "1"))
                           (rule "mul_literals" (formula "2") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "2") (term "1,1"))
                           (rule "boxToDiamond" (formula "1") (term "1"))
                           (rule "double_not" (formula "1") (term "0,0,1"))
                           (rule "notLeft" (formula "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_isSingleDigit_13,savedHeapBefore_isSingleDigit_12"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "returnUnfold" (formula "23") (term "1") (inst "#v0=x_2"))
                           (rule "variableDeclarationAssign" (formula "23") (term "1"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_42"))
                           (rule "compound_assignment_3_nonsimple" (formula "23") (term "1"))
                           (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_43"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_43"))
                           (rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_44"))
                           (rule "variableDeclarationAssign" (formula "23") (term "1"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_44"))
                           (rule "greater_equal_than_comparison_simple" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                           (rule "compound_assignment_1_new" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                           (rule "ifthenelse_concrete3" (formula "23") (term "0,0,1,0"))
                           (rule "boolean_not_equal_2" (formula "23") (term "1,0,0,1,0"))
                           (rule "concrete_or_4" (formula "23") (term "0,0,1,0"))
                           (rule "allLeft" (formula "18") (inst "t=x_0_2"))
                           (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                           (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "18") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_14") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "11"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,0,1"))
                           (rule "leq_literals" (formula "19") (term "0,1"))
                           (rule "concrete_and_2" (formula "19") (term "1"))
                           (rule "concrete_or_4" (formula "19"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "19") (term "0,1"))
                           (rule "concrete_and_2" (formula "19") (term "1"))
                           (rule "concrete_or_4" (formula "19"))
                           (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                           (rule "boxToDiamond" (formula "18") (term "1"))
                           (rule "notLeft" (formula "18"))
                           (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_isSingleDigit_14,savedHeapBefore_isSingleDigit_13"))
                           (rule "simplifyUpdate2" (formula "24") (term "1"))
                           (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x_2"))
                           (rule "variableDeclarationAssign" (formula "24") (term "1"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_45"))
                           (rule "compound_assignment_3_nonsimple" (formula "24") (term "1"))
                           (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=x_46"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_46"))
                           (rule "compound_assignment_2" (formula "24") (term "1") (inst "#v=x_47"))
                           (rule "variableDeclarationAssign" (formula "24") (term "1"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_47"))
                           (rule "greater_equal_than_comparison_simple" (formula "24") (term "1"))
                           (rule "sequentialToParallel2" (formula "24"))
                           (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                           (rule "applyOnElementary" (formula "24") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                           (rule "inEqSimp_contradInEq0" (formula "24") (term "0,0,1,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "24") (term "0,0,0,1,0"))
                           (rule "concrete_and_2" (formula "24") (term "0,0,1,0"))
                           (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                           (rule "compound_assignment_1_new" (formula "24") (term "1"))
                           (rule "sequentialToParallel2" (formula "24"))
                           (rule "simplifyUpdate2" (formula "24"))
                           (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                           (rule "applyOnElementary" (formula "24") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                           (rule "boolean_not_equal_2" (formula "24") (term "0,0,1,0"))
                           (rule "ifthenelse_false" (formula "24") (term "0,1,0"))
                           (rule "ifElseSplit" (formula "25"))
                           (branch "if x_43 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "ifthenelse_concrete4" (formula "1"))
                              (rule "boolean_not_equal_2" (formula "1") (term "1"))
                              (rule "concrete_or_4" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "24"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "methodCallReturn" (formula "26") (term "1"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,1,0"))
                              (rule "methodCallEmpty" (formula "26") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "emptyModality" (formula "26") (term "1"))
                              (rule "applyOnRigidFormula" (formula "26"))
                              (rule "applyOnPV" (formula "26") (term "0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1"))
                              (rule "boolean_not_equal_2" (formula "26"))
                              (rule "false_right" (formula "26"))
                              (rule "allLeft" (formula "20") (inst "t=x_0_4"))
                              (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                              (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "20") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_15") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "12"))
                              (rule "eqSymm" (formula "20") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "21") (term "0,1,0"))
                              (rule "concrete_and_2" (formula "21") (term "1,0"))
                              (rule "concrete_or_4" (formula "21") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "3"))
                              (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                              (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "21") (term "0,0,1"))
                              (rule "leq_literals" (formula "21") (term "0,1"))
                              (rule "concrete_and_2" (formula "21") (term "1"))
                              (rule "concrete_or_4" (formula "21"))
                              (rule "applyEqRigid" (formula "20") (term "1,0,1") (ifseqformula "21"))
                              (rule "boxToDiamond" (formula "20") (term "1"))
                              (rule "notLeft" (formula "20"))
                              (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_isSingleDigit_15,savedHeapBefore_isSingleDigit_14"))
                              (rule "simplifyUpdate2" (formula "26") (term "1"))
                              (rule "returnUnfold" (formula "26") (term "1") (inst "#v0=x_2"))
                              (rule "variableDeclarationAssign" (formula "26") (term "1"))
                              (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_48"))
                              (rule "compound_assignment_3_nonsimple" (formula "26") (term "1"))
                              (rule "ifElseSplit" (formula "27"))
                              (branch "if x_46 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "28"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment" (formula "27") (term "1"))
                                 (rule "sequentialToParallel2" (formula "27"))
                                 (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                 (rule "methodCallReturn" (formula "27") (term "1"))
                                 (rule "assignment" (formula "27") (term "1"))
                                 (rule "sequentialToParallel2" (formula "27"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                 (rule "applyOnElementary" (formula "27") (term "1,0"))
                                 (rule "applyOnPV" (formula "27") (term "0,1,0"))
                                 (rule "methodCallEmpty" (formula "27") (term "1"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "emptyModality" (formula "27") (term "1"))
                                 (rule "notRight" (formula "27"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_46 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "28"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "26"))
                                 (rule "applyOnPV" (formula "26") (term "0"))
                                 (rule "simplifyUpdate1" (formula "26") (term "1"))
                                 (rule "boolean_equal" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                           )
                           (branch "if x_43 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "24"))
                              (rule "applyOnPV" (formula "24") (term "0"))
                              (rule "simplifyUpdate1" (formula "24") (term "1"))
                              (rule "ifthenelse_concrete4" (formula "24"))
                              (rule "boolean_not_equal_2" (formula "24") (term "1"))
                              (rule "concrete_or_4" (formula "24"))
                              (rule "notRight" (formula "24"))
                              (rule "less_equal_than_comparison_simple" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                              (rule "blockEmpty" (formula "26") (term "1"))
                              (rule "methodCallReturn" (formula "26") (term "1"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,1,0"))
                              (rule "methodCallEmpty" (formula "26") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "emptyModality" (formula "26") (term "1"))
                              (rule "applyOnRigidFormula" (formula "26"))
                              (rule "simplifyUpdate1" (formula "26") (term "1"))
                              (rule "applyOnPV" (formula "26") (term "0"))
                              (rule "ifthenelse_concrete3" (formula "26"))
                              (rule "boolean_not_equal_2" (formula "26") (term "1"))
                              (rule "concrete_or_4" (formula "26"))
                              (rule "inEqSimp_leqRight" (formula "26"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                              (rule "leq_literals" (formula "2") (term "0"))
                              (rule "concrete_or_1" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "ifElseSplit" (formula "25"))
                              (branch "if x_46 true"
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_equal" (formula "1"))
                                 (rule "true_left" (formula "1"))
                                 (rule "assignment" (formula "25") (term "1"))
                                 (rule "sequentialToParallel2" (formula "25"))
                                 (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                 (rule "methodCallReturn" (formula "25") (term "1"))
                                 (rule "assignment" (formula "25") (term "1"))
                                 (rule "sequentialToParallel2" (formula "25"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                 (rule "applyOnElementary" (formula "25") (term "1,0"))
                                 (rule "applyOnPV" (formula "25") (term "0,1,0"))
                                 (rule "methodCallEmpty" (formula "25") (term "1"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "emptyModality" (formula "25") (term "1"))
                                 (rule "notRight" (formula "25"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_46 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "25"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1"))
                                 (rule "applyOnPV" (formula "25") (term "0"))
                                 (rule "boolean_equal" (formula "25"))
                                 (rule "closeTrue" (formula "25"))
                              )
                           )
                        )
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=x_26_1"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "inEqSimp_leqRight" (formula "25"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_2"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_or_2" (formula "1") (term "0,0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "replace_known_left" (formula "1") (term "0,1,0,0") (ifseqformula "16"))
                           (rule "concrete_not_1" (formula "1") (term "1,0,0"))
                           (rule "concrete_and_4" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "27"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "2"))
                           (rule "times_zero_1" (formula "14") (term "0,0"))
                           (rule "add_zero_left" (formula "14") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "2"))
                           (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                           (rule "mul_literals" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                           (rule "allLeft" (formula "20") (inst "t=x_26_1"))
                           (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "30"))
                           (rule "concrete_or_4" (formula "20"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "2"))
                           (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1"))
                           (rule "leq_literals" (formula "20") (term "0,1"))
                           (rule "concrete_and_2" (formula "20") (term "1"))
                           (rule "concrete_or_4" (formula "20"))
                           (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "20"))
                           (rule "andLeft" (formula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "1"))
                           (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
                           (rule "add_literals" (formula "1") (term "1,1,0"))
                           (rule "times_zero_1" (formula "1") (term "1,0"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "leq_literals" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch
                        (rule "orRight" (formula "25"))
                        (rule "allLeft" (formula "15") (inst "t=x_0_2"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                        (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_12") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
                        (rule "eqSymm" (formula "15") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "16") (term "0,1,0"))
                        (rule "concrete_and_2" (formula "16") (term "1,0"))
                        (rule "concrete_or_4" (formula "16") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                        (rule "add_literals" (formula "16") (term "0,0,1"))
                        (rule "leq_literals" (formula "16") (term "0,1"))
                        (rule "concrete_and_2" (formula "16") (term "1"))
                        (rule "concrete_or_4" (formula "16"))
                        (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
                        (rule "boxToDiamond" (formula "15") (term "1"))
                        (rule "notLeft" (formula "15"))
                        (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_isSingleDigit_12,savedHeapBefore_isSingleDigit_11"))
                        (rule "simplifyUpdate2" (formula "21") (term "1"))
                        (rule "returnUnfold" (formula "21") (term "1") (inst "#v0=x_2"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_39"))
                        (rule "compound_assignment_3_nonsimple" (formula "21") (term "1"))
                        (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x_40"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_40"))
                        (rule "compound_assignment_2" (formula "21") (term "1") (inst "#v=x_41"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_41"))
                        (rule "greater_equal_than_comparison_simple" (formula "21") (term "1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "applyOnElementary" (formula "21") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                        (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                        (rule "inEqSimp_contradInEq0" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "21") (term "0,0,0,1,0"))
                        (rule "concrete_and_2" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                        (rule "compound_assignment_1_new" (formula "21") (term "1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "applyOnElementary" (formula "21") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                        (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                        (rule "boolean_not_equal_2" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                        (rule "ifElseSplit" (formula "21"))
                        (branch "if x_40 true"
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "simplifyUpdate2" (formula "22"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_equal" (formula "1"))
                           (rule "true_left" (formula "1"))
                           (rule "assignment" (formula "21") (term "1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "methodCallReturn" (formula "21") (term "1"))
                           (rule "assignment" (formula "21") (term "1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "applyOnElementary" (formula "21") (term "1,0"))
                           (rule "applyOnPV" (formula "21") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "21") (term "1"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "emptyModality" (formula "21") (term "1"))
                           (rule "notRight" (formula "21"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_40 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "22"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "21"))
                           (rule "applyOnPV" (formula "21") (term "0"))
                           (rule "simplifyUpdate1" (formula "21") (term "1"))
                           (rule "boolean_equal" (formula "21"))
                           (rule "closeTrue" (formula "21"))
                        )
                     )
                  )
                  (branch "if x_27 false"
                     (rule "false_to_not_true" (formula "1") (term "1"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "simplifyUpdate2" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "applyOnRigidFormula" (formula "19"))
                     (rule "simplifyUpdate1" (formula "19") (term "1"))
                     (rule "applyOnPV" (formula "19") (term "0"))
                     (rule "ifthenelse_concrete4" (formula "19"))
                     (rule "boolean_not_equal_2" (formula "19") (term "1"))
                     (rule "concrete_or_4" (formula "19"))
                     (rule "notRight" (formula "19"))
                     (rule "less_equal_than_comparison_simple" (formula "20") (term "1"))
                     (rule "sequentialToParallel2" (formula "20"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                     (rule "applyOnElementary" (formula "20") (term "1,0"))
                     (rule "applyOnRigidTerm" (formula "20") (term "0,1,0"))
                     (rule "simplifyUpdate1" (formula "20") (term "1,0,1,0"))
                     (rule "simplifyUpdate1" (formula "20") (term "2,0,1,0"))
                     (rule "applyOnRigidFormula" (formula "20") (term "0,0,1,0"))
                     (rule "simplifyUpdate1" (formula "20") (term "1,0,0,1,0"))
                     (rule "applyOnPV" (formula "20") (term "0,0,0,1,0"))
                     (rule "blockEmpty" (formula "20") (term "1"))
                     (rule "methodCallReturn" (formula "20") (term "1"))
                     (rule "assignment" (formula "20") (term "1"))
                     (rule "sequentialToParallel2" (formula "20"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "simplifyUpdate3" (formula "20") (term "1,0"))
                     (rule "applyOnElementary" (formula "20") (term "1,0"))
                     (rule "applyOnPV" (formula "20") (term "0,1,0"))
                     (rule "methodCallEmpty" (formula "20") (term "1"))
                     (rule "simplifyUpdate2" (formula "20"))
                     (rule "emptyModality" (formula "20") (term "1"))
                     (rule "applyOnRigidFormula" (formula "20"))
                     (rule "applyOnPV" (formula "20") (term "0"))
                     (rule "simplifyUpdate1" (formula "20") (term "1"))
                     (rule "ifthenelse_concrete3" (formula "20"))
                     (rule "boolean_not_equal_2" (formula "20") (term "1"))
                     (rule "concrete_or_4" (formula "20"))
                     (rule "inEqSimp_leqRight" (formula "20"))
                     (rule "mul_literals" (formula "1") (term "1,0,0"))
                     (rule "add_literals" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                     (rule "leq_literals" (formula "2") (term "0"))
                     (rule "concrete_or_1" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "andRight" (formula "25"))
                     (branch
                        (rule "andRight" (formula "25"))
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=x_0_3"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "26"))
                           (rule "mul_literals" (formula "1") (term "1,0,0"))
                           (rule "add_literals" (formula "1") (term "0,0"))
                           (rule "add_zero_left" (formula "1") (term "0"))
                           (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "27") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_9") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "10"))
                           (rule "eqSymm" (formula "1") (term "0,1"))
                           (rule "pullOutSelect" (formula "1") (term "0,1,0") (inst "selectSK=arr_1"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_or_2" (formula "1") (term "0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "26"))
                           (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "17"))
                           (rule "concrete_not_1" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "2") (term "0,1,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "28"))
                           (rule "false_to_not_true" (formula "1") (term "0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                           (rule "polySimp_elimOne" (formula "3") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "17"))
                           (rule "polySimp_rightDist" (formula "3") (term "0,0"))
                           (rule "mul_literals" (formula "3") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "3"))
                           (rule "polySimp_mulComm0" (formula "3") (term "1"))
                           (rule "polySimp_rightDist" (formula "3") (term "1"))
                           (rule "mul_literals" (formula "3") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "3") (term "1,1"))
                           (rule "boxToDiamond" (formula "1") (term "1"))
                           (rule "double_not" (formula "1") (term "0,0,1"))
                           (rule "notLeft" (formula "1"))
                           (rule "methodBodyExpand" (formula "23") (term "1") (newnames "heapBefore_isSingleDigit_9,savedHeapBefore_isSingleDigit_8"))
                           (rule "simplifyUpdate2" (formula "23") (term "1"))
                           (rule "returnUnfold" (formula "23") (term "1") (inst "#v0=x_2"))
                           (rule "variableDeclarationAssign" (formula "23") (term "1"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_32"))
                           (rule "compound_assignment_3_nonsimple" (formula "23") (term "1"))
                           (rule "ifElseUnfold" (formula "23") (term "1") (inst "#boolv=x_33"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_33"))
                           (rule "compound_assignment_2" (formula "23") (term "1") (inst "#v=x_34"))
                           (rule "variableDeclarationAssign" (formula "23") (term "1"))
                           (rule "variableDeclaration" (formula "23") (term "1") (newnames "x_34"))
                           (rule "greater_equal_than_comparison_simple" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                           (rule "compound_assignment_1_new" (formula "23") (term "1"))
                           (rule "sequentialToParallel2" (formula "23"))
                           (rule "simplifyUpdate2" (formula "23"))
                           (rule "simplifyUpdate3" (formula "23") (term "1,0"))
                           (rule "applyOnElementary" (formula "23") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "23") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "23") (term "0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "23") (term "1,0,0,1,0"))
                           (rule "applyOnPV" (formula "23") (term "0,0,0,1,0"))
                           (rule "ifthenelse_concrete3" (formula "23") (term "0,0,1,0"))
                           (rule "boolean_not_equal_2" (formula "23") (term "1,0,0,1,0"))
                           (rule "concrete_or_4" (formula "23") (term "0,0,1,0"))
                           (rule "allLeft" (formula "18") (inst "t=x_0_2"))
                           (rule "inEqSimp_commuteGeq" (formula "18") (term "1"))
                           (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "18") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_10") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "11"))
                           (rule "eqSymm" (formula "18") (term "0,1"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "19") (term "0,1,0"))
                           (rule "concrete_and_2" (formula "19") (term "1,0"))
                           (rule "concrete_or_4" (formula "19") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "19") (term "1") (ifseqformula "7"))
                           (rule "inEqSimp_homoInEq1" (formula "19") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "19") (term "0,0,1"))
                           (rule "add_literals" (formula "19") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "19") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "19") (term "0,0,1"))
                           (rule "leq_literals" (formula "19") (term "0,1"))
                           (rule "concrete_and_2" (formula "19") (term "1"))
                           (rule "concrete_or_4" (formula "19"))
                           (rule "applyEqRigid" (formula "18") (term "1,0,1") (ifseqformula "19"))
                           (rule "boxToDiamond" (formula "18") (term "1"))
                           (rule "notLeft" (formula "18"))
                           (rule "methodBodyExpand" (formula "24") (term "1") (newnames "heapBefore_isSingleDigit_10,savedHeapBefore_isSingleDigit_9"))
                           (rule "simplifyUpdate2" (formula "24") (term "1"))
                           (rule "returnUnfold" (formula "24") (term "1") (inst "#v0=x_2"))
                           (rule "variableDeclarationAssign" (formula "24") (term "1"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_35"))
                           (rule "compound_assignment_3_nonsimple" (formula "24") (term "1"))
                           (rule "ifElseUnfold" (formula "24") (term "1") (inst "#boolv=x_36"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_36"))
                           (rule "compound_assignment_2" (formula "24") (term "1") (inst "#v=x_37"))
                           (rule "variableDeclarationAssign" (formula "24") (term "1"))
                           (rule "variableDeclaration" (formula "24") (term "1") (newnames "x_37"))
                           (rule "greater_equal_than_comparison_simple" (formula "24") (term "1"))
                           (rule "sequentialToParallel2" (formula "24"))
                           (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                           (rule "applyOnElementary" (formula "24") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                           (rule "inEqSimp_subsumption1" (formula "24") (term "0,0,1,0") (ifseqformula "4"))
                           (rule "leq_literals" (formula "24") (term "0,0,0,1,0"))
                           (rule "concrete_or_1" (formula "24") (term "0,0,1,0"))
                           (rule "ifthenelse_true" (formula "24") (term "0,1,0"))
                           (rule "compound_assignment_1_new" (formula "24") (term "1"))
                           (rule "sequentialToParallel2" (formula "24"))
                           (rule "simplifyUpdate2" (formula "24"))
                           (rule "simplifyUpdate3" (formula "24") (term "1,0"))
                           (rule "applyOnElementary" (formula "24") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "24") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "2,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "24") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "24") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "24") (term "1,0,0,1,0"))
                           (rule "boolean_equal" (formula "24") (term "0,0,1,0"))
                           (rule "ifthenelse_true" (formula "24") (term "0,1,0"))
                           (rule "ifElseSplit" (formula "25"))
                           (branch "if x_33 true"
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "applyOnRigidFormula" (formula "1"))
                              (rule "simplifyUpdate1" (formula "1") (term "1"))
                              (rule "applyOnPV" (formula "1") (term "0"))
                              (rule "ifthenelse_concrete4" (formula "1"))
                              (rule "boolean_not_equal_2" (formula "1") (term "1"))
                              (rule "concrete_or_4" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "inEqSimp_geqRight" (formula "24"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "methodCallReturn" (formula "26") (term "1"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,1,0"))
                              (rule "methodCallEmpty" (formula "26") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "emptyModality" (formula "26") (term "1"))
                              (rule "applyOnRigidFormula" (formula "26"))
                              (rule "applyOnPV" (formula "26") (term "0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1"))
                              (rule "boolean_not_equal_2" (formula "26"))
                              (rule "false_right" (formula "26"))
                              (rule "allLeft" (formula "20") (inst "t=x_0_3"))
                              (rule "inEqSimp_commuteGeq" (formula "20") (term "1"))
                              (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "20") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_11") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "12"))
                              (rule "eqSymm" (formula "20") (term "0,1"))
                              (rule "inEqSimp_contradInEq1" (formula "21") (term "1,0") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "21") (term "0,1,0"))
                              (rule "concrete_and_2" (formula "21") (term "1,0"))
                              (rule "concrete_or_4" (formula "21") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "21") (term "1") (ifseqformula "4"))
                              (rule "inEqSimp_homoInEq1" (formula "21") (term "0,1"))
                              (rule "polySimp_pullOutFactor1b" (formula "21") (term "0,0,1"))
                              (rule "add_literals" (formula "21") (term "1,1,0,0,1"))
                              (rule "times_zero_1" (formula "21") (term "1,0,0,1"))
                              (rule "add_zero_right" (formula "21") (term "0,0,1"))
                              (rule "leq_literals" (formula "21") (term "0,1"))
                              (rule "concrete_and_2" (formula "21") (term "1"))
                              (rule "concrete_or_4" (formula "21"))
                              (rule "applyEqRigid" (formula "20") (term "1,0,1") (ifseqformula "21"))
                              (rule "boxToDiamond" (formula "20") (term "1"))
                              (rule "notLeft" (formula "20"))
                              (rule "methodBodyExpand" (formula "26") (term "1") (newnames "heapBefore_isSingleDigit_11,savedHeapBefore_isSingleDigit_10"))
                              (rule "simplifyUpdate2" (formula "26") (term "1"))
                              (rule "returnUnfold" (formula "26") (term "1") (inst "#v0=x_2"))
                              (rule "variableDeclarationAssign" (formula "26") (term "1"))
                              (rule "variableDeclaration" (formula "26") (term "1") (newnames "x_38"))
                              (rule "compound_assignment_3_nonsimple" (formula "26") (term "1"))
                              (rule "ifElseSplit" (formula "27"))
                              (branch "if x_36 true"
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "simplifyUpdate2" (formula "28"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_36 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "28"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "26"))
                                 (rule "applyOnPV" (formula "26") (term "0"))
                                 (rule "simplifyUpdate1" (formula "26") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "26"))
                                 (rule "false_right" (formula "26"))
                                 (rule "less_equal_than_comparison_simple" (formula "27") (term "1"))
                                 (rule "sequentialToParallel2" (formula "27"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                 (rule "applyOnElementary" (formula "27") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "27") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "27") (term "2,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "27") (term "1,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "27") (term "0,0,1,0"))
                                 (rule "applyOnPV" (formula "27") (term "0,0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "27") (term "1,0,0,1,0"))
                                 (rule "blockEmpty" (formula "27") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "27") (term "0,0,1,0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "27") (term "0,0,0,1,0"))
                                 (rule "concrete_and_2" (formula "27") (term "0,0,1,0"))
                                 (rule "ifthenelse_false" (formula "27") (term "0,1,0"))
                                 (rule "methodCallReturn" (formula "27") (term "1"))
                                 (rule "assignment" (formula "27") (term "1"))
                                 (rule "sequentialToParallel2" (formula "27"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "simplifyUpdate3" (formula "27") (term "1,0"))
                                 (rule "applyOnElementary" (formula "27") (term "1,0"))
                                 (rule "applyOnPV" (formula "27") (term "0,1,0"))
                                 (rule "methodCallEmpty" (formula "27") (term "1"))
                                 (rule "simplifyUpdate2" (formula "27"))
                                 (rule "emptyModality" (formula "27") (term "1"))
                                 (rule "notRight" (formula "27"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "if x_33 false"
                              (rule "false_to_not_true" (formula "1") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "applyOnRigidFormula" (formula "24"))
                              (rule "applyOnPV" (formula "24") (term "0"))
                              (rule "simplifyUpdate1" (formula "24") (term "1"))
                              (rule "ifthenelse_concrete4" (formula "24"))
                              (rule "boolean_not_equal_2" (formula "24") (term "1"))
                              (rule "concrete_or_4" (formula "24"))
                              (rule "notRight" (formula "24"))
                              (rule "less_equal_than_comparison_simple" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnRigidTerm" (formula "26") (term "0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1,0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "2,0,1,0"))
                              (rule "applyOnRigidFormula" (formula "26") (term "0,0,1,0"))
                              (rule "simplifyUpdate1" (formula "26") (term "1,0,0,1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,0,0,1,0"))
                              (rule "blockEmpty" (formula "26") (term "1"))
                              (rule "methodCallReturn" (formula "26") (term "1"))
                              (rule "assignment" (formula "26") (term "1"))
                              (rule "sequentialToParallel2" (formula "26"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "simplifyUpdate3" (formula "26") (term "1,0"))
                              (rule "applyOnElementary" (formula "26") (term "1,0"))
                              (rule "applyOnPV" (formula "26") (term "0,1,0"))
                              (rule "methodCallEmpty" (formula "26") (term "1"))
                              (rule "simplifyUpdate2" (formula "26"))
                              (rule "emptyModality" (formula "26") (term "1"))
                              (rule "applyOnRigidFormula" (formula "26"))
                              (rule "simplifyUpdate1" (formula "26") (term "1"))
                              (rule "applyOnPV" (formula "26") (term "0"))
                              (rule "ifthenelse_concrete3" (formula "26"))
                              (rule "boolean_not_equal_2" (formula "26") (term "1"))
                              (rule "concrete_or_4" (formula "26"))
                              (rule "inEqSimp_leqRight" (formula "26"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
                              (rule "leq_literals" (formula "2") (term "0"))
                              (rule "concrete_or_1" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "ifElseSplit" (formula "25"))
                              (branch "if x_36 true"
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                              (branch "if x_36 false"
                                 (rule "false_to_not_true" (formula "1") (term "1"))
                                 (rule "simplifyUpdate2" (formula "26"))
                                 (rule "simplifyUpdate2" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "applyOnRigidFormula" (formula "25"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1"))
                                 (rule "applyOnPV" (formula "25") (term "0"))
                                 (rule "boolean_not_equal_2" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "less_equal_than_comparison_simple" (formula "25") (term "1"))
                                 (rule "sequentialToParallel2" (formula "25"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                 (rule "applyOnElementary" (formula "25") (term "1,0"))
                                 (rule "applyOnRigidTerm" (formula "25") (term "0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "2,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1,0,1,0"))
                                 (rule "applyOnRigidFormula" (formula "25") (term "0,0,1,0"))
                                 (rule "simplifyUpdate1" (formula "25") (term "1,0,0,1,0"))
                                 (rule "applyOnPV" (formula "25") (term "0,0,0,1,0"))
                                 (rule "blockEmpty" (formula "25") (term "1"))
                                 (rule "inEqSimp_contradInEq1" (formula "25") (term "0,0,1,0") (ifseqformula "5"))
                                 (rule "qeq_literals" (formula "25") (term "0,0,0,1,0"))
                                 (rule "concrete_and_2" (formula "25") (term "0,0,1,0"))
                                 (rule "ifthenelse_false" (formula "25") (term "0,1,0"))
                                 (rule "methodCallReturn" (formula "25") (term "1"))
                                 (rule "assignment" (formula "25") (term "1"))
                                 (rule "sequentialToParallel2" (formula "25"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "simplifyUpdate3" (formula "25") (term "1,0"))
                                 (rule "applyOnElementary" (formula "25") (term "1,0"))
                                 (rule "applyOnPV" (formula "25") (term "0,1,0"))
                                 (rule "methodCallEmpty" (formula "25") (term "1"))
                                 (rule "simplifyUpdate2" (formula "25"))
                                 (rule "emptyModality" (formula "25") (term "1"))
                                 (rule "notRight" (formula "25"))
                                 (rule "applyOnRigidFormula" (formula "1"))
                                 (rule "applyOnPV" (formula "1") (term "0"))
                                 (rule "simplifyUpdate1" (formula "1") (term "1"))
                                 (rule "boolean_not_equal_2" (formula "1"))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                        (branch
                           (rule "allRight" (formula "25") (inst "sk=x_26_0"))
                           (rule "orRight" (formula "25"))
                           (rule "orRight" (formula "25"))
                           (rule "inEqSimp_geqRight" (formula "26"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                           (rule "polySimp_addComm1" (formula "1") (term "0"))
                           (rule "inEqSimp_leqRight" (formula "26"))
                           (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                           (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                           (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                           (rule "add_literals" (formula "1") (term "0,0,0"))
                           (rule "add_zero_left" (formula "1") (term "0,0"))
                           (rule "polySimp_addComm0" (formula "1") (term "0"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "2"))
                           (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                           (rule "polySimp_elimOne" (formula "2") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "pullOutSelect" (formula "27") (term "0") (inst "selectSK=arr_0"))
                           (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "21"))
                           (rule "elementOfFreshLocs" (formula "1") (term "1,0,0"))
                           (rule "elementOfEmpty" (formula "1") (term "0,0,0,0"))
                           (rule "concrete_and_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_or_2" (formula "1") (term "0,0"))
                           (rule "eqSymm" (formula "28"))
                           (rule "replace_known_right" (formula "1") (term "0,0,0,0") (ifseqformula "25"))
                           (rule "concrete_not_2" (formula "1") (term "0,0,0"))
                           (rule "concrete_and_1" (formula "1") (term "0,0"))
                           (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "16"))
                           (rule "concrete_not_1" (formula "1") (term "0,0"))
                           (rule "ifthenelse_false" (formula "1") (term "0"))
                           (rule "applyEqReverse" (formula "28") (term "1") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "eqSymm" (formula "27"))
                           (rule "inEqSimp_exactShadow3" (formula "14") (ifseqformula "1"))
                           (rule "times_zero_1" (formula "14") (term "0,0"))
                           (rule "add_zero_left" (formula "14") (term "0"))
                           (rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "0,0"))
                           (rule "mul_literals" (formula "6") (term "0,0,0"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "6"))
                           (rule "polySimp_mulComm0" (formula "6") (term "1"))
                           (rule "polySimp_rightDist" (formula "6") (term "1"))
                           (rule "mul_literals" (formula "6") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                           (rule "allLeft" (formula "20") (inst "t=x_26_0"))
                           (rule "replace_known_right" (formula "20") (term "1") (ifseqformula "30"))
                           (rule "concrete_or_4" (formula "20"))
                           (rule "inEqSimp_commuteGeq" (formula "20") (term "0"))
                           (rule "inEqSimp_homoInEq0" (formula "20") (term "1"))
                           (rule "polySimp_addComm1" (formula "20") (term "0,1"))
                           (rule "inEqSimp_sepPosMonomial1" (formula "20") (term "1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (term "1") (ifseqformula "1"))
                           (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0,0,1"))
                           (rule "add_literals" (formula "20") (term "1,1,0,0,1"))
                           (rule "times_zero_1" (formula "20") (term "1,0,0,1"))
                           (rule "add_zero_right" (formula "20") (term "0,0,1"))
                           (rule "leq_literals" (formula "20") (term "0,1"))
                           (rule "concrete_and_2" (formula "20") (term "1"))
                           (rule "concrete_or_4" (formula "20"))
                           (rule "inEqSimp_contradInEq1" (formula "20") (ifseqformula "2"))
                           (rule "andLeft" (formula "20"))
                           (rule "inEqSimp_homoInEq1" (formula "20"))
                           (rule "polySimp_pullOutFactor1b" (formula "20") (term "0"))
                           (rule "add_literals" (formula "20") (term "1,1,0"))
                           (rule "times_zero_1" (formula "20") (term "1,0"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "leq_literals" (formula "20"))
                           (rule "closeFalse" (formula "20"))
                        )
                     )
                     (branch
                        (rule "orRight" (formula "25"))
                        (rule "allLeft" (formula "15") (inst "t=x_0_2"))
                        (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
                        (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_8") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
                        (rule "eqSymm" (formula "15") (term "0,1"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "16") (term "0,1,0"))
                        (rule "concrete_and_2" (formula "16") (term "1,0"))
                        (rule "concrete_or_4" (formula "16") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
                        (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
                        (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
                        (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
                        (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
                        (rule "add_literals" (formula "16") (term "0,0,1"))
                        (rule "leq_literals" (formula "16") (term "0,1"))
                        (rule "concrete_and_2" (formula "16") (term "1"))
                        (rule "concrete_or_4" (formula "16"))
                        (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
                        (rule "boxToDiamond" (formula "15") (term "1"))
                        (rule "notLeft" (formula "15"))
                        (rule "methodBodyExpand" (formula "21") (term "1") (newnames "heapBefore_isSingleDigit_8,savedHeapBefore_isSingleDigit_7"))
                        (rule "simplifyUpdate2" (formula "21") (term "1"))
                        (rule "returnUnfold" (formula "21") (term "1") (inst "#v0=x_2"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_29"))
                        (rule "compound_assignment_3_nonsimple" (formula "21") (term "1"))
                        (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x_30"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_30"))
                        (rule "compound_assignment_2" (formula "21") (term "1") (inst "#v=x_31"))
                        (rule "variableDeclarationAssign" (formula "21") (term "1"))
                        (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_31"))
                        (rule "greater_equal_than_comparison_simple" (formula "21") (term "1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "applyOnElementary" (formula "21") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                        (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                        (rule "inEqSimp_subsumption1" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
                        (rule "leq_literals" (formula "21") (term "0,0,0,1,0"))
                        (rule "concrete_or_1" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_true" (formula "21") (term "0,1,0"))
                        (rule "compound_assignment_1_new" (formula "21") (term "1"))
                        (rule "sequentialToParallel2" (formula "21"))
                        (rule "simplifyUpdate2" (formula "21"))
                        (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                        (rule "applyOnElementary" (formula "21") (term "1,0"))
                        (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                        (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                        (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                        (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                        (rule "boolean_equal" (formula "21") (term "0,0,1,0"))
                        (rule "ifthenelse_true" (formula "21") (term "0,1,0"))
                        (rule "ifElseSplit" (formula "21"))
                        (branch "if x_30 true"
                           (rule "simplifyUpdate2" (formula "22"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "if x_30 false"
                           (rule "false_to_not_true" (formula "1") (term "1"))
                           (rule "simplifyUpdate2" (formula "22"))
                           (rule "simplifyUpdate2" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyOnRigidFormula" (formula "21"))
                           (rule "applyOnPV" (formula "21") (term "0"))
                           (rule "simplifyUpdate1" (formula "21") (term "1"))
                           (rule "boolean_not_equal_2" (formula "21"))
                           (rule "false_right" (formula "21"))
                           (rule "less_equal_than_comparison_simple" (formula "21") (term "1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "applyOnElementary" (formula "21") (term "1,0"))
                           (rule "applyOnRigidTerm" (formula "21") (term "0,1,0"))
                           (rule "simplifyUpdate1" (formula "21") (term "2,0,1,0"))
                           (rule "simplifyUpdate1" (formula "21") (term "1,0,1,0"))
                           (rule "applyOnRigidFormula" (formula "21") (term "0,0,1,0"))
                           (rule "applyOnPV" (formula "21") (term "0,0,0,1,0"))
                           (rule "simplifyUpdate1" (formula "21") (term "1,0,0,1,0"))
                           (rule "blockEmpty" (formula "21") (term "1"))
                           (rule "inEqSimp_contradInEq1" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "21") (term "0,0,0,1,0"))
                           (rule "concrete_and_2" (formula "21") (term "0,0,1,0"))
                           (rule "ifthenelse_false" (formula "21") (term "0,1,0"))
                           (rule "methodCallReturn" (formula "21") (term "1"))
                           (rule "assignment" (formula "21") (term "1"))
                           (rule "sequentialToParallel2" (formula "21"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "simplifyUpdate3" (formula "21") (term "1,0"))
                           (rule "applyOnElementary" (formula "21") (term "1,0"))
                           (rule "applyOnPV" (formula "21") (term "0,1,0"))
                           (rule "methodCallEmpty" (formula "21") (term "1"))
                           (rule "simplifyUpdate2" (formula "21"))
                           (rule "emptyModality" (formula "21") (term "1"))
                           (rule "notRight" (formula "21"))
                           (rule "applyOnRigidFormula" (formula "1"))
                           (rule "simplifyUpdate1" (formula "1") (term "1"))
                           (rule "applyOnPV" (formula "1") (term "0"))
                           (rule "boolean_not_equal_2" (formula "1"))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                  )
               )
               (branch
                  (rule "allRight" (formula "16") (inst "sk=x_23_0"))
                  (rule "orRight" (formula "16"))
                  (rule "orRight" (formula "16"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                  (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                  (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                  (rule "add_literals" (formula "1") (term "0,0,0"))
                  (rule "add_zero_left" (formula "1") (term "0,0"))
                  (rule "polySimp_addComm0" (formula "1") (term "0"))
                  (rule "inEqSimp_geqRight" (formula "17"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                  (rule "polySimp_addComm1" (formula "1") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "2"))
                  (rule "polySimp_mulLiterals" (formula "2") (term "0"))
                  (rule "polySimp_elimOne" (formula "2") (term "0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
                  (rule "times_zero_1" (formula "10") (term "0,0"))
                  (rule "add_zero_left" (formula "10") (term "0"))
                  (rule "allLeft" (formula "15") (inst "t=x_23_0"))
                  (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "20"))
                  (rule "concrete_or_4" (formula "15"))
                  (rule "inEqSimp_commuteGeq" (formula "15") (term "0"))
                  (rule "inEqSimp_homoInEq0" (formula "15") (term "1"))
                  (rule "polySimp_addComm1" (formula "15") (term "0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1"))
                  (rule "mul_literals" (formula "15") (term "0,1,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,1"))
                  (rule "inEqSimp_contradInEq1" (formula "15") (term "0") (ifseqformula "1"))
                  (rule "inEqSimp_homoInEq1" (formula "15") (term "0,0"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0,0,0"))
                  (rule "add_literals" (formula "15") (term "1,1,0,0,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0,0,0"))
                  (rule "add_zero_right" (formula "15") (term "0,0,0"))
                  (rule "leq_literals" (formula "15") (term "0,0"))
                  (rule "concrete_and_2" (formula "15") (term "0"))
                  (rule "concrete_or_2" (formula "15"))
                  (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "2"))
                  (rule "andLeft" (formula "15"))
                  (rule "inEqSimp_homoInEq1" (formula "15"))
                  (rule "polySimp_pullOutFactor1b" (formula "15") (term "0"))
                  (rule "add_literals" (formula "15") (term "1,1,0"))
                  (rule "times_zero_1" (formula "15") (term "1,0"))
                  (rule "add_zero_right" (formula "15") (term "0"))
                  (rule "leq_literals" (formula "15"))
                  (rule "closeFalse" (formula "15"))
               )
            )
            (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
               (rule "instanceof_static_type" (formula "21") (term "0,1,1"))
               (rule "boolean_equal" (formula "21") (term "1,1"))
               (rule "concrete_or_3" (formula "21") (term "1"))
               (rule "closeTrue" (formula "21"))
            )
         )
         (branch "if exc_0 instanceof java.lang.Throwable false"
            (rule "instanceof_static_type" (formula "1") (term "2,0,1"))
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "ifthenelse_concrete4" (formula "1") (term "0,1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1,0,1"))
            (rule "concrete_or_4" (formula "1") (term "0,1"))
            (rule "double_not" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "close" (formula "18") (ifseqformula "1"))
         )
      )
   )
)
(branch "Pre (isSingleDigit)"
   (rule "inInt" (formula "15") (term "1,1,1,1"))
   (rule "concrete_and_3" (formula "15") (term "1,1,1"))
   (rule "simplifyUpdate2" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "1"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "1"))
   (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "1"))
   (rule "concrete_and_3" (formula "15"))
   (rule "orRight" (formula "15"))
   (rule "applyOnRigidFormula" (formula "16"))
   (rule "simplifyUpdate2" (formula "16") (term "1"))
   (rule "applyOnRigidFormula" (formula "15"))
   (rule "simplifyUpdate2" (formula "15") (term "1"))
   (rule "applyOnRigidFormula" (formula "16") (term "0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "1,0"))
   (rule "applyOnPV" (formula "15") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,1,0"))
   (rule "applyOnRigidFormula" (formula "15") (term "0,0"))
   (rule "simplifyUpdate1" (formula "15") (term "1,0,0"))
   (rule "applyOnPV" (formula "15") (term "0,0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "1,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,1,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,1,0,0"))
   (rule "applyOnRigidFormula" (formula "16") (term "0,0,0"))
   (rule "applyOnPV" (formula "16") (term "0,0,0,0"))
   (rule "simplifyUpdate1" (formula "16") (term "1,0,0,0"))
   (rule "Class_invariant_axiom_for_NumericTextBox" (formula "15") (term "1") (inst "x=x_3") (inst "x_0=x_0") (ifseqformula "3"))
   (rule "inInt" (formula "15") (term "1,0,0,1,1"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1,1"))
   (rule "inInt" (formula "15") (term "1,0,0,1,0,1"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1,0,1"))
   (rule "replace_known_left" (formula "15") (term "1,1,0,0,1") (ifseqformula "8"))
   (rule "concrete_and_3" (formula "15") (term "1,0,0,1"))
   (rule "replace_known_left" (formula "15") (term "1,0,0,1") (ifseqformula "7"))
   (rule "concrete_and_3" (formula "15") (term "0,0,1"))
   (rule "replace_known_right" (formula "15") (term "0,0,0,1") (ifseqformula "11"))
   (rule "concrete_not_2" (formula "15") (term "0,0,1"))
   (rule "concrete_and_1" (formula "15") (term "0,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,1"))
   (rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "15") (term "0,1,1"))
   (rule "nnf_imp2or" (formula "15") (term "0,0,1"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1"))
   (rule "nnf_notAnd" (formula "15") (term "0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,1"))
   (rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "15") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,1"))
   (rule "mul_literals" (formula "15") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1"))
   (rule "Class_invariant_axiom_for_NumericTextBox" (formula "16") (term "1") (inst "x=x_3") (inst "x_0=x_0") (ifseqformula "3"))
   (rule "inInt" (formula "16") (term "1,0,0,1,1"))
   (rule "concrete_and_3" (formula "16") (term "0,0,1,1"))
   (rule "inInt" (formula "16") (term "1,0,0,1,0,1"))
   (rule "concrete_and_3" (formula "16") (term "0,0,1,0,1"))
   (rule "replace_known_left" (formula "16") (term "1,1,0,0,1") (ifseqformula "8"))
   (rule "concrete_and_3" (formula "16") (term "1,0,0,1"))
   (rule "replace_known_left" (formula "16") (term "1,0,0,1") (ifseqformula "7"))
   (rule "concrete_and_3" (formula "16") (term "0,0,1"))
   (rule "replace_known_right" (formula "16") (term "0,0,0,1") (ifseqformula "11"))
   (rule "concrete_not_2" (formula "16") (term "0,0,1"))
   (rule "concrete_and_1" (formula "16") (term "0,1"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,1,1"))
   (rule "inEqSimp_ltToLeq" (formula "16") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,0,0,0,1"))
   (rule "inEqSimp_commuteLeq" (formula "16") (term "0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,1,1"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,1,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "0,1,1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,1,0,0,0,1"))
   (rule "nnf_imp2or" (formula "16") (term "0,1,1"))
   (rule "nnf_imp2or" (formula "16") (term "0,0,1"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,1,1"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,1,1"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,1,1"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,1,1"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,1,1"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1,1"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,0,1,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,1,1"))
   (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,1,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,0,1,1"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,0,1,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1,1"))
   (rule "nnf_notAnd" (formula "16") (term "0,0,0,1"))
   (rule "inEqSimp_notGeq" (formula "16") (term "0,0,0,0,1"))
   (rule "times_zero_1" (formula "16") (term "1,0,0,0,0,0,0,1"))
   (rule "add_zero_right" (formula "16") (term "0,0,0,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_notLeq" (formula "16") (term "1,0,0,0,1"))
   (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1,0,0,0,1"))
   (rule "mul_literals" (formula "16") (term "0,1,0,0,1,0,0,0,1"))
   (rule "polySimp_addAssoc" (formula "16") (term "0,0,1,0,0,0,1"))
   (rule "add_literals" (formula "16") (term "0,0,0,1,0,0,0,1"))
   (rule "add_zero_left" (formula "16") (term "0,0,1,0,0,0,1"))
   (rule "inEqSimp_sepPosMonomial1" (formula "16") (term "1,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,0,1"))
   (rule "ifElseUnfold" (formula "12") (term "1") (inst "#boolv=x_3"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_3"))
   (rule "arrayLengthIsAShort" (formula "8") (term "1"))
   (rule "inShort" (formula "8"))
   (rule "true_left" (formula "8"))
   (rule "arrayLengthNotNegative" (formula "8") (term "1"))
   (rule "compound_assignment_2" (formula "12") (term "1") (inst "#v=x_4"))
   (rule "variableDeclarationAssign" (formula "12") (term "1"))
   (rule "variableDeclaration" (formula "12") (term "1") (newnames "x_4"))
   (rule "greater_equal_than_comparison_simple" (formula "12") (term "1"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "applyOnElementary" (formula "12") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
   (rule "compound_assignment_1_new" (formula "12") (term "1"))
   (rule "sequentialToParallel2" (formula "12"))
   (rule "simplifyUpdate2" (formula "12"))
   (rule "simplifyUpdate3" (formula "12") (term "1,0"))
   (rule "applyOnElementary" (formula "12") (term "1,0"))
   (rule "applyOnRigidTerm" (formula "12") (term "0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "2,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,1,0"))
   (rule "applyOnRigidFormula" (formula "12") (term "0,0,1,0"))
   (rule "simplifyUpdate1" (formula "12") (term "1,0,0,1,0"))
   (rule "applyOnPV" (formula "12") (term "0,0,0,1,0"))
   (rule "ifthenelse_concrete3" (formula "12") (term "0,0,1,0"))
   (rule "boolean_not_equal_2" (formula "12") (term "1,0,0,1,0"))
   (rule "concrete_or_4" (formula "12") (term "0,0,1,0"))
   (rule "ifElseSplit" (formula "12"))
   (branch "if x_3 true"
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "applyOnRigidFormula" (formula "1"))
      (rule "applyOnPV" (formula "1") (term "0"))
      (rule "simplifyUpdate1" (formula "1") (term "1"))
      (rule "ifthenelse_concrete4" (formula "1"))
      (rule "boolean_not_equal_2" (formula "1") (term "1"))
      (rule "concrete_or_4" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "replace_known_right" (formula "17") (term "0,0,0") (ifseqformula "11"))
      (rule "concrete_and_2" (formula "17") (term "0,0"))
      (rule "concrete_not_2" (formula "17") (term "0"))
      (rule "concrete_and_1" (formula "17"))
      (rule "replace_known_right" (formula "16") (term "1") (ifseqformula "17"))
      (rule "concrete_and_4" (formula "16"))
      (rule "false_right" (formula "16"))
      (rule "inEqSimp_geqRight" (formula "11"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "assignment" (formula "13") (term "1"))
      (rule "sequentialToParallel2" (formula "13"))
      (rule "simplifyUpdate3" (formula "13") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "methodCallReturn" (formula "13") (term "1"))
      (rule "assignment" (formula "13") (term "1"))
      (rule "sequentialToParallel2" (formula "13"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate3" (formula "13") (term "1,0"))
      (rule "applyOnElementary" (formula "13") (term "1,0"))
      (rule "applyOnPV" (formula "13") (term "0,1,0"))
      (rule "methodCallEmpty" (formula "13") (term "1"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "emptyModality" (formula "13") (term "1"))
      (rule "applyOnRigidFormula" (formula "13"))
      (rule "simplifyUpdate1" (formula "13") (term "1"))
      (rule "applyOnPV" (formula "13") (term "0"))
      (rule "boolean_not_equal_2" (formula "13"))
      (rule "false_right" (formula "13"))
      (rule "andRight" (formula "15"))
      (branch
         (rule "allRight" (formula "15") (inst "sk=x_0_1"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "inEqSimp_leqRight" (formula "15"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "16"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "17") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_4") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "6"))
         (rule "eqSymm" (formula "1") (term "0,1"))
         (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "18"))
         (rule "false_to_not_true" (formula "1") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
         (rule "mul_literals" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "boxToDiamond" (formula "1") (term "1"))
         (rule "double_not" (formula "1") (term "0,0,1"))
         (rule "notLeft" (formula "1"))
         (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_isSingleDigit_4,savedHeapBefore_isSingleDigit_3"))
         (rule "simplifyUpdate2" (formula "15") (term "1"))
         (rule "returnUnfold" (formula "15") (term "1") (inst "#v0=x_2"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_14"))
         (rule "compound_assignment_3_nonsimple" (formula "15") (term "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,1") (ifseqformula "5"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "17"))
         (rule "concrete_or_2" (formula "12"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0") (ifseqformula "5"))
         (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "10"))
         (rule "concrete_or_1" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x_15"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_15"))
         (rule "compound_assignment_2" (formula "16") (term "1") (inst "#v=x_16"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_16"))
         (rule "greater_equal_than_comparison_simple" (formula "16") (term "1"))
         (rule "sequentialToParallel2" (formula "16"))
         (rule "simplifyUpdate3" (formula "16") (term "1,0"))
         (rule "applyOnElementary" (formula "16") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
         (rule "compound_assignment_1_new" (formula "16") (term "1"))
         (rule "sequentialToParallel2" (formula "16"))
         (rule "simplifyUpdate2" (formula "16"))
         (rule "simplifyUpdate3" (formula "16") (term "1,0"))
         (rule "applyOnElementary" (formula "16") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
         (rule "ifthenelse_concrete3" (formula "16") (term "0,0,1,0"))
         (rule "boolean_not_equal_2" (formula "16") (term "1,0,0,1,0"))
         (rule "concrete_or_4" (formula "16") (term "0,0,1,0"))
         (rule "ifElseSplit" (formula "16"))
         (branch "if x_15 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete4" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_geqRight" (formula "16"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "assignment" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "methodCallReturn" (formula "17") (term "1"))
            (rule "assignment" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "applyOnElementary" (formula "17") (term "1,0"))
            (rule "applyOnPV" (formula "17") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "17") (term "1"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "emptyModality" (formula "17") (term "1"))
            (rule "applyOnRigidFormula" (formula "17"))
            (rule "applyOnPV" (formula "17") (term "0"))
            (rule "simplifyUpdate1" (formula "17") (term "1"))
            (rule "boolean_not_equal_2" (formula "17"))
            (rule "false_right" (formula "17"))
            (rule "allLeft" (formula "15") (inst "t=x_0_1"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_6") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
            (rule "eqSymm" (formula "15") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
            (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,1"))
            (rule "leq_literals" (formula "16") (term "0,1"))
            (rule "concrete_and_2" (formula "16") (term "1"))
            (rule "concrete_or_4" (formula "16"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "16") (term "0,1"))
            (rule "concrete_and_2" (formula "16") (term "1"))
            (rule "concrete_or_4" (formula "16"))
            (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
            (rule "boxToDiamond" (formula "15") (term "1"))
            (rule "notLeft" (formula "15"))
            (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_isSingleDigit_6,savedHeapBefore_isSingleDigit_5"))
            (rule "simplifyUpdate2" (formula "18") (term "1"))
            (rule "returnUnfold" (formula "18") (term "1") (inst "#v0=x_2"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_20"))
            (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
            (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_21"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_21"))
            (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_22"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_22"))
            (rule "greater_equal_than_comparison_simple" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
            (rule "inEqSimp_contradInEq0" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "18") (term "0,0,0,1,0"))
            (rule "concrete_and_2" (formula "18") (term "0,0,1,0"))
            (rule "ifthenelse_false" (formula "18") (term "0,1,0"))
            (rule "compound_assignment_1_new" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "18") (term "0,0,1,0"))
            (rule "ifthenelse_false" (formula "18") (term "0,1,0"))
            (rule "ifElseSplit" (formula "18"))
            (branch "if x_21 true"
               (rule "simplifyUpdate2" (formula "19"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "18") (term "1"))
               (rule "sequentialToParallel2" (formula "18"))
               (rule "simplifyUpdate3" (formula "18") (term "1,0"))
               (rule "methodCallReturn" (formula "18") (term "1"))
               (rule "assignment" (formula "18") (term "1"))
               (rule "sequentialToParallel2" (formula "18"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "simplifyUpdate3" (formula "18") (term "1,0"))
               (rule "applyOnElementary" (formula "18") (term "1,0"))
               (rule "applyOnPV" (formula "18") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "18") (term "1"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "emptyModality" (formula "18") (term "1"))
               (rule "notRight" (formula "18"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_21 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "19"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "18"))
               (rule "applyOnPV" (formula "18") (term "0"))
               (rule "simplifyUpdate1" (formula "18") (term "1"))
               (rule "boolean_equal" (formula "18"))
               (rule "closeTrue" (formula "18"))
            )
         )
         (branch "if x_15 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "applyOnPV" (formula "16") (term "0"))
            (rule "simplifyUpdate1" (formula "16") (term "1"))
            (rule "ifthenelse_concrete4" (formula "16"))
            (rule "boolean_not_equal_2" (formula "16") (term "1"))
            (rule "concrete_or_4" (formula "16"))
            (rule "notRight" (formula "16"))
            (rule "less_equal_than_comparison_simple" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "applyOnElementary" (formula "17") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
            (rule "blockEmpty" (formula "17") (term "1"))
            (rule "methodCallReturn" (formula "17") (term "1"))
            (rule "assignment" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "applyOnElementary" (formula "17") (term "1,0"))
            (rule "applyOnPV" (formula "17") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "17") (term "1"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "emptyModality" (formula "17") (term "1"))
            (rule "applyOnRigidFormula" (formula "17"))
            (rule "simplifyUpdate1" (formula "17") (term "1"))
            (rule "applyOnPV" (formula "17") (term "0"))
            (rule "ifthenelse_concrete3" (formula "17"))
            (rule "boolean_not_equal_2" (formula "17") (term "1"))
            (rule "concrete_or_4" (formula "17"))
            (rule "inEqSimp_leqRight" (formula "17"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
            (rule "leq_literals" (formula "2") (term "0"))
            (rule "concrete_or_1" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=x_0_1"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_5") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
            (rule "eqSymm" (formula "15") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "4"))
            (rule "qeq_literals" (formula "16") (term "0,1,0"))
            (rule "concrete_and_2" (formula "16") (term "1,0"))
            (rule "concrete_or_4" (formula "16") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
            (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,1"))
            (rule "leq_literals" (formula "16") (term "0,1"))
            (rule "concrete_and_2" (formula "16") (term "1"))
            (rule "concrete_or_4" (formula "16"))
            (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
            (rule "boxToDiamond" (formula "15") (term "1"))
            (rule "notLeft" (formula "15"))
            (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_isSingleDigit_5,savedHeapBefore_isSingleDigit_4"))
            (rule "simplifyUpdate2" (formula "18") (term "1"))
            (rule "returnUnfold" (formula "18") (term "1") (inst "#v0=x_2"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_17"))
            (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
            (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_18"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_18"))
            (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_19"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_19"))
            (rule "greater_equal_than_comparison_simple" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
            (rule "inEqSimp_subsumption1" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
            (rule "leq_literals" (formula "18") (term "0,0,0,1,0"))
            (rule "concrete_or_1" (formula "18") (term "0,0,1,0"))
            (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
            (rule "compound_assignment_1_new" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
            (rule "boolean_equal" (formula "18") (term "0,0,1,0"))
            (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
            (rule "ifElseSplit" (formula "18"))
            (branch "if x_18 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "19"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_18 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "19"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "18"))
               (rule "applyOnPV" (formula "18") (term "0"))
               (rule "simplifyUpdate1" (formula "18") (term "1"))
               (rule "boolean_not_equal_2" (formula "18"))
               (rule "false_right" (formula "18"))
               (rule "less_equal_than_comparison_simple" (formula "18") (term "1"))
               (rule "sequentialToParallel2" (formula "18"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "simplifyUpdate3" (formula "18") (term "1,0"))
               (rule "applyOnElementary" (formula "18") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
               (rule "blockEmpty" (formula "18") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "18") (term "0,0,0,1,0"))
               (rule "concrete_and_2" (formula "18") (term "0,0,1,0"))
               (rule "ifthenelse_false" (formula "18") (term "0,1,0"))
               (rule "methodCallReturn" (formula "18") (term "1"))
               (rule "assignment" (formula "18") (term "1"))
               (rule "sequentialToParallel2" (formula "18"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "simplifyUpdate3" (formula "18") (term "1,0"))
               (rule "applyOnElementary" (formula "18") (term "1,0"))
               (rule "applyOnPV" (formula "18") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "18") (term "1"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "emptyModality" (formula "18") (term "1"))
               (rule "notRight" (formula "18"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch
         (rule "allRight" (formula "15") (inst "sk=x_3_1"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "inEqSimp_leqRight" (formula "15"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "16"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
         (rule "times_zero_1" (formula "10") (term "0,0"))
         (rule "add_zero_left" (formula "10") (term "0"))
         (rule "allLeft" (formula "14") (inst "t=x_3_1"))
         (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "19"))
         (rule "concrete_or_4" (formula "14"))
         (rule "inEqSimp_commuteGeq" (formula "14") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "14") (term "1"))
         (rule "polySimp_addComm1" (formula "14") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1"))
         (rule "mul_literals" (formula "14") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
         (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
         (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0"))
         (rule "concrete_and_2" (formula "14") (term "0"))
         (rule "concrete_or_2" (formula "14"))
         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "14"))
         (rule "andLeft" (formula "2"))
         (rule "inEqSimp_homoInEq1" (formula "2"))
         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "1,1,0"))
         (rule "times_zero_1" (formula "2") (term "1,0"))
         (rule "add_literals" (formula "2") (term "0"))
         (rule "leq_literals" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
   )
   (branch "if x_3 false"
      (rule "false_to_not_true" (formula "1") (term "1"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate2" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "applyOnRigidFormula" (formula "11"))
      (rule "simplifyUpdate1" (formula "11") (term "1"))
      (rule "applyOnPV" (formula "11") (term "0"))
      (rule "ifthenelse_concrete4" (formula "11"))
      (rule "boolean_not_equal_2" (formula "11") (term "1"))
      (rule "concrete_or_4" (formula "11"))
      (rule "notRight" (formula "11"))
      (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "1"))
      (rule "concrete_and_1" (formula "17") (term "0,0"))
      (rule "replace_known_left" (formula "16") (term "0,0") (ifseqformula "1"))
      (rule "concrete_and_1" (formula "16") (term "0"))
      (rule "inEqSimp_notLeq" (formula "17") (term "0"))
      (rule "mul_literals" (formula "17") (term "1,0,0,0"))
      (rule "add_literals" (formula "17") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "17") (term "0"))
      (rule "mul_literals" (formula "17") (term "1,0"))
      (rule "less_equal_than_comparison_simple" (formula "13") (term "1"))
      (rule "sequentialToParallel2" (formula "13"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate3" (formula "13") (term "1,0"))
      (rule "applyOnElementary" (formula "13") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "13") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "13") (term "2,0,1,0"))
      (rule "applyOnRigidFormula" (formula "13") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "13") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "13") (term "1,0,0,1,0"))
      (rule "blockEmpty" (formula "13") (term "1"))
      (rule "methodCallReturn" (formula "13") (term "1"))
      (rule "assignment" (formula "13") (term "1"))
      (rule "sequentialToParallel2" (formula "13"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "simplifyUpdate3" (formula "13") (term "1,0"))
      (rule "applyOnElementary" (formula "13") (term "1,0"))
      (rule "applyOnPV" (formula "13") (term "0,1,0"))
      (rule "methodCallEmpty" (formula "13") (term "1"))
      (rule "simplifyUpdate2" (formula "13"))
      (rule "emptyModality" (formula "13") (term "1"))
      (rule "applyOnRigidFormula" (formula "13"))
      (rule "applyOnPV" (formula "13") (term "0"))
      (rule "simplifyUpdate1" (formula "13") (term "1"))
      (rule "ifthenelse_concrete3" (formula "13"))
      (rule "boolean_not_equal_2" (formula "13") (term "1"))
      (rule "concrete_or_4" (formula "13"))
      (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "13"))
      (rule "concrete_and_2" (formula "16"))
      (rule "false_right" (formula "16"))
      (rule "inEqSimp_leqRight" (formula "13"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
      (rule "concrete_and_1" (formula "16"))
      (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
      (rule "leq_literals" (formula "2") (term "0"))
      (rule "concrete_or_1" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "andRight" (formula "15"))
      (branch
         (rule "allRight" (formula "15") (inst "sk=x_0_0"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "inEqSimp_leqRight" (formula "15"))
         (rule "mul_literals" (formula "1") (term "1,0,0"))
         (rule "add_literals" (formula "1") (term "0,0"))
         (rule "add_zero_left" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "16"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "17") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_1") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "6"))
         (rule "eqSymm" (formula "1") (term "0,1"))
         (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "18"))
         (rule "false_to_not_true" (formula "1") (term "0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "12"))
         (rule "polySimp_rightDist" (formula "2") (term "0,0"))
         (rule "mul_literals" (formula "2") (term "0,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "boxToDiamond" (formula "1") (term "1"))
         (rule "double_not" (formula "1") (term "0,0,1"))
         (rule "notLeft" (formula "1"))
         (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_isSingleDigit_1,savedHeapBefore_isSingleDigit_0"))
         (rule "simplifyUpdate2" (formula "15") (term "1"))
         (rule "returnUnfold" (formula "15") (term "1") (inst "#v0=x_2"))
         (rule "variableDeclarationAssign" (formula "15") (term "1"))
         (rule "variableDeclaration" (formula "15") (term "1") (newnames "x_5"))
         (rule "compound_assignment_3_nonsimple" (formula "15") (term "1"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,1") (ifseqformula "5"))
         (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "17"))
         (rule "concrete_or_2" (formula "12"))
         (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "0") (ifseqformula "5"))
         (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "10"))
         (rule "concrete_or_1" (formula "9"))
         (rule "true_left" (formula "9"))
         (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x_6"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_6"))
         (rule "compound_assignment_2" (formula "16") (term "1") (inst "#v=x_7"))
         (rule "variableDeclarationAssign" (formula "16") (term "1"))
         (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_7"))
         (rule "greater_equal_than_comparison_simple" (formula "16") (term "1"))
         (rule "sequentialToParallel2" (formula "16"))
         (rule "simplifyUpdate3" (formula "16") (term "1,0"))
         (rule "applyOnElementary" (formula "16") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
         (rule "compound_assignment_1_new" (formula "16") (term "1"))
         (rule "sequentialToParallel2" (formula "16"))
         (rule "simplifyUpdate2" (formula "16"))
         (rule "simplifyUpdate3" (formula "16") (term "1,0"))
         (rule "applyOnElementary" (formula "16") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
         (rule "ifthenelse_concrete3" (formula "16") (term "0,0,1,0"))
         (rule "boolean_not_equal_2" (formula "16") (term "1,0,0,1,0"))
         (rule "concrete_or_4" (formula "16") (term "0,0,1,0"))
         (rule "ifElseSplit" (formula "16"))
         (branch "if x_6 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete4" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "inEqSimp_geqRight" (formula "16"))
            (rule "times_zero_1" (formula "1") (term "1,0,0"))
            (rule "add_zero_right" (formula "1") (term "0,0"))
            (rule "assignment" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "methodCallReturn" (formula "17") (term "1"))
            (rule "assignment" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "applyOnElementary" (formula "17") (term "1,0"))
            (rule "applyOnPV" (formula "17") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "17") (term "1"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "emptyModality" (formula "17") (term "1"))
            (rule "applyOnRigidFormula" (formula "17"))
            (rule "applyOnPV" (formula "17") (term "0"))
            (rule "simplifyUpdate1" (formula "17") (term "1"))
            (rule "boolean_not_equal_2" (formula "17"))
            (rule "false_right" (formula "17"))
            (rule "allLeft" (formula "15") (inst "t=x_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_3") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
            (rule "eqSymm" (formula "15") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "4"))
            (rule "qeq_literals" (formula "16") (term "0,1,0"))
            (rule "concrete_and_2" (formula "16") (term "1,0"))
            (rule "concrete_or_4" (formula "16") (term "0"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
            (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,1"))
            (rule "leq_literals" (formula "16") (term "0,1"))
            (rule "concrete_and_2" (formula "16") (term "1"))
            (rule "concrete_or_4" (formula "16"))
            (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
            (rule "boxToDiamond" (formula "15") (term "1"))
            (rule "notLeft" (formula "15"))
            (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_isSingleDigit_3,savedHeapBefore_isSingleDigit_2"))
            (rule "simplifyUpdate2" (formula "18") (term "1"))
            (rule "returnUnfold" (formula "18") (term "1") (inst "#v0=x_2"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_11"))
            (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
            (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_12"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_12"))
            (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_13"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_13"))
            (rule "greater_equal_than_comparison_simple" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
            (rule "inEqSimp_contradInEq0" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
            (rule "qeq_literals" (formula "18") (term "0,0,0,1,0"))
            (rule "concrete_and_2" (formula "18") (term "0,0,1,0"))
            (rule "ifthenelse_false" (formula "18") (term "0,1,0"))
            (rule "compound_assignment_1_new" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
            (rule "boolean_not_equal_2" (formula "18") (term "0,0,1,0"))
            (rule "ifthenelse_false" (formula "18") (term "0,1,0"))
            (rule "ifElseSplit" (formula "18"))
            (branch "if x_12 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "19"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_equal" (formula "1"))
               (rule "true_left" (formula "1"))
               (rule "assignment" (formula "18") (term "1"))
               (rule "sequentialToParallel2" (formula "18"))
               (rule "simplifyUpdate3" (formula "18") (term "1,0"))
               (rule "methodCallReturn" (formula "18") (term "1"))
               (rule "assignment" (formula "18") (term "1"))
               (rule "sequentialToParallel2" (formula "18"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "simplifyUpdate3" (formula "18") (term "1,0"))
               (rule "applyOnElementary" (formula "18") (term "1,0"))
               (rule "applyOnPV" (formula "18") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "18") (term "1"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "emptyModality" (formula "18") (term "1"))
               (rule "notRight" (formula "18"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_12 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "19"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "18"))
               (rule "applyOnPV" (formula "18") (term "0"))
               (rule "simplifyUpdate1" (formula "18") (term "1"))
               (rule "boolean_equal" (formula "18"))
               (rule "closeTrue" (formula "18"))
            )
         )
         (branch "if x_6 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "16"))
            (rule "applyOnPV" (formula "16") (term "0"))
            (rule "simplifyUpdate1" (formula "16") (term "1"))
            (rule "ifthenelse_concrete4" (formula "16"))
            (rule "boolean_not_equal_2" (formula "16") (term "1"))
            (rule "concrete_or_4" (formula "16"))
            (rule "notRight" (formula "16"))
            (rule "less_equal_than_comparison_simple" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "applyOnElementary" (formula "17") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
            (rule "blockEmpty" (formula "17") (term "1"))
            (rule "methodCallReturn" (formula "17") (term "1"))
            (rule "assignment" (formula "17") (term "1"))
            (rule "sequentialToParallel2" (formula "17"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "simplifyUpdate3" (formula "17") (term "1,0"))
            (rule "applyOnElementary" (formula "17") (term "1,0"))
            (rule "applyOnPV" (formula "17") (term "0,1,0"))
            (rule "methodCallEmpty" (formula "17") (term "1"))
            (rule "simplifyUpdate2" (formula "17"))
            (rule "emptyModality" (formula "17") (term "1"))
            (rule "applyOnRigidFormula" (formula "17"))
            (rule "simplifyUpdate1" (formula "17") (term "1"))
            (rule "applyOnPV" (formula "17") (term "0"))
            (rule "ifthenelse_concrete3" (formula "17"))
            (rule "boolean_not_equal_2" (formula "17") (term "1"))
            (rule "concrete_or_4" (formula "17"))
            (rule "inEqSimp_leqRight" (formula "17"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
            (rule "leq_literals" (formula "2") (term "0"))
            (rule "concrete_or_1" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "allLeft" (formula "15") (inst "t=x_0_0"))
            (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
            (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_2") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
            (rule "eqSymm" (formula "15") (term "0,1"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
            (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
            (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
            (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
            (rule "add_zero_right" (formula "16") (term "0,0,1"))
            (rule "leq_literals" (formula "16") (term "0,1"))
            (rule "concrete_and_2" (formula "16") (term "1"))
            (rule "concrete_or_4" (formula "16"))
            (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
            (rule "qeq_literals" (formula "16") (term "0,1"))
            (rule "concrete_and_2" (formula "16") (term "1"))
            (rule "concrete_or_4" (formula "16"))
            (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
            (rule "boxToDiamond" (formula "15") (term "1"))
            (rule "notLeft" (formula "15"))
            (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_isSingleDigit_2,savedHeapBefore_isSingleDigit_1"))
            (rule "simplifyUpdate2" (formula "18") (term "1"))
            (rule "returnUnfold" (formula "18") (term "1") (inst "#v0=x_2"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_8"))
            (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
            (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_9"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_9"))
            (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_10"))
            (rule "variableDeclarationAssign" (formula "18") (term "1"))
            (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_10"))
            (rule "greater_equal_than_comparison_simple" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
            (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
            (rule "inEqSimp_subsumption1" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
            (rule "leq_literals" (formula "18") (term "0,0,0,1,0"))
            (rule "concrete_or_1" (formula "18") (term "0,0,1,0"))
            (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
            (rule "compound_assignment_1_new" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "applyOnElementary" (formula "18") (term "1,0"))
            (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
            (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
            (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
            (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
            (rule "boolean_equal" (formula "18") (term "0,0,1,0"))
            (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
            (rule "ifElseSplit" (formula "18"))
            (branch "if x_9 true"
               (rule "simplifyUpdate2" (formula "1"))
               (rule "simplifyUpdate2" (formula "19"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_9 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "19"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "18"))
               (rule "applyOnPV" (formula "18") (term "0"))
               (rule "simplifyUpdate1" (formula "18") (term "1"))
               (rule "boolean_not_equal_2" (formula "18"))
               (rule "false_right" (formula "18"))
               (rule "less_equal_than_comparison_simple" (formula "18") (term "1"))
               (rule "sequentialToParallel2" (formula "18"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "simplifyUpdate3" (formula "18") (term "1,0"))
               (rule "applyOnElementary" (formula "18") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
               (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
               (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
               (rule "blockEmpty" (formula "18") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "18") (term "0,0,0,1,0"))
               (rule "concrete_and_2" (formula "18") (term "0,0,1,0"))
               (rule "ifthenelse_false" (formula "18") (term "0,1,0"))
               (rule "methodCallReturn" (formula "18") (term "1"))
               (rule "assignment" (formula "18") (term "1"))
               (rule "sequentialToParallel2" (formula "18"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "simplifyUpdate3" (formula "18") (term "1,0"))
               (rule "applyOnElementary" (formula "18") (term "1,0"))
               (rule "applyOnPV" (formula "18") (term "0,1,0"))
               (rule "methodCallEmpty" (formula "18") (term "1"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "emptyModality" (formula "18") (term "1"))
               (rule "notRight" (formula "18"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
         )
      )
      (branch
         (rule "allRight" (formula "15") (inst "sk=x_3_0"))
         (rule "orRight" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "inEqSimp_leqRight" (formula "15"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "add_zero_left" (formula "1") (term "0,0"))
         (rule "polySimp_addComm0" (formula "1") (term "0"))
         (rule "inEqSimp_geqRight" (formula "16"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial1" (formula "2"))
         (rule "polySimp_mulLiterals" (formula "2") (term "0"))
         (rule "polySimp_elimOne" (formula "2") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "2"))
         (rule "times_zero_1" (formula "10") (term "0,0"))
         (rule "add_zero_left" (formula "10") (term "0"))
         (rule "allLeft" (formula "14") (inst "t=x_3_0"))
         (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "19"))
         (rule "concrete_or_4" (formula "14"))
         (rule "inEqSimp_commuteGeq" (formula "14") (term "0"))
         (rule "inEqSimp_homoInEq0" (formula "14") (term "1"))
         (rule "polySimp_addComm1" (formula "14") (term "0,1"))
         (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
         (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
         (rule "polySimp_rightDist" (formula "14") (term "1,1"))
         (rule "mul_literals" (formula "14") (term "0,1,1"))
         (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
         (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
         (rule "inEqSimp_contradInEq1" (formula "14") (term "0") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq1" (formula "14") (term "0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,0"))
         (rule "add_literals" (formula "14") (term "1,1,0,0,0"))
         (rule "times_zero_1" (formula "14") (term "1,0,0,0"))
         (rule "add_literals" (formula "14") (term "0,0,0"))
         (rule "leq_literals" (formula "14") (term "0,0"))
         (rule "concrete_and_2" (formula "14") (term "0"))
         (rule "concrete_or_2" (formula "14"))
         (rule "inEqSimp_contradInEq0" (formula "14") (ifseqformula "2"))
         (rule "andLeft" (formula "14"))
         (rule "inEqSimp_homoInEq1" (formula "14"))
         (rule "polySimp_pullOutFactor1b" (formula "14") (term "0"))
         (rule "add_literals" (formula "14") (term "1,1,0"))
         (rule "times_zero_1" (formula "14") (term "1,0"))
         (rule "add_literals" (formula "14") (term "0"))
         (rule "leq_literals" (formula "14"))
         (rule "closeFalse" (formula "14"))
      )
   )
)
)

}
