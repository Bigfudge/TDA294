\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Mon Oct 29 15:36:24 CET 2018
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=20000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=assertions-assertions\\:safe , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:ban , JavaCard-JavaCard\\:on , Strings-Strings\\:on , modelFields-modelFields\\:treatAsAxiom , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\javaSource "NumericTextBox";

\proofObligation "#Proof Obligation Settings
#Mon Oct 29 15:36:24 CET 2018
name=NumericTextBox[NumericTextBox\\:\\:setRenderer(TextBoxRenderer)].JML operation contract.0
contract=NumericTextBox[NumericTextBox\\:\\:setRenderer(TextBoxRenderer)].JML operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "simonpersson" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "1772")

(branch "dummy ID"
(rule "instanceof_static_type" (formula "1") (term "0,0,0,1,1,0,0,1,1") (newnames "renderer,self,exc,heapAtPre,o,f"))
(rule "boolean_equal" (formula "1") (term "0,0,1,1,0,0,1,1"))
(rule "concrete_impl_1" (formula "1") (term "0,1,1,0,0,1,1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "3"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "6"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "9") (term "1,0,0,1,0,1"))
(rule "replace_known_right" (formula "4") (term "0") (ifseqformula "8"))
(rule "concrete_or_2" (formula "4"))
(rule "elementOfSingleton" (formula "9") (term "0,0,0,0,1,0,1"))
(rule "assignment" (formula "9") (term "1"))
(rule "sequentialToParallel2" (formula "9"))
(rule "simplifyUpdate3" (formula "9") (term "1,0"))
(rule "Class_invariant_axiom_for_NumericTextBox" (formula "6") (inst "i=i") (inst "i_0=i_0") (ifseqformula "3"))
(rule "inInt" (formula "6") (term "1,0,0,1"))
(rule "concrete_and_3" (formula "6") (term "0,0,1"))
(rule "inInt" (formula "6") (term "1,0,0,1,0"))
(rule "concrete_and_3" (formula "6") (term "0,0,1,0"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "andLeft" (formula "6"))
(rule "notLeft" (formula "7"))
(rule "andLeft" (formula "6"))
(rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0"))
(rule "inEqSimp_ltToLeq" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "8") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "6"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "8") (term "1,0,0"))
(rule "polySimp_mulComm0" (formula "8") (term "1,1,0,0"))
(rule "polySimp_rightDist" (formula "8") (term "1,1,0,0"))
(rule "mul_literals" (formula "8") (term "0,1,1,0,0"))
(rule "polySimp_mulLiterals" (formula "8") (term "1,1,1,0,0"))
(rule "polySimp_elimOne" (formula "8") (term "1,1,1,0,0"))
(rule "inEqSimp_exactShadow3" (formula "6") (ifseqformula "7"))
(rule "times_zero_1" (formula "6") (term "0,0"))
(rule "add_zero_left" (formula "6") (term "0"))
(rule "nnf_imp2or" (formula "10") (term "0"))
(rule "nnf_imp2or" (formula "9") (term "0"))
(rule "nnf_notAnd" (formula "10") (term "0,0"))
(rule "inEqSimp_notGeq" (formula "10") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
(rule "inEqSimp_notLeq" (formula "10") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0"))
(rule "add_literals" (formula "10") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "10") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "10") (term "1,1,0,0"))
(rule "nnf_notAnd" (formula "9") (term "0,0"))
(rule "inEqSimp_notLeq" (formula "9") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0"))
(rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0"))
(rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0"))
(rule "add_literals" (formula "9") (term "0,0,0,1,0,0"))
(rule "add_zero_left" (formula "9") (term "0,0,1,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0"))
(rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "9") (term "1,1,0,0"))
(rule "inEqSimp_notGeq" (formula "9") (term "0,0,0"))
(rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "9") (term "0,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0"))
(rule "mul_literals" (formula "9") (term "1,0,0,0"))
(rule "commute_or_2" (formula "9") (term "0"))
(rule "commute_or" (formula "10") (term "0,0"))
(rule "commute_or" (formula "9") (term "0,0"))
(rule "methodBodyExpand" (formula "14") (term "1") (newnames "heapBefore_setRenderer,savedHeapBefore_setRenderer"))
(rule "simplifyUpdate2" (formula "14") (term "1"))
(rule "assignment_write_attribute_this" (formula "14"))
(rule "sequentialToParallel2" (formula "14"))
(rule "simplifyUpdate2" (formula "14"))
(rule "simplifyUpdate3" (formula "14") (term "1,0"))
(rule "applyOnElementary" (formula "14") (term "1,0"))
(rule "applyOnRigidTerm" (formula "14") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "14") (term "2,0,1,0"))
(rule "applyOnPV" (formula "14") (term "3,0,1,0"))
(rule "simplifyUpdate1" (formula "14") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "14") (term "1,0,1,0"))
(rule "methodCallEmpty" (formula "14") (term "1"))
(rule "tryEmpty" (formula "14") (term "1"))
(rule "emptyModality" (formula "14") (term "1"))
(rule "applyOnRigidFormula" (formula "14"))
(rule "simplifyUpdate2" (formula "14") (term "0"))
(rule "simplifyUpdate2" (formula "14") (term "1"))
(rule "applyOnRigidFormula" (formula "14") (term "0"))
(rule "applyOnRigidFormula" (formula "14") (term "1"))
(rule "applyOnRigidFormula" (formula "14") (term "0,0"))
(rule "simplifyUpdate2" (formula "14") (term "0,0,0"))
(rule "simplifyUpdate2" (formula "14") (term "1,0,0"))
(rule "applyOnRigidFormula" (formula "14") (term "1,0"))
(rule "simplifyUpdate2" (formula "14") (term "0,1,0"))
(rule "applyOnRigidFormula" (formula "14") (term "0,1"))
(rule "applyOnRigidFormula" (formula "14") (term "0,0,0"))
(rule "simplifyUpdate1" (formula "14") (term "1,0,0,0"))
(rule "applyOnPV" (formula "14") (term "0,0,0,0"))
(rule "eqClose" (formula "14") (term "0,0,0"))
(rule "concrete_impl_1" (formula "14") (term "0,0"))
(rule "applyOnRigidFormula" (formula "14") (term "1,1,0"))
(rule "simplifyUpdate2" (formula "14") (term "0,1,1,0"))
(rule "simplifyUpdate2" (formula "14") (term "1,1,1,0"))
(rule "applyOnRigidFormula" (formula "14") (term "0,1,0"))
(rule "applyOnRigidFormula" (formula "14") (term "0,0,1"))
(rule "simplifyUpdate2" (formula "14") (term "0,0,0,1"))
(rule "applyOnRigidFormula" (formula "14") (term "0,0"))
(rule "applyOnRigidFormula" (formula "14") (term "0,1,1,0"))
(rule "applyOnPV" (formula "14") (term "0,0,1,1,0"))
(rule "simplifyUpdate1" (formula "14") (term "1,0,1,1,0"))
(rule "applyOnRigidFormula" (formula "14") (term "1,1,1,0"))
(rule "applyOnRigidFormula" (formula "14") (term "0,0,1,0"))
(rule "applyOnPV" (formula "14") (term "0,0,0,1,0"))
(rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,0"))
(rule "eqClose" (formula "14") (term "0,0,1,0"))
(rule "concrete_not_1" (formula "14") (term "0,1,0"))
(rule "concrete_impl_2" (formula "14") (term "1,0"))
(rule "concrete_and_3" (formula "14") (term "0"))
(rule "applyOnRigidFormula" (formula "14") (term "1,0,0,1"))
(rule "simplifyUpdate1" (formula "14") (term "1,1,0,0,1"))
(rule "simplifyUpdate1" (formula "14") (term "0,1,0,0,1"))
(rule "applyOnRigidFormula" (formula "14") (term "0,0,0,1"))
(rule "simplifyUpdate2" (formula "14") (term "0,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "14") (term "0,0"))
(rule "simplifyUpdate1" (formula "14") (term "1,0,0"))
(rule "applyOnRigidFormula" (formula "14") (term "1,0"))
(rule "applyOnPV" (formula "14") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "14") (term "1,1,0"))
(rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,1"))
(rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,1"))
(rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,1"))
(rule "applyOnPV" (formula "14") (term "0,1,1,0,0,1"))
(rule "eqSymm" (formula "14") (term "1,0,0,1"))
(rule "applyOnRigidFormula" (formula "14") (term "1,0,0,0,1"))
(rule "simplifyUpdate2" (formula "14") (term "0,1,0,0,0,1"))
(rule "applyOnRigidTerm" (formula "14") (term "0,0,0"))
(rule "applyOnPV" (formula "14") (term "0,0,0,0"))
(rule "simplifyUpdate1" (formula "14") (term "1,0,0,0"))
(rule "applyOnRigidTerm" (formula "14") (term "1,1,0,0,1"))
(rule "applyOnPV" (formula "14") (term "0,1,1,0,0,1"))
(rule "simplifyUpdate1" (formula "14") (term "1,1,1,0,0,1"))
(rule "simplifyUpdate1" (formula "14") (term "2,1,1,0,0,1"))
(rule "applyOnRigidFormula" (formula "14") (term "1,1,0,0,0,1"))
(rule "applyOnRigidFormula" (formula "14") (term "0,1,1,0,0,0,1"))
(rule "simplifyUpdate1" (formula "14") (term "1,0,1,1,0,0,0,1"))
(rule "applyOnRigidTerm" (formula "14") (term "0,0,1,1,0,0,0,1"))
(rule "simplifyUpdate1" (formula "14") (term "1,0,0,1,1,0,0,0,1"))
(rule "simplifyUpdate1" (formula "14") (term "2,0,0,1,1,0,0,0,1"))
(rule "applyOnPV" (formula "14") (term "0,0,0,1,1,0,0,0,1"))
(rule "Query_axiom_for_getRenderer__in_NumericTextBox" (formula "14") (term "0,0,0") (inst "getRenderer_sk=getRenderer_sk_0") (inst "#self=n") (inst "#res=t") (ifseqformula "3"))
(rule "eqSymm" (formula "15") (term "0,0"))
(rule "eqSymm" (formula "1") (term "1,0,1"))
(rule "boxToDiamond" (formula "1") (term "1"))
(rule "notLeft" (formula "1"))
(rule "Class_invariant_axiom_for_NumericTextBox" (formula "15") (term "1,0") (inst "i=i") (inst "i_0=i_0") (ifseqformula "3"))
(rule "inInt" (formula "15") (term "1,0,0,1,1,0"))
(rule "concrete_and_3" (formula "15") (term "0,0,1,1,0"))
(rule "inInt" (formula "15") (term "1,0,0,1,0,1,0"))
(rule "concrete_and_3" (formula "15") (term "0,0,1,0,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "1,0,1,0,0,0,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "0,0,0,0,0,0,1,0"))
(rule "replace_known_right" (formula "15") (term "0,0,0,0,0,1,0") (ifseqformula "12"))
(rule "concrete_not_2" (formula "15") (term "0,0,0,0,1,0"))
(rule "concrete_and_1" (formula "15") (term "0,0,0,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "0,1,0,1,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "1,2,0,1,0,1,0,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "0,0,1,0,0,1,0"))
(rule "replace_known_right" (formula "15") (term "0,1,0,0,1,0") (ifseqformula "12"))
(rule "concrete_not_2" (formula "15") (term "1,0,0,1,0"))
(rule "concrete_and_3" (formula "15") (term "0,0,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "1,1,0,1,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "0,1,1,0,0,1,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "1,0,0,0,1,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "1,1,0,0,1,0,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "1,0,1,0,1,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "2,0,1,0,1,0,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "0,1,1,0,0,1,0"))
(rule "dismissNonSelectedField" (formula "15") (term "0,1,0,0,1,0"))
(rule "replace_known_left" (formula "15") (term "1,0,0,1,0") (ifseqformula "8"))
(rule "concrete_and_3" (formula "15") (term "0,0,1,0"))
(rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
(rule "inEqSimp_ltToLeq" (formula "15") (term "1,0,0,1,0,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1,0,0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,0,1,0,1,0"))
(rule "inEqSimp_commuteLeq" (formula "15") (term "0,0,1,0"))
(rule "replace_known_left" (formula "15") (term "0,0,1,0") (ifseqformula "7"))
(rule "concrete_and_1" (formula "15") (term "0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,1,1,0"))
(rule "mul_literals" (formula "15") (term "0,1,1,0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "1,0,0,0,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,1,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,1,0,0,0,1,0"))
(rule "mul_literals" (formula "15") (term "0,1,1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,1,0,0,0,1,0"))
(rule "nnf_imp2or" (formula "15") (term "0,1,1,0"))
(rule "nnf_imp2or" (formula "15") (term "0,0,1,0"))
(rule "nnf_notAnd" (formula "15") (term "0,0,1,1,0"))
(rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,0,1,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,1,1,0"))
(rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,0,0,0,1,1,0"))
(rule "mul_literals" (formula "15") (term "0,1,0,0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,1,0"))
(rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,1,1,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,1,1,0"))
(rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,1,1,0"))
(rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,1,1,0"))
(rule "add_literals" (formula "15") (term "0,0,0,1,0,0,1,1,0"))
(rule "add_zero_left" (formula "15") (term "0,0,1,0,0,1,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,1,1,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1,1,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1,1,0"))
(rule "nnf_notAnd" (formula "15") (term "0,0,0,1,0"))
(rule "inEqSimp_notGeq" (formula "15") (term "0,0,0,0,1,0"))
(rule "times_zero_1" (formula "15") (term "1,0,0,0,0,0,0,1,0"))
(rule "add_literals" (formula "15") (term "0,0,0,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,0,0,1,0"))
(rule "mul_literals" (formula "15") (term "1,0,0,0,0,1,0"))
(rule "inEqSimp_notLeq" (formula "15") (term "1,0,0,0,1,0"))
(rule "polySimp_rightDist" (formula "15") (term "1,0,0,1,0,0,0,1,0"))
(rule "mul_literals" (formula "15") (term "0,1,0,0,1,0,0,0,1,0"))
(rule "polySimp_addAssoc" (formula "15") (term "0,0,1,0,0,0,1,0"))
(rule "add_literals" (formula "15") (term "0,0,0,1,0,0,0,1,0"))
(rule "add_zero_left" (formula "15") (term "0,0,1,0,0,0,1,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "15") (term "1,0,0,0,1,0"))
(rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,0,1,0"))
(rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,0,1,0"))
(rule "methodBodyExpand" (formula "11") (term "1") (newnames "heapBefore_getRenderer,savedHeapBefore_getRenderer"))
(rule "simplifyUpdate2" (formula "11") (term "1"))
(rule "arrayLengthNotNegative" (formula "8") (term "1"))
(rule "arrayLengthIsAShort" (formula "8") (term "1"))
(rule "inShort" (formula "8"))
(rule "true_left" (formula "8"))
(rule "returnUnfold" (formula "11") (term "1") (inst "#v0=t_1"))
(rule "variableDeclarationAssign" (formula "11") (term "1"))
(rule "variableDeclaration" (formula "11") (term "1") (newnames "t_1"))
(rule "remove_parentheses_right" (formula "11") (term "1"))
(rule "assignment_read_attribute_this" (formula "11"))
(rule "sequentialToParallel2" (formula "11"))
(rule "applyOnElementary" (formula "11") (term "1,0"))
(rule "applyOnRigidTerm" (formula "11") (term "0,1,0"))
(rule "simplifyUpdate1" (formula "11") (term "0,0,1,0"))
(rule "simplifyUpdate1" (formula "11") (term "2,0,1,0"))
(rule "simplifyUpdate1" (formula "11") (term "1,0,1,0"))
(rule "applyOnPV" (formula "11") (term "0,0,1,0"))
(rule "applyOnPV" (formula "11") (term "1,0,1,0"))
(rule "pullOutSelect" (formula "11") (term "0,1,0") (inst "selectSK=NumericTextBox_textBoxRenderer_0"))
(rule "simplifySelectOfStore" (formula "1"))
(rule "equalUnique" (formula "1") (term "0,1,0,0"))
(rule "concrete_not_2" (formula "1") (term "1,0,0"))
(rule "concrete_and_3" (formula "1") (term "0,0"))
(rule "eqClose" (formula "1") (term "0,0,0"))
(rule "concrete_and_1" (formula "1") (term "0,0"))
(rule "eqClose" (formula "1") (term "0,0"))
(rule "ifthenelse_true" (formula "1") (term "0"))
(rule "castDel" (formula "1") (term "0"))
(rule "applyEqReverse" (formula "12") (term "0,1,0") (ifseqformula "1"))
(rule "hideAuxiliaryEq" (formula "1"))
(rule "methodCallReturn" (formula "11") (term "1"))
(rule "assignment" (formula "11") (term "1"))
(rule "sequentialToParallel2" (formula "11"))
(rule "simplifyUpdate2" (formula "11"))
(rule "simplifyUpdate3" (formula "11") (term "1,0"))
(rule "applyOnElementary" (formula "11") (term "1,0"))
(rule "applyOnPV" (formula "11") (term "0,1,0"))
(rule "methodCallEmpty" (formula "11") (term "1"))
(rule "simplifyUpdate2" (formula "11"))
(rule "emptyModality" (formula "11") (term "1"))
(rule "notRight" (formula "11"))
(rule "applyOnRigidFormula" (formula "1"))
(rule "simplifyUpdate2" (formula "1") (term "1"))
(rule "applyOnRigidFormula" (formula "1") (term "0"))
(rule "simplifyUpdate2" (formula "1") (term "0,0"))
(rule "applyOnRigidFormula" (formula "1") (term "1"))
(rule "simplifyUpdate1" (formula "1") (term "1,1"))
(rule "applyOnPV" (formula "1") (term "0,1"))
(rule "applyOnRigidFormula" (formula "1") (term "1,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,1,0"))
(rule "applyOnRigidFormula" (formula "1") (term "0,0"))
(rule "applyOnPV" (formula "1") (term "0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
(rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "14"))
(rule "concrete_or_2" (formula "1") (term "0"))
(rule "applyOnRigidTerm" (formula "1") (term "0,0"))
(rule "simplifyUpdate1" (formula "1") (term "0,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "1,0,0"))
(rule "simplifyUpdate1" (formula "1") (term "2,0,0"))
(rule "applyOnPV" (formula "1") (term "0,0,0"))
(rule "applyOnPV" (formula "1") (term "1,0,0"))
(rule "dismissNonSelectedField" (formula "1") (term "0,0"))
(rule "replace_known_left" (formula "1") (term "0") (ifseqformula "5"))
(rule "concrete_impl_1" (formula "1"))
(rule "replace_known_left" (formula "15") (term "0,0") (ifseqformula "1"))
(rule "concrete_and_1" (formula "15") (term "0"))
(rule "applyEq" (formula "15") (term "3,0,0,1,0,0,1") (ifseqformula "1"))
(rule "applyEq" (formula "15") (term "3,0,0,1,0,0,0") (ifseqformula "1"))
(rule "applyEq" (formula "5") (term "1,0") (ifseqformula "1"))
(rule "applyEq" (formula "14") (term "0") (ifseqformula "1"))
(rule "andRight" (formula "15"))
(branch
   (rule "andRight" (formula "15"))
   (branch
      (rule "allRight" (formula "15") (inst "sk=i_0_0"))
      (rule "orRight" (formula "15"))
      (rule "orRight" (formula "15"))
      (rule "inEqSimp_geqRight" (formula "16"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "16"))
      (rule "mul_literals" (formula "1") (term "1,0,0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "17") (term "0") (inst "isSingleDigit_sk=isSingleDigit_sk_0") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "6"))
      (rule "eqSymm" (formula "1") (term "0,1"))
      (rule "apply_eq_boolean_rigid" (formula "1") (term "1,0,1") (ifseqformula "18"))
      (rule "false_to_not_true" (formula "1") (term "0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "3") (ifseqformula "12"))
      (rule "polySimp_rightDist" (formula "3") (term "0,0"))
      (rule "mul_literals" (formula "3") (term "0,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "mul_literals" (formula "3") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,1"))
      (rule "polySimp_elimOne" (formula "3") (term "1,1"))
      (rule "boxToDiamond" (formula "1") (term "1"))
      (rule "double_not" (formula "1") (term "0,0,1"))
      (rule "notLeft" (formula "1"))
      (rule "methodBodyExpand" (formula "15") (term "1") (newnames "heapBefore_isSingleDigit,savedHeapBefore_isSingleDigit"))
      (rule "simplifyUpdate2" (formula "15") (term "1"))
      (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "0,1") (ifseqformula "5"))
      (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "17"))
      (rule "concrete_or_2" (formula "12"))
      (rule "ifUnfold" (formula "16") (term "1") (inst "#boolv=x_2"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_2"))
      (rule "compound_assignment_3_nonsimple" (formula "16") (term "1"))
      (rule "ifElseUnfold" (formula "16") (term "1") (inst "#boolv=x_3"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_3"))
      (rule "compound_assignment_2" (formula "16") (term "1") (inst "#v=x_4"))
      (rule "variableDeclarationAssign" (formula "16") (term "1"))
      (rule "variableDeclaration" (formula "16") (term "1") (newnames "x_4"))
      (rule "greater_equal_than_comparison_simple" (formula "16") (term "1"))
      (rule "sequentialToParallel2" (formula "16"))
      (rule "simplifyUpdate3" (formula "16") (term "1,0"))
      (rule "applyOnElementary" (formula "16") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
      (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
      (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
      (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
      (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
      (rule "compound_assignment_1_new" (formula "16") (term "1"))
      (rule "sequentialToParallel2" (formula "16"))
      (rule "simplifyUpdate2" (formula "16"))
      (rule "simplifyUpdate3" (formula "16") (term "1,0"))
      (rule "applyOnElementary" (formula "16") (term "1,0"))
      (rule "applyOnRigidTerm" (formula "16") (term "0,1,0"))
      (rule "simplifyUpdate1" (formula "16") (term "1,0,1,0"))
      (rule "simplifyUpdate1" (formula "16") (term "2,0,1,0"))
      (rule "applyOnRigidFormula" (formula "16") (term "0,0,1,0"))
      (rule "applyOnPV" (formula "16") (term "0,0,0,1,0"))
      (rule "simplifyUpdate1" (formula "16") (term "1,0,0,1,0"))
      (rule "ifthenelse_concrete3" (formula "16") (term "0,0,1,0"))
      (rule "boolean_not_equal_2" (formula "16") (term "1,0,0,1,0"))
      (rule "concrete_or_4" (formula "16") (term "0,0,1,0"))
      (rule "ifElseSplit" (formula "16"))
      (branch "if x_3 true"
         (rule "simplifyUpdate2" (formula "1"))
         (rule "simplifyUpdate2" (formula "17"))
         (rule "applyOnRigidFormula" (formula "1"))
         (rule "simplifyUpdate1" (formula "1") (term "1"))
         (rule "applyOnPV" (formula "1") (term "0"))
         (rule "ifthenelse_concrete4" (formula "1"))
         (rule "boolean_not_equal_2" (formula "1") (term "1"))
         (rule "concrete_or_4" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "ifSkipThen" (formula "17") (term "1"))
         (rule "inEqSimp_geqRight" (formula "16"))
         (rule "times_zero_1" (formula "1") (term "1,0,0"))
         (rule "add_zero_right" (formula "1") (term "0,0"))
         (rule "assignment" (formula "17") (term "1"))
         (rule "simplifyUpdate2" (formula "17") (term "1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "mul_literals" (formula "1") (term "1"))
         (rule "methodCallReturn" (formula "17") (term "1"))
         (rule "assignment" (formula "17") (term "1"))
         (rule "sequentialToParallel2" (formula "17"))
         (rule "simplifyUpdate3" (formula "17") (term "1,0"))
         (rule "methodCallEmpty" (formula "17") (term "1"))
         (rule "simplifyUpdate2" (formula "17"))
         (rule "emptyModality" (formula "17") (term "1"))
         (rule "applyOnRigidFormula" (formula "17"))
         (rule "simplifyUpdate1" (formula "17") (term "1"))
         (rule "applyOnPV" (formula "17") (term "0"))
         (rule "boolean_not_equal_2" (formula "17"))
         (rule "false_right" (formula "17"))
         (rule "allLeft" (formula "15") (inst "t=i_0_0"))
         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
         (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_2") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
         (rule "eqSymm" (formula "15") (term "0,1"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
         (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "16") (term "0,0,1"))
         (rule "leq_literals" (formula "16") (term "0,1"))
         (rule "concrete_and_2" (formula "16") (term "1"))
         (rule "concrete_or_4" (formula "16"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "2"))
         (rule "qeq_literals" (formula "16") (term "0,1"))
         (rule "concrete_and_2" (formula "16") (term "1"))
         (rule "concrete_or_4" (formula "16"))
         (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
         (rule "boxToDiamond" (formula "15") (term "1"))
         (rule "notLeft" (formula "15"))
         (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_isSingleDigit_1,savedHeapBefore_isSingleDigit_1"))
         (rule "simplifyUpdate2" (formula "18") (term "1"))
         (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x_2"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_8"))
         (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
         (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_9"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_9"))
         (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_10"))
         (rule "variableDeclarationAssign" (formula "18") (term "1"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_10"))
         (rule "greater_equal_than_comparison_simple" (formula "18") (term "1"))
         (rule "sequentialToParallel2" (formula "18"))
         (rule "simplifyUpdate3" (formula "18") (term "1,0"))
         (rule "applyOnElementary" (formula "18") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
         (rule "inEqSimp_contradInEq0" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
         (rule "qeq_literals" (formula "18") (term "0,0,0,1,0"))
         (rule "concrete_and_2" (formula "18") (term "0,0,1,0"))
         (rule "ifthenelse_false" (formula "18") (term "0,1,0"))
         (rule "compound_assignment_1_new" (formula "18") (term "1"))
         (rule "sequentialToParallel2" (formula "18"))
         (rule "simplifyUpdate2" (formula "18"))
         (rule "simplifyUpdate3" (formula "18") (term "1,0"))
         (rule "applyOnElementary" (formula "18") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
         (rule "boolean_not_equal_2" (formula "18") (term "0,0,1,0"))
         (rule "ifthenelse_false" (formula "18") (term "0,1,0"))
         (rule "ifElseSplit" (formula "18"))
         (branch "if x_9 true"
            (rule "simplifyUpdate2" (formula "19"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "ifSkipThen" (formula "19") (term "1"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "boolean_equal" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "assignment" (formula "18") (term "1"))
            (rule "simplifyUpdate2" (formula "18") (term "1"))
            (rule "methodCallReturn" (formula "18") (term "1"))
            (rule "assignment" (formula "18") (term "1"))
            (rule "sequentialToParallel2" (formula "18"))
            (rule "simplifyUpdate3" (formula "18") (term "1,0"))
            (rule "methodCallEmpty" (formula "18") (term "1"))
            (rule "simplifyUpdate2" (formula "18"))
            (rule "emptyModality" (formula "18") (term "1"))
            (rule "notRight" (formula "18"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "boolean_not_equal_2" (formula "1"))
            (rule "closeFalse" (formula "1"))
         )
         (branch "if x_9 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "19"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "18"))
            (rule "simplifyUpdate1" (formula "18") (term "1"))
            (rule "applyOnPV" (formula "18") (term "0"))
            (rule "boolean_equal" (formula "18"))
            (rule "closeTrue" (formula "18"))
         )
      )
      (branch "if x_3 false"
         (rule "false_to_not_true" (formula "1") (term "1"))
         (rule "simplifyUpdate2" (formula "17"))
         (rule "simplifyUpdate2" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "applyOnRigidFormula" (formula "16"))
         (rule "simplifyUpdate1" (formula "16") (term "1"))
         (rule "applyOnPV" (formula "16") (term "0"))
         (rule "ifthenelse_concrete4" (formula "16"))
         (rule "boolean_not_equal_2" (formula "16") (term "1"))
         (rule "concrete_or_4" (formula "16"))
         (rule "notRight" (formula "16"))
         (rule "less_equal_than_comparison_simple" (formula "17") (term "1"))
         (rule "sequentialToParallel2" (formula "17"))
         (rule "simplifyUpdate2" (formula "17"))
         (rule "simplifyUpdate3" (formula "17") (term "1,0"))
         (rule "applyOnElementary" (formula "17") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "17") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "17") (term "0,0,1,0"))
         (rule "simplifyUpdate1" (formula "17") (term "1,0,0,1,0"))
         (rule "applyOnPV" (formula "17") (term "0,0,0,1,0"))
         (rule "blockEmpty" (formula "17") (term "1"))
         (rule "allLeft" (formula "15") (inst "t=i_0_0"))
         (rule "inEqSimp_commuteGeq" (formula "15") (term "1"))
         (rule "Query_axiom_for_isSingleDigit_int__in_NumericTextBox" (formula "15") (term "0,0,0") (inst "isSingleDigit_sk=isSingleDigit_sk_1") (inst "#p0=x_1") (inst "#self=n") (inst "#res=x") (ifseqformula "8"))
         (rule "eqSymm" (formula "15") (term "0,1"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "1,0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "16") (term "0,1,0"))
         (rule "concrete_and_2" (formula "16") (term "1,0"))
         (rule "concrete_or_4" (formula "16") (term "0"))
         (rule "inEqSimp_contradInEq1" (formula "16") (term "1") (ifseqformula "4"))
         (rule "inEqSimp_homoInEq1" (formula "16") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "16") (term "0,0,1"))
         (rule "add_literals" (formula "16") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "16") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "16") (term "0,0,1"))
         (rule "leq_literals" (formula "16") (term "0,1"))
         (rule "concrete_and_2" (formula "16") (term "1"))
         (rule "concrete_or_4" (formula "16"))
         (rule "applyEqRigid" (formula "15") (term "1,0,1") (ifseqformula "16"))
         (rule "boxToDiamond" (formula "15") (term "1"))
         (rule "notLeft" (formula "15"))
         (rule "methodBodyExpand" (formula "18") (term "1") (newnames "heapBefore_isSingleDigit_0,savedHeapBefore_isSingleDigit_0"))
         (rule "simplifyUpdate2" (formula "18") (term "1"))
         (rule "ifUnfold" (formula "18") (term "1") (inst "#boolv=x_2"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_5"))
         (rule "compound_assignment_3_nonsimple" (formula "18") (term "1"))
         (rule "ifElseUnfold" (formula "18") (term "1") (inst "#boolv=x_6"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_6"))
         (rule "compound_assignment_2" (formula "18") (term "1") (inst "#v=x_7"))
         (rule "variableDeclarationAssign" (formula "18") (term "1"))
         (rule "variableDeclaration" (formula "18") (term "1") (newnames "x_7"))
         (rule "greater_equal_than_comparison_simple" (formula "18") (term "1"))
         (rule "sequentialToParallel2" (formula "18"))
         (rule "simplifyUpdate3" (formula "18") (term "1,0"))
         (rule "applyOnElementary" (formula "18") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
         (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
         (rule "replace_known_left" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
         (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
         (rule "compound_assignment_1_new" (formula "18") (term "1"))
         (rule "sequentialToParallel2" (formula "18"))
         (rule "simplifyUpdate2" (formula "18"))
         (rule "simplifyUpdate3" (formula "18") (term "1,0"))
         (rule "applyOnElementary" (formula "18") (term "1,0"))
         (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
         (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
         (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
         (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
         (rule "boolean_equal" (formula "18") (term "0,0,1,0"))
         (rule "ifthenelse_true" (formula "18") (term "0,1,0"))
         (rule "ifSplit" (formula "19"))
         (branch "if x_2 true"
            (rule "simplifyUpdate2" (formula "1"))
            (rule "simplifyUpdate2" (formula "20"))
            (rule "applyOnRigidFormula" (formula "1"))
            (rule "simplifyUpdate1" (formula "1") (term "1"))
            (rule "applyOnPV" (formula "1") (term "0"))
            (rule "ifthenelse_concrete3" (formula "1"))
            (rule "boolean_not_equal_2" (formula "1") (term "1"))
            (rule "concrete_or_4" (formula "1"))
            (rule "blockReturn" (formula "20") (term "1"))
            (rule "methodCallReturn" (formula "20") (term "1"))
            (rule "assignment" (formula "20") (term "1"))
            (rule "sequentialToParallel2" (formula "20"))
            (rule "simplifyUpdate3" (formula "20") (term "1,0"))
            (rule "methodCallEmpty" (formula "20") (term "1"))
            (rule "simplifyUpdate2" (formula "20"))
            (rule "emptyModality" (formula "20") (term "1"))
            (rule "applyOnRigidFormula" (formula "20"))
            (rule "simplifyUpdate1" (formula "20") (term "1"))
            (rule "applyOnPV" (formula "20") (term "0"))
            (rule "boolean_equal" (formula "20"))
            (rule "closeTrue" (formula "20"))
         )
         (branch "if x_2 false"
            (rule "false_to_not_true" (formula "1") (term "1"))
            (rule "simplifyUpdate2" (formula "20"))
            (rule "simplifyUpdate2" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "applyOnRigidFormula" (formula "18"))
            (rule "applyOnPV" (formula "18") (term "0"))
            (rule "simplifyUpdate1" (formula "18") (term "1"))
            (rule "ifthenelse_concrete3" (formula "18"))
            (rule "boolean_not_equal_2" (formula "18") (term "1"))
            (rule "concrete_or_4" (formula "18"))
            (rule "inEqSimp_leqRight" (formula "18"))
            (rule "mul_literals" (formula "1") (term "1,0,0"))
            (rule "add_literals" (formula "1") (term "0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "1"))
            (rule "mul_literals" (formula "1") (term "1"))
            (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "1"))
            (rule "leq_literals" (formula "2") (term "0"))
            (rule "concrete_or_1" (formula "2"))
            (rule "true_left" (formula "2"))
            (rule "methodCallReturn" (formula "19") (term "1"))
            (rule "assignment" (formula "19") (term "1"))
            (rule "sequentialToParallel2" (formula "19"))
            (rule "simplifyUpdate3" (formula "19") (term "1,0"))
            (rule "methodCallEmpty" (formula "19") (term "1"))
            (rule "simplifyUpdate2" (formula "19"))
            (rule "emptyModality" (formula "19") (term "1"))
            (rule "applyOnRigidFormula" (formula "19"))
            (rule "simplifyUpdate1" (formula "19") (term "1"))
            (rule "applyOnPV" (formula "19") (term "0"))
            (rule "boolean_not_equal_2" (formula "19"))
            (rule "false_right" (formula "19"))
            (rule "ifElseSplit" (formula "18"))
            (branch "if x_6 true"
               (rule "simplifyUpdate2" (formula "19"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "ifSkipThen" (formula "19") (term "1"))
               (rule "applyOnRigidFormula" (formula "1"))
               (rule "applyOnPV" (formula "1") (term "0"))
               (rule "simplifyUpdate1" (formula "1") (term "1"))
               (rule "boolean_not_equal_2" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "if x_6 false"
               (rule "false_to_not_true" (formula "1") (term "1"))
               (rule "simplifyUpdate2" (formula "19"))
               (rule "simplifyUpdate2" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "applyOnRigidFormula" (formula "18"))
               (rule "simplifyUpdate1" (formula "18") (term "1"))
               (rule "applyOnPV" (formula "18") (term "0"))
               (rule "boolean_not_equal_2" (formula "18"))
               (rule "false_right" (formula "18"))
               (rule "less_equal_than_comparison_simple" (formula "18") (term "1"))
               (rule "sequentialToParallel2" (formula "18"))
               (rule "simplifyUpdate2" (formula "18"))
               (rule "simplifyUpdate3" (formula "18") (term "1,0"))
               (rule "applyOnElementary" (formula "18") (term "1,0"))
               (rule "applyOnRigidTerm" (formula "18") (term "0,1,0"))
               (rule "simplifyUpdate1" (formula "18") (term "2,0,1,0"))
               (rule "simplifyUpdate1" (formula "18") (term "1,0,1,0"))
               (rule "applyOnRigidFormula" (formula "18") (term "0,0,1,0"))
               (rule "simplifyUpdate1" (formula "18") (term "1,0,0,1,0"))
               (rule "applyOnPV" (formula "18") (term "0,0,0,1,0"))
               (rule "blockEmpty" (formula "18") (term "1"))
               (rule "inEqSimp_contradInEq1" (formula "18") (term "0,0,1,0") (ifseqformula "1"))
               (rule "qeq_literals" (formula "18") (term "0,0,0,1,0"))
               (rule "concrete_and_2" (formula "18") (term "0,0,1,0"))
               (rule "ifthenelse_false" (formula "18") (term "0,1,0"))
               (rule "ifSplit" (formula "18"))
               (branch "if x_5 true"
                  (rule "simplifyUpdate2" (formula "19"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
               (branch "if x_5 false"
                  (rule "false_to_not_true" (formula "1") (term "1"))
                  (rule "simplifyUpdate2" (formula "19"))
                  (rule "simplifyUpdate2" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "applyOnRigidFormula" (formula "18"))
                  (rule "applyOnPV" (formula "18") (term "0"))
                  (rule "simplifyUpdate1" (formula "18") (term "1"))
                  (rule "boolean_not_equal_2" (formula "18"))
                  (rule "false_right" (formula "18"))
                  (rule "methodCallReturn" (formula "18") (term "1"))
                  (rule "assignment" (formula "18") (term "1"))
                  (rule "sequentialToParallel2" (formula "18"))
                  (rule "simplifyUpdate3" (formula "18") (term "1,0"))
                  (rule "methodCallEmpty" (formula "18") (term "1"))
                  (rule "simplifyUpdate2" (formula "18"))
                  (rule "emptyModality" (formula "18") (term "1"))
                  (rule "notRight" (formula "18"))
                  (rule "applyOnRigidFormula" (formula "1"))
                  (rule "applyOnPV" (formula "1") (term "0"))
                  (rule "simplifyUpdate1" (formula "1") (term "1"))
                  (rule "boolean_not_equal_2" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
   )
   (branch
      (rule "allRight" (formula "15") (inst "sk=i_0"))
      (rule "orRight" (formula "15"))
      (rule "orRight" (formula "15"))
      (rule "inEqSimp_geqRight" (formula "16"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "1") (term "0"))
      (rule "inEqSimp_leqRight" (formula "16"))
      (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
      (rule "mul_literals" (formula "1") (term "0,1,0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
      (rule "add_literals" (formula "1") (term "0,0,0"))
      (rule "add_zero_left" (formula "1") (term "0,0"))
      (rule "polySimp_addComm0" (formula "1") (term "0"))
      (rule "inEqSimp_sepNegMonomial0" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "0"))
      (rule "polySimp_elimOne" (formula "2") (term "0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "0"))
      (rule "polySimp_elimOne" (formula "1") (term "0"))
      (rule "inEqSimp_exactShadow3" (formula "10") (ifseqformula "1"))
      (rule "times_zero_1" (formula "10") (term "0,0"))
      (rule "add_zero_left" (formula "10") (term "0"))
      (rule "allLeft" (formula "14") (inst "t=i_0"))
      (rule "replace_known_right" (formula "14") (term "1") (ifseqformula "19"))
      (rule "concrete_or_4" (formula "14"))
      (rule "inEqSimp_commuteGeq" (formula "14") (term "0"))
      (rule "inEqSimp_homoInEq0" (formula "14") (term "1"))
      (rule "polySimp_addComm1" (formula "14") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1"))
      (rule "polySimp_mulComm0" (formula "14") (term "1,1"))
      (rule "polySimp_rightDist" (formula "14") (term "1,1"))
      (rule "mul_literals" (formula "14") (term "0,1,1"))
      (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1"))
      (rule "polySimp_elimOne" (formula "14") (term "1,1,1"))
      (rule "inEqSimp_contradInEq0" (formula "14") (term "1") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "14") (term "0,1"))
      (rule "polySimp_pullOutFactor1b" (formula "14") (term "0,0,1"))
      (rule "add_literals" (formula "14") (term "1,1,0,0,1"))
      (rule "times_zero_1" (formula "14") (term "1,0,0,1"))
      (rule "add_zero_right" (formula "14") (term "0,0,1"))
      (rule "leq_literals" (formula "14") (term "0,1"))
      (rule "concrete_and_2" (formula "14") (term "1"))
      (rule "concrete_or_4" (formula "14"))
      (rule "inEqSimp_contradInEq0" (formula "2") (ifseqformula "14"))
      (rule "andLeft" (formula "2"))
      (rule "inEqSimp_homoInEq1" (formula "2"))
      (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
      (rule "add_literals" (formula "2") (term "1,1,0"))
      (rule "times_zero_1" (formula "2") (term "1,0"))
      (rule "add_zero_right" (formula "2") (term "0"))
      (rule "leq_literals" (formula "2"))
      (rule "closeFalse" (formula "2"))
   )
)
(branch
   (rule "allRight" (formula "15") (inst "sk=f_0"))
   (rule "allRight" (formula "15") (inst "sk=o_0"))
   (rule "orRight" (formula "15"))
   (rule "orRight" (formula "15"))
   (rule "pullOutSelect" (formula "17") (term "0") (inst "selectSK=f_0_0"))
   (rule "simplifySelectOfStore" (formula "1"))
   (rule "equalUnique" (formula "1") (term "0,1,0,0"))
   (rule "concrete_not_2" (formula "1") (term "1,0,0"))
   (rule "concrete_and_3" (formula "1") (term "0,0"))
   (rule "castDel" (formula "1") (term "1,0"))
   (rule "eqSymm" (formula "18"))
   (rule "eqSymm" (formula "1") (term "1,0,0"))
   (rule "eqSymm" (formula "1") (term "0,0,0"))
   (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "16"))
   (rule "ifthenelse_false" (formula "1") (term "0"))
   (rule "close" (formula "18") (ifseqformula "1"))
)
)

}
