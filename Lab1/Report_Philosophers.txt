The Dining Philosophers
=======================

Solution in Spin by Lab group 16,
Simon Persson and Patrick Wadstr√∂m.

# 1. Use assertions in your code to verify this property about forks.
We have used assertions in key places to determine that,

 1. A philosopher never proceeds without both the left and the right fork.
 2. The forks are actually acquired by the philosopher, and not available
    for other philosophers to acquire.
 3. The forks acquired are only acquired by one philosopher.

The first property is simplisticly implemented as two boolean variables
which are set to true when a fork gets acquired by the philosopher himself.
After an acquire procedure continues, we assert that both left and right
fork has been acquired by the philosopher.

The second and third property is implemented as a single assertion after a
philosopher has succesfully acquired two forks. It asserts that both the
left and right fork, from this philosophers view, is acquired by only
one philosopher, and is thus not acquired by any other philosopher and
not available for acquisition.

Together with the atomic procedure of picking up a fork, i.e. in the
atomic block we check if the fork is free and acquire the fork. This
prohibits two philosophers from grabbing the same fork and wrongly think
that the fork is properly acquired. Without atomicity both could grab the
fork succesfully and proceed.

2. The first assertion helps us confirm the absence of deadlocks because the state when both forks are aquired can be viewed as a normal endstate. If the philospher makes this assertion false we know that the process is in a abnormal endstate. Since the assertion is never broken we know that we do not have any deadlocks.

# 3. How strong fairness assumptions do you need for starvation freedom to hold?
Since this is a liveness property, there needs to be atleast some fairness. All
philosophers must get some execution time. Using the ltl `<>progress` together with
a ghost variable `progress`, which is set to true by philosopher 1 when eating, we
can verify that, without some fairness, starvation freedom does not hold.

# 4. ... Can your LTL-based solution catch bugs not covered by your assertion-based solution? ...
The LTL-based solution is more thourough than the assertions in the case
that it verifies continously that a fork is only grabbed by one
philosopherat a time. While the assertions only verify that a fork is only
grabbed by one philosopher after some philosopher has succesfully grabbed
__two__ forks. The assertions does not verify fork exclusivity between
the atomic grabs.
